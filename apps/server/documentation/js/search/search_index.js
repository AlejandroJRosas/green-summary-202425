var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Admin.html",[0,0.227,1,3.004]],["body/classes/Admin.html",[0,0.336,1,5.27,2,1.335,3,0.117,4,0.106,5,0.083,6,6.121,7,0.178,8,0.007,9,4.671,10,1.894,11,3.554,12,5.61,13,4.263,14,4.453,15,6.896,16,0.117,17,3.257,18,0.006,19,0.006]],["title/modules/AppModule.html",[20,1.412,21,3.527]],["body/modules/AppModule.html",[0,0.176,3,0.062,4,0.056,5,0.044,7,0.188,8,0.008,16,0.062,18,0.004,19,0.004,20,1.911,21,7.258,22,1.536,23,1.536,24,1.617,25,1.617,26,1.536,27,1.617,28,1.617,29,3.211,30,3.211,31,5.516,32,5.516,33,5.516,34,5.516,35,5.516,36,5.516,37,5.516,38,5.516,39,5.516,40,5.232,41,5.516,42,5.968,43,5.968,44,5.516,45,5.516,46,5.516,47,2.375,48,1.617,49,1.617,50,3.618,51,2.44,52,0.635,53,1.708,54,1.055,55,3.618,56,5.313,57,2.943,58,4.495,59,2.336,60,4.264,61,3.618,62,3.618,63,2.336,64,3.618,65,3.618,66,3.618,67,3.618,68,3.618,69,3.618,70,3.618,71,3.618,72,3.618,73,2.389,74,2.583,75,5.313,76,3.618,77,2.336,78,3.618,79,2.336,80,3.618,81,3.618,82,3.211,83,3.618,84,3.618,85,3.618,86,2.583,87,3.618,88,3.618,89,3.618,90,3.618,91,3.618,92,3.618,93,2.943,94,0.883,95,3.618,96,3.618,97,0.866,98,0.201,99,3.618,100,3.211,101,3.618,102,3.618,103,1.246,104,3.618,105,1.758,106,2.943,107,3.618,108,3.618,109,3.618,110,3.211]],["title/controllers/AuthController.html",[111,1.303,112,3.527]],["body/controllers/AuthController.html",[0,0.265,3,0.093,4,0.083,5,0.065,7,0.179,8,0.008,16,0.093,18,0.006,19,0.006,52,0.954,94,1.326,97,1.301,98,0.302,111,1.521,112,5.336,113,1.649,114,4.821,115,2.365,116,4.821,117,0.302,118,1.718,119,2.144,120,5.726,121,4.821,122,6.26,123,0.763,124,5.431,125,0.37,126,5.431,127,1.301,128,0.935,129,1.181,130,1.301,131,1.616,132,2.805,133,2.719,134,2.996,135,4.821,136,2.719,137,5.288,138,4.821,139,4.821,140,4.821,141,2.365,142,1.491,143,5.025,144,4.821,145,4.821,146,4.545,147,4.821,148,5.431,149,5.431,150,2.719,151,1.754,152,5.431,153,5.431,154,5.431,155,3.678,156,7.038,157,1.491,158,5.431,159,3.225,160,5.288,161,5.431,162,3.42,163,2.719,164,5.431,165,5.431]],["title/guards/AuthGuard.html",[166,3.785,167,3.527]],["body/guards/AuthGuard.html",[0,0.219,3,0.076,4,0.069,5,0.054,7,0.17,8,0.008,16,0.076,18,0.005,19,0.005,52,0.788,58,6.073,59,2.899,60,3.04,94,2.026,97,1.699,98,0.447,103,2.133,117,0.25,118,1.513,119,1.948,125,0.483,127,1.699,128,1.221,129,1.543,130,1.484,135,6.297,147,3.984,155,3.04,157,1.232,159,2.665,162,3.011,163,3.102,167,4.697,168,3.652,169,3.984,170,6.789,171,2.986,172,6.195,173,2.044,174,4.489,175,7.365,176,7.549,177,4.489,178,5.499,179,6.223,180,4.489,181,3.652,182,3.199,183,6.195,184,5.925,185,4.489,186,1.604,187,2.61,188,1.542,189,3.403,190,3.403,191,2.899,192,3.652,193,3.04,194,5.499,195,4.489,196,3.984,197,3.984,198,3.984,199,6.789,200,4.489,201,3.984,202,4.489,203,5.499,204,4.489,205,3.984,206,4.489,207,4.489,208,4.489,209,4.489]],["title/modules/AuthModule.html",[20,1.412,31,3.322]],["body/modules/AuthModule.html",[0,0.252,3,0.088,4,0.079,5,0.062,7,0.187,8,0.008,11,2.252,16,0.088,18,0.005,19,0.005,20,2.315,22,2.195,23,2.195,24,2.312,25,2.312,26,2.195,27,3.409,28,2.312,31,6.177,47,3.047,48,2.312,49,2.312,51,2.375,52,0.908,53,2.442,54,1.508,57,5.546,58,5.444,59,3.34,60,4.617,93,4.208,94,1.263,97,1.239,103,1.781,106,4.208,112,5.781,113,2.069,137,5.859,138,4.591,167,5.168,189,3.921,190,3.921,205,4.591,210,4.591,211,4.591,212,5.172,213,5.172,214,3.34,215,5.172,216,5.172,217,7.625,218,5.168,219,5.172,220,5.172,221,5.172,222,5.172,223,5.172,224,5.172,225,5.172,226,5.172,227,5.172,228,5.172,229,6.817,230,6.817]],["title/injectables/AuthService.html",[137,3.151,188,1.158]],["body/injectables/AuthService.html",[0,0.229,3,0.08,4,0.072,5,0.057,7,0.179,8,0.008,10,1.291,11,3.396,16,0.08,18,0.005,19,0.005,52,0.826,54,1.371,94,2.055,97,1.126,98,0.434,103,2.809,117,0.262,118,1.562,119,1.996,120,5.203,121,5.676,122,5.825,125,0.435,127,1.532,128,1.251,129,1.391,130,1.126,131,1.399,137,4.331,139,4.173,140,4.173,143,4.566,144,4.173,145,4.173,157,1.756,162,2.285,163,2.354,171,2.301,173,2.11,175,7.642,188,1.592,190,3.565,199,5.676,203,4.173,214,3.036,231,1.899,232,4.173,233,4.173,234,3.229,235,4.702,236,5.676,237,4.702,238,1.996,239,5.203,240,3.825,241,4.702,242,4.13,243,4.702,244,3.825,245,1.418,246,3.357,247,3.797,248,6.395,249,4.702,250,4.702,251,4.173,252,4.702,253,4.702,254,4.173,255,4.702,256,3.565,257,3.565,258,3.357,259,3.565,260,3.357,261,3.565,262,3.565,263,3.565,264,3.184,265,5.676,266,3.302]],["title/controllers/CategoriesController.html",[111,1.303,267,3.527]],["body/controllers/CategoriesController.html",[0,0.148,3,0.052,4,0.047,5,0.036,7,0.171,8,0.008,16,0.052,18,0.004,19,0.004,52,0.532,94,1.837,97,1.731,98,0.432,111,0.849,113,0.92,115,1.319,117,0.169,118,1.135,119,2.474,123,1.057,125,0.512,127,1.802,128,1.295,129,1.636,130,1.802,131,2.15,132,2.401,133,2.328,134,1.672,136,1.517,141,1.319,142,0.832,150,1.517,151,0.979,157,2.066,186,2.243,187,2.082,245,1.668,267,3.526,268,2.69,269,4.283,270,4.651,271,4.128,272,5.023,273,5.659,274,5.659,275,4.651,276,5.023,277,3.03,278,4.532,279,4.077,280,2.69,281,3.03,282,4.651,283,2.69,284,3.03,285,3.03,286,2.69,287,1.927,288,1.354,289,2.008,290,2.008,291,4.651,292,4.651,293,3.03,294,3.03,295,3.03,296,3.95,297,3.03,298,3.03,299,2.875,300,3.03,301,3.03,302,3.03,303,1.601,304,3.03,305,3.03,306,3.03,307,2.69,308,5.634,309,4.532,310,3.03,311,3.03,312,1.517,313,1.355,314,1.616,315,3.145,316,3.833,317,2.69,318,1.115,319,4.128,320,1.224,321,0.939,322,0.979,323,2.079,324,1.355,325,1.355,326,1.319,327,1.431,328,0.979,329,1.021,330,0.979,331,1.567,332,1.021,333,1.392,334,1.473,335,1.355,336,1.473,337,3.03,338,3.03,339,1.79,340,0.939,341,1.718,342,1.355,343,1.252,344,1.534,345,1.355,346,1.471,347,1.502,348,3.03,349,2.401,350,3.833,351,2.465,352,3.03,353,2.503,354,3.03,355,1.732,356,3.03,357,4.651,358,3.03,359,2.465,360,1.732,361,3.03,362,2.465,363,2.465,364,1.732,365,3.03,366,3.03,367,2.69,368,2.69,369,3.03,370,2.69,371,2.297,372,2.052,373,3.03,374,2.69]],["title/modules/CategoriesModule.html",[20,1.412,32,3.322]],["body/modules/CategoriesModule.html",[0,0.28,3,0.098,4,0.088,5,0.069,7,0.187,8,0.008,16,0.098,18,0.006,19,0.006,20,2.434,22,2.439,23,2.439,24,2.569,25,2.569,26,2.439,27,3.585,28,3.262,32,6.354,47,3.262,48,2.569,49,2.569,51,2.639,52,1.009,53,3.446,54,1.675,113,2.215,267,6.08,316,6.027,317,5.101,353,2.878,375,5.101,376,5.101,377,5.747,378,5.747,379,5.101,380,2.878,381,3.553,382,2.459,383,2.793,384,3.178,385,2.639,386,2.793,387,2.793,388,3.17]],["title/injectables/CategoriesService.html",[188,1.158,316,3.151]],["body/injectables/CategoriesService.html",[0,0.137,3,0.048,4,0.043,5,0.034,7,0.173,8,0.008,10,0.772,16,0.048,18,0.003,19,0.003,52,0.494,54,0.82,94,1.944,97,1.679,98,0.433,117,0.34,118,1.072,119,2.447,125,0.516,127,1.815,128,1.371,129,1.648,130,1.754,131,0.837,151,1.971,157,2.186,162,2.624,163,2.703,171,2.195,173,1.448,182,4.256,188,1.093,231,1.136,234,3.458,238,1.194,245,1.827,269,3.65,271,3.897,272,4.793,276,4.793,278,5.006,283,3.897,286,2.497,287,1.333,288,0.936,289,1.389,290,1.389,303,1.859,307,2.497,308,4.793,309,5.229,316,2.973,318,1.035,319,3.897,320,1.136,321,0.872,322,0.909,328,0.909,329,0.948,330,0.909,331,1.479,332,0.948,339,1.389,340,0.872,341,1.639,343,1.182,344,1.448,346,1.389,347,1.418,353,2.609,379,2.497,380,3.25,381,1.739,382,0.948,383,1.367,384,1.225,385,1.292,386,1.367,387,1.367,389,2.497,390,4.39,391,4.39,392,1.512,393,4.39,394,2.813,395,4.094,396,3.487,397,3.657,398,2.813,399,3.572,400,4.39,401,1.5,402,2.813,403,3.135,404,4.39,405,2.813,406,4.39,407,2.813,408,2.813,409,2.813,410,4.39,411,2.813,412,2.813,413,2.133,414,1.292,415,1.292,416,1.257,417,2.009,418,2.009,419,1.608,420,1.905,421,4.094,422,2.813,423,2.813,424,2.813,425,2.813,426,2.48,427,1.328,428,1.328,429,1.328,430,1.328,431,4.39,432,5.4,433,3.855,434,4.39,435,4.39,436,4.39,437,2.422,438,4.39,439,2.288,440,2.813,441,2.497,442,2.009,443,2.813,444,2.198,445,2.813,446,2.813,447,2.813,448,2.813,449,2.813,450,2.813,451,2.813,452,2.813,453,2.497,454,2.813,455,2.288,456,2.813,457,2.813]],["title/entities/CategorizedCriteria.html",[384,2.026,458,1.712]],["body/entities/CategorizedCriteria.html",[0,0.252,3,0.088,4,0.079,5,0.062,7,0.166,8,0.008,10,1.42,16,0.088,18,0.005,19,0.005,98,0.451,117,0.288,123,1.138,125,0.552,245,1.69,353,3.572,382,3.052,384,2.968,386,4.094,401,1.197,444,3.413,458,1.903,459,2.671,460,4.35,461,4.591,462,1.197,463,3.706,464,4.527,465,6.817,466,5.172,467,6.817,468,5.172,469,4.207,470,5.172,471,6.05,472,4.402,473,5.234,474,4.867,475,5.172,476,4.813,477,3.197,478,3.693,479,4.208,480,3.503,481,5.172,482,4.208]],["title/controllers/CategorizedCriteriaController.html",[111,1.303,483,3.527]],["body/controllers/CategorizedCriteriaController.html",[0,0.172,3,0.06,4,0.054,5,0.043,7,0.177,8,0.008,16,0.06,18,0.004,19,0.004,52,0.62,79,4.947,94,0.863,97,1.753,98,0.426,111,0.99,113,1.073,115,1.539,117,0.197,118,1.275,119,2.446,123,1.028,125,0.498,127,1.753,128,1.26,129,1.591,130,1.753,131,2.177,132,3.207,133,3.109,141,1.539,142,0.97,151,1.141,157,0.97,171,1.271,173,1.166,187,2.285,245,1.804,279,1.717,287,2.082,288,1.463,289,2.17,290,2.17,296,1.717,312,1.769,313,1.58,314,1.885,315,3.361,318,1.3,320,1.427,321,1.095,322,1.141,323,2.334,324,1.58,325,1.58,326,1.539,327,1.669,328,1.141,329,1.191,330,1.141,331,1.76,332,1.191,333,1.623,334,1.717,335,1.58,336,1.717,339,1.964,340,1.095,341,1.885,342,1.58,343,1.406,344,1.722,345,1.58,346,1.652,347,1.687,360,2.02,384,2.274,385,3.361,392,2.138,401,1.459,460,3.956,463,2.84,483,3.959,484,3.136,485,2.392,486,2.011,487,2.216,488,2.776,489,3.136,490,5.188,491,3.534,492,1.361,493,3.534,494,1.394,495,2.696,496,3.534,497,1.623,498,2.985,499,3.534,500,1.669,501,6.088,502,4.898,503,3.1,504,3.534,505,4.206,506,3.136,507,4.248,508,3.534,509,3.534,510,3.534,511,1.949,512,3.534,513,3.534,514,3.534,515,2.185,516,3.534]],["title/modules/CategorizedCriteriaModule.html",[20,1.412,33,3.322]],["body/modules/CategorizedCriteriaModule.html",[0,0.273,3,0.095,4,0.086,5,0.067,7,0.188,8,0.008,16,0.095,18,0.006,19,0.006,20,2.403,22,2.373,23,2.373,24,2.5,25,2.5,26,2.373,27,3.539,28,2.5,33,6.309,47,3.206,48,2.5,49,2.5,51,2.568,52,0.982,53,2.64,54,1.63,73,2.469,79,3.611,113,2.177,353,2.828,382,2.417,383,2.717,384,3.123,385,3.294,387,2.717,388,3.085,460,2.887,463,2.969,483,6.003,505,5.984,506,4.963,517,4.963,518,4.963,519,5.592,520,4.963,521,5.592,522,3.457,523,3.611,524,3.956,525,2.717,526,3.457,527,3.457]],["title/injectables/CategorizedCriteriaService.html",[188,1.158,505,3.151]],["body/injectables/CategorizedCriteriaService.html",[0,0.129,3,0.045,4,0.041,5,0.032,7,0.172,8,0.008,10,0.728,16,0.045,18,0.003,19,0.003,52,0.466,54,0.773,73,1.443,79,4.625,94,1.911,97,1.415,98,0.399,117,0.148,118,1.024,119,2.317,125,0.465,127,1.638,128,1.177,129,1.487,130,1.541,131,0.789,151,2.078,157,1.967,162,2.037,163,2.099,171,2.315,173,1.383,182,3.834,188,1.044,231,1.071,234,3.527,238,1.126,245,1.85,287,1.273,288,0.894,289,1.326,290,1.326,303,2.034,318,0.976,320,1.071,321,0.822,322,0.857,328,0.857,329,0.894,330,0.857,331,1.413,332,0.894,339,0.839,340,0.822,341,0.805,343,1.129,344,1.383,346,1.326,347,1.354,353,3.149,380,2.825,382,2.737,383,1.289,384,2.978,385,2.387,387,1.289,392,1.79,396,3.357,397,2.839,399,4.229,401,1.342,414,1.218,415,1.218,416,1.186,417,1.894,419,1.516,420,1.796,426,3.595,427,1.252,428,1.252,429,1.252,430,1.252,444,2.602,460,3.699,463,3.164,485,2.002,486,1.615,487,1.779,488,2.324,489,2.354,490,4.851,492,1.022,494,1.653,497,1.925,500,1.252,501,5.243,502,4.218,505,2.839,507,3.41,520,2.354,522,1.64,523,1.713,524,1.463,525,1.289,526,1.64,527,1.64,528,2.354,529,2.652,530,4.229,531,5.198,532,2.652,533,2.652,534,2.652,535,2.652,536,2.652,537,2.652,538,5.198,539,1.894,540,2.158,541,2.652,542,3.41,543,2.158,544,4.479,545,4.218,546,2.871,547,2.652,548,2.839,549,2.652,550,3.721,551,4.192,552,5.907,553,4.192,554,5.243,555,5.907,556,4.192,557,4.192,558,4.192,559,2.354,560,2.652,561,4.192,562,2.652,563,1.894,564,4.192,565,2.158,566,2.354,567,2.011,568,2.652]],["title/entities/Category.html",[353,1.835,458,1.712]],["body/entities/Category.html",[0,0.209,3,0.073,4,0.066,5,0.052,7,0.167,8,0.008,10,1.177,16,0.073,18,0.005,19,0.005,98,0.491,105,3.644,117,0.239,123,1.203,125,0.583,128,1.191,186,1.941,187,2.207,245,1.534,353,2.366,380,3.434,384,3.562,386,2.083,387,2.083,401,1.053,437,3.818,458,1.577,459,2.213,460,2.213,462,1.053,464,2.545,469,3.818,472,3.874,473,5.282,474,4.284,476,3.562,487,1.819,567,4.549,569,3.804,570,4.942,571,5.631,572,4.47,573,4.47,574,4.279,575,4.286,576,3.31,577,5.631,578,4.286,579,3.31,580,3.43,581,4.452,582,4.286,583,4.286,584,5.999,585,4.286,586,3.562,587,5.999,588,4.286,589,4.88,590,4.284,591,4.286,592,4.676,593,5.999,594,4.286,595,3.249,596,2.146,597,2.083,598,2.083,599,3.804,600,3.818,601,4.635,602,2.545,603,2.545,604,4.286,605,4.286,606,3.804]],["title/classes/CategoryToRecommend.html",[0,0.227,607,3.322]],["body/classes/CategoryToRecommend.html",[0,0.427,2,1.136,3,0.1,4,0.09,5,0.071,7,0.151,8,0.008,16,0.138,18,0.006,19,0.006,98,0.473,103,2.545,117,0.326,123,0.824,125,0.399,269,3.236,303,2.02,401,1.492,462,1.298,546,3.934,607,6.069,608,5.605,609,4.447,610,2.85,611,5.865,612,4.774,613,5.228,614,3.719,615,3.799,616,5.483,617,1.489,618,3.353,619,3.788,620,4.774,621,5.78,622,2.77,623,3.128]],["title/classes/ClassValidatorValidationsException.html",[0,0.227,624,3.527]],["body/classes/ClassValidatorValidationsException.html",[0,0.375,2,1.211,3,0.106,4,0.096,5,0.075,7,0.128,8,0.007,16,0.106,17,3.633,18,0.006,19,0.006,98,0.428,117,0.348,125,0.524,127,1.497,128,1.076,129,1.36,146,5.381,173,2.063,462,1.351,617,2.207,624,5.832,625,6.318,626,5.549,627,4.567,628,7.923,629,7.693,630,8.067,631,7.693,632,5.549,633,6.252]],["title/classes/ClassValidatorValidationsExceptionFilter.html",[0,0.227,634,3.785]],["body/classes/ClassValidatorValidationsExceptionFilter.html",[0,0.377,2,1.03,3,0.091,4,0.082,5,0.064,7,0.174,8,0.008,16,0.091,18,0.005,19,0.005,52,0.934,94,1.887,97,1.662,98,0.296,117,0.296,118,1.695,125,0.362,127,1.273,128,0.915,129,1.156,130,1.273,136,2.662,146,4.991,159,4.864,160,3.601,191,3.434,193,4.701,617,2.08,624,6.212,625,5.263,627,3.157,630,6.161,634,5.647,635,5.647,636,3.601,637,6.287,638,4.326,639,5.86,640,6.665,641,5.317,642,5.647,643,5.85,644,4.701,645,3.601,646,3.601,647,5.317,648,5.317,649,4.326,650,4.326,651,4.326,652,5.317,653,4.719,654,5.317,655,5.317,656,4.719,657,4.719,658,4.719,659,6.942,660,5.317,661,5.317,662,5.317]],["title/classes/Coordinator.html",[0,0.227,663,2.876]],["body/classes/Coordinator.html",[0,0.336,2,1.335,3,0.117,4,0.106,5,0.083,7,0.178,8,0.007,9,4.671,10,1.894,11,3.554,12,5.61,13,4.263,14,4.453,16,0.117,17,3.257,18,0.006,19,0.006,663,5.046,664,6.121,665,6.896]],["title/classes/CreateCategorizedCriteriaDto.html",[0,0.227,490,3.151]],["body/classes/CreateCategorizedCriteriaDto.html",[0,0.367,2,1.169,3,0.103,4,0.093,5,0.073,7,0.123,8,0.007,16,0.103,18,0.006,19,0.006,98,0.456,117,0.336,123,1.152,125,0.558,303,2.824,385,3.944,401,1.582,460,4.434,462,1.322,490,5.098,545,5.857,546,3.986,610,3.986,614,3.645,615,3.839,617,1.532,666,7.622,667,4.911,668,6.037,669,6.037,670,6.037]],["title/classes/CreateCategoryDto.html",[0,0.227,278,3.322]],["body/classes/CreateCategoryDto.html",[0,0.365,2,1.157,3,0.102,4,0.092,5,0.072,7,0.153,8,0.007,16,0.102,18,0.006,19,0.006,98,0.454,117,0.332,123,1.146,125,0.556,128,1.405,186,2.214,278,5.339,299,5.046,401,1.313,437,4.503,462,1.313,602,3.546,603,3.546,610,2.903,614,3.631,615,3.343,617,1.516,671,7.593,672,4.859,673,5.973,674,5.973,675,5.973,676,5.973,677,5.973,678,3.297,679,3.693,680,3.693,681,3.857,682,5.973,683,4.529,684,4.529]],["title/classes/CreateCriteriaDto.html",[0,0.227,685,3.151]],["body/classes/CreateCriteriaDto.html",[0,0.335,2,1.013,3,0.089,4,0.08,5,0.063,7,0.14,8,0.007,16,0.089,18,0.005,19,0.005,98,0.483,117,0.291,123,1.219,125,0.591,128,1.32,129,1.77,186,2.246,299,4.74,401,1.43,437,4.23,462,1.206,602,3.106,603,3.106,610,2.542,614,3.589,615,3.428,617,1.328,678,3.289,679,3.234,680,3.234,681,4.435,683,3.967,684,3.967,685,4.652,686,7.85,687,4.256,688,4.952,689,6.238,690,5.814,691,5.232,692,5.232,693,4.643,694,5.232,695,4.643,696,5.232,697,5.232,698,5.232,699,3.789,700,4.643,701,5.232,702,5.232,703,6.096,704,3.174,705,5.232,706,6.868]],["title/classes/CreateDepartmentsPerRecopilationDto.html",[0,0.227,707,3.322]],["body/classes/CreateDepartmentsPerRecopilationDto.html",[0,0.363,2,1.148,3,0.101,4,0.091,5,0.071,7,0.121,8,0.007,16,0.101,18,0.006,19,0.006,73,3.088,98,0.414,103,2.041,117,0.33,123,1.045,125,0.506,303,2.801,401,1.498,462,1.307,610,2.88,612,4.805,613,4.805,614,3.452,615,3.814,617,1.504,620,4.805,707,5.313,708,4.2,709,6.617,710,2.993,711,3.388,712,7.15,713,5.927,714,7.441,715,5.927,716,5.927,717,4.821,718,4.493,719,5.927]],["title/classes/CreateEvidenceDto.html",[0,0.227,720,2.876]],["body/classes/CreateEvidenceDto.html",[0,0.334,2,1.011,3,0.089,4,0.08,5,0.063,7,0.156,8,0.008,16,0.089,18,0.005,19,0.005,98,0.505,117,0.29,123,1.218,125,0.59,129,1.769,186,2.322,401,1.204,462,1.204,602,3.099,603,3.099,614,3.453,617,1.325,627,4.548,678,3.413,679,3.227,680,3.227,704,3.367,720,4.24,721,7.846,722,4.246,723,5.807,724,3.955,725,5.469,726,5.469,727,5.22,728,5.22,729,5.22,730,5.22,731,4.633,732,5.22,733,5.22,734,5.22,735,5.22,736,5.22,737,4.946,738,5.22,739,5.22,740,2.613,741,6.087,742,3.371,743,4.633,744,4.633,745,5.22,746,5.22]],["title/classes/CreateIndicatorDto.html",[0,0.227,747,3.322]],["body/classes/CreateIndicatorDto.html",[0,0.355,2,1.107,3,0.097,4,0.088,5,0.069,7,0.149,8,0.007,16,0.097,18,0.006,19,0.006,98,0.469,117,0.469,123,1.182,125,0.573,128,1.377,186,2.3,401,1.277,437,4.414,462,1.277,602,3.395,603,3.395,610,2.779,614,3.69,615,3.252,617,1.451,678,3.401,679,3.535,680,3.535,681,4.698,683,4.335,684,4.335,688,5.166,693,5.075,747,5.194,748,7.717,749,4.652,750,7.275,751,5.075,752,5.075,753,5.075,754,5.075,755,6.457]],["title/classes/CreateIndicatorPerRecopilationDto.html",[0,0.227,756,3.151]],["body/classes/CreateIndicatorPerRecopilationDto.html",[0,0.374,2,1.204,3,0.106,4,0.095,5,0.075,7,0.127,8,0.007,16,0.106,18,0.006,19,0.006,73,3.125,98,0.427,117,0.346,123,1.077,125,0.522,299,5.139,303,2.862,380,3.278,401,1.524,462,1.346,614,3.528,615,3.716,617,1.578,709,6.762,711,3.555,717,5.058,756,5.192,757,4.935,758,7.667,759,5.519]],["title/classes/CreateInformationCollectionDto.html",[0,0.227,760,3.151]],["body/classes/CreateInformationCollectionDto.html",[0,0.341,2,1.042,3,0.092,4,0.083,5,0.065,7,0.143,8,0.007,16,0.092,18,0.005,19,0.005,98,0.475,117,0.299,123,1.198,125,0.581,128,1.338,186,2.13,303,2.676,401,1.535,462,1.228,546,3.777,596,4.378,602,3.194,603,3.194,610,3.777,614,3.712,615,3.679,617,1.366,623,4.145,678,3.14,679,3.326,680,3.326,681,3.474,760,4.737,761,7.762,762,4.016,763,4.377,764,4.805,765,5.38,766,5.38,767,5.38,768,5.38,769,5.38,770,5.38,771,5.38,772,5.38,773,5.38,774,5.38]],["title/classes/CreateNotificationDto.html",[0,0.227,775,3.151]],["body/classes/CreateNotificationDto.html",[0,0.367,2,1.169,3,0.103,4,0.093,5,0.073,7,0.154,8,0.007,16,0.103,18,0.006,19,0.006,98,0.501,117,0.336,123,1.152,125,0.558,266,4.235,401,1.322,462,1.322,610,2.934,614,3.645,615,3.365,617,1.532,740,3.022,775,5.098,776,7.622,777,4.911,778,5.857,779,6.681,780,6.037,781,6.037,782,6.673,783,6.037,784,6.037,785,6.037,786,7.527,787,3.898,788,4.911,789,6.037]],["title/classes/CreateRecommendationDto.html",[0,0.227,790,3.322]],["body/classes/CreateRecommendationDto.html",[0,0.372,2,1.194,3,0.105,4,0.095,5,0.074,7,0.126,8,0.007,16,0.105,18,0.006,19,0.006,98,0.461,117,0.343,123,1.163,125,0.564,303,2.852,401,1.59,462,1.339,546,4.025,610,4.025,614,3.673,615,3.868,617,1.566,623,4.417,790,5.447,791,7.68,792,5.474,793,6.167,794,6.167,795,6.167]],["title/classes/CreateRecopilationDto.html",[0,0.227,796,3.151]],["body/classes/CreateRecopilationDto.html",[0,0.296,2,0.846,3,0.074,4,0.067,5,0.053,7,0.143,8,0.008,16,0.074,18,0.005,19,0.005,98,0.442,117,0.243,118,1.484,123,1.155,125,0.56,128,1.204,130,1.046,162,2.954,163,3.785,186,2.316,462,1.067,576,3.858,602,2.593,603,2.593,614,3.492,617,1.109,656,3.877,678,2.825,679,2.7,680,2.7,681,2.821,711,2.497,724,3.611,743,3.877,744,3.877,796,5.573,797,7.493,798,4.993,799,4.993,800,5.675,801,7.56,802,6.079,803,4.368,804,4.368,805,4.368,806,4.368,807,4.368,808,4.368,809,4.368,810,4.368,811,6.079,812,4.368,813,4.368,814,7.948,815,4.368,816,4.368,817,4.368,818,3.877,819,4.368,820,4.368,821,4.368,822,4.368,823,3.553,824,4.368,825,4.368,826,4.368,827,3.312,828,6.465,829,4.368,830,3.553,831,4.368,832,7.56,833,6.079,834,6.079,835,6.079,836,6.079,837,6.079,838,6.079,839,6.079,840,4.368,841,4.368,842,6.079,843,4.368,844,6.079,845,4.368,846,4.368,847,4.368]],["title/classes/CreateUserDto.html",[0,0.227,848,3.151]],["body/classes/CreateUserDto.html",[0,0.351,2,1.088,3,0.096,4,0.086,5,0.068,7,0.162,8,0.007,13,3.474,14,3.629,16,0.096,18,0.006,19,0.006,98,0.501,117,0.313,123,1.175,125,0.569,186,2.29,242,5.124,246,5.666,247,4.711,462,1.263,602,3.336,603,3.336,614,3.551,617,1.426,678,3.205,679,3.474,680,3.474,681,3.629,704,2.978,740,2.813,848,4.872,849,7.676,850,4.571,851,5.619,852,5.619,853,5.619,854,5.619,855,5.619,856,5.619,857,6.455,858,5.619,859,5.619,860,6.385,861,5.619,862,5.619,863,5.619,864,5.619,865,5.619]],["title/entities/Criteria.html",[458,1.712,463,1.926]],["body/entities/Criteria.html",[0,0.209,3,0.073,4,0.066,5,0.052,7,0.142,8,0.008,10,1.179,16,0.073,18,0.005,19,0.005,98,0.496,103,2.068,105,4.166,117,0.334,123,1.223,125,0.593,128,1.193,186,2.118,187,1.58,245,1.536,380,3.517,384,3.564,386,2.087,387,2.087,401,1.318,437,3.822,458,1.58,459,2.217,460,2.217,462,1.055,463,2.487,464,2.549,469,3.822,472,3.879,473,5.285,474,4.289,476,3.567,477,3.714,487,1.822,566,5.332,570,4.947,571,6.425,574,2.654,576,3.314,577,5.636,579,3.314,580,3.434,581,4.455,595,3.256,600,4.635,601,3.714,606,3.811,688,4.474,689,5.636,690,5.253,699,4.14,866,3.811,867,5.332,868,4.294,869,4.294,870,4.294,871,4.294,872,4.294,873,6.007,874,4.294,875,4.294,876,3.567,877,4.294,878,4.294,879,4.294,880,4.294,881,4.289,882,4.294]],["title/classes/CriteriaToRelate.html",[0,0.227,883,3.322]],["body/classes/CriteriaToRelate.html",[0,0.421,2,1.08,3,0.095,4,0.086,5,0.067,7,0.146,8,0.008,16,0.135,18,0.006,19,0.006,98,0.48,103,2.465,117,0.31,123,1.005,125,0.487,303,1.921,401,1.55,403,3.983,444,2.793,462,1.257,525,4.055,545,5.646,546,3.843,610,3.48,612,5.106,613,5.106,614,3.811,615,3.857,616,5.356,617,1.416,618,3.189,620,4.624,711,3.189,883,5.957,884,5.996,885,5.578,886,5.578,887,3.602,888,5.646]],["title/controllers/CriterionController.html",[111,1.303,889,3.527]],["body/controllers/CriterionController.html",[0,0.142,3,0.05,4,0.045,5,0.035,7,0.17,8,0.008,16,0.05,18,0.004,19,0.004,52,0.513,94,1.813,97,1.705,98,0.427,111,0.818,113,0.887,115,1.272,117,0.163,118,1.104,119,2.461,123,1.043,125,0.505,127,1.778,128,1.278,129,1.615,130,1.778,131,2.118,132,2.335,133,2.264,134,1.612,136,1.463,141,1.272,142,0.802,150,1.463,151,0.944,155,1.978,157,2.039,159,1.734,160,3.062,162,1.42,186,2.228,187,2.732,245,1.746,279,1.42,287,1.89,288,1.716,289,2.545,290,1.97,296,1.42,299,2.795,303,1.557,312,1.463,313,1.306,314,1.558,315,3.617,318,1.075,320,1.18,321,0.905,322,0.944,323,2.021,324,1.306,325,1.306,326,1.272,327,1.379,328,0.944,329,0.984,330,0.944,331,1.524,332,0.984,333,1.342,334,1.42,335,1.306,336,1.42,339,1.75,340,0.905,341,1.679,342,1.306,343,1.917,344,2.349,345,2.472,346,1.43,347,1.46,349,2.335,355,1.67,360,1.67,362,2.376,364,1.67,367,4.013,368,2.593,370,2.593,371,3.428,372,1.978,374,2.593,444,4.029,463,2.577,495,2.335,498,1.67,503,2.684,685,4.217,889,3.428,890,2.593,891,4.013,892,4.013,893,4.909,894,5.531,895,5.531,896,4.013,897,4.909,898,2.593,899,1.886,900,2.921,901,4.013,902,2.593,903,1.978,904,2.921,905,2.593,906,2.921,907,2.921,908,2.921,909,2.921,910,2.921,911,2.593,912,2.921,913,2.593,914,5.479,915,2.921,916,3.746,917,2.593,918,3.678,919,2.921,920,2.921,921,2.921,922,2.921,923,2.215,924,2.921,925,2.921,926,2.921,927,2.921,928,2.921,929,2.921,930,2.921,931,2.921]],["title/modules/CriterionModule.html",[20,1.412,34,3.322]],["body/modules/CriterionModule.html",[0,0.286,3,0.1,4,0.09,5,0.071,7,0.186,8,0.008,16,0.1,18,0.006,19,0.006,20,2.458,22,2.489,23,2.489,24,2.622,25,2.622,26,2.489,27,3.619,28,3.305,34,6.387,47,3.305,48,2.622,49,2.622,51,2.694,52,1.03,53,3.491,54,1.71,113,2.244,380,2.915,381,3.626,384,3.219,385,2.694,386,2.85,387,2.85,463,2.428,889,6.138,916,6.058,917,5.206,932,5.206,933,5.206,934,5.865,935,5.865,936,5.206,937,5.865]],["title/injectables/CriterionService.html",[188,1.158,916,3.151]],["body/injectables/CriterionService.html",[0,0.138,3,0.048,4,0.043,5,0.034,7,0.171,8,0.008,10,0.776,16,0.048,18,0.003,19,0.003,52,0.496,54,0.824,94,1.983,97,1.757,98,0.434,117,0.34,118,1.076,119,2.449,125,0.517,127,1.818,128,1.306,129,1.65,130,1.757,131,0.841,151,1.75,157,2.266,171,1.949,173,1.454,182,4.261,187,1.622,188,1.097,231,1.142,234,3.301,238,1.2,245,1.801,256,2.143,257,2.143,258,2.018,259,2.143,260,2.018,261,2.143,262,2.143,263,2.143,264,1.915,287,1.338,288,1.305,289,1.935,290,1.394,299,1.748,303,1.865,318,1.04,320,1.142,321,0.876,322,0.913,328,0.913,329,0.953,330,0.913,331,1.485,332,0.953,339,1.394,340,0.876,341,1.644,343,1.891,344,2.318,346,1.394,347,1.424,380,3.145,381,1.748,382,0.953,384,1.231,385,1.298,386,1.374,387,1.374,395,4.107,397,3.669,401,1.501,403,3.868,414,1.298,415,1.298,416,1.264,418,2.018,420,1.915,421,4.107,426,2.488,427,1.335,428,1.335,429,2.558,430,1.335,444,2.712,463,3.228,530,3.585,539,2.018,550,2.509,685,4.143,891,4.808,892,3.912,893,4.808,896,3.912,897,4.808,898,2.509,901,4.808,902,3.912,905,2.509,911,3.912,913,2.509,914,5.419,916,2.985,918,3.585,936,2.509,938,2.509,939,5.417,940,5.417,941,2.827,942,2.827,943,2.827,944,2.827,945,2.827,946,2.827,947,2.827,948,2.827,949,2.827,950,2.827,951,2.827,952,2.827,953,4.407,954,2.827,955,2.827,956,2.827,957,4.407,958,4.407,959,2.827,960,3.912,961,2.827,962,4.407,963,2.827,964,2.827,965,2.827,966,2.827]],["title/classes/Department.html",[0,0.227,710,1.712]],["body/classes/Department.html",[0,0.28,2,1.11,3,0.098,4,0.088,5,0.069,7,0.178,8,0.008,9,3.882,10,1.574,11,3.173,12,4.663,13,3.544,14,3.702,16,0.098,17,2.707,18,0.006,19,0.006,73,2.509,98,0.405,117,0.319,123,1.023,125,0.496,462,1.279,572,5.172,574,4.504,586,3.872,596,2.87,597,2.786,598,2.786,601,4.952,708,2.96,710,2.681,967,5.088,968,8.01,969,7.286,970,5.732,971,4.452,972,7.286,973,5.732,974,3.162,975,3.162,976,5.732]],["title/entities/DepartmentPerRecopilation.html",[458,1.712,971,2.329]],["body/entities/DepartmentPerRecopilation.html",[0,0.244,3,0.085,4,0.077,5,0.06,7,0.163,8,0.008,10,1.373,16,0.085,18,0.005,19,0.005,73,3.129,98,0.445,117,0.278,123,1.123,125,0.544,245,1.663,382,3.032,401,1.171,458,1.84,459,2.583,462,1.171,464,3.958,469,4.137,472,4.305,473,5.165,474,4.76,476,4.453,477,3.092,478,3.571,482,4.069,573,4.843,574,3.092,592,4.899,599,4.439,601,4.122,708,4.302,710,3.344,971,3.338,974,4.596,977,4.439,978,6.667,979,5.002,980,5.002,981,6.667,982,5.002,983,6.667,984,5.002,985,4.069,986,5.002]],["title/classes/DepartmentToBeRecommended.html",[0,0.227,621,3.322]],["body/classes/DepartmentToBeRecommended.html",[0,0.423,2,1.102,3,0.097,4,0.087,5,0.068,7,0.148,8,0.008,16,0.136,18,0.006,19,0.006,98,0.483,103,2.497,117,0.317,123,1.018,125,0.493,269,4.403,303,1.959,401,1.476,462,1.273,546,2.765,607,6.001,608,6.052,609,4.314,610,2.765,612,4.683,613,5.154,614,3.685,615,3.757,616,5.406,617,1.444,618,3.253,619,3.674,620,4.683,621,6.001,622,2.687,623,4.257,987,4.314,988,4.628,989,5.689,990,5.689]],["title/controllers/DepartmentsController.html",[111,1.303,991,3.527]],["body/controllers/DepartmentsController.html",[0,0.215,3,0.075,4,0.068,5,0.053,7,0.176,8,0.008,16,0.075,18,0.005,19,0.005,52,0.773,94,1.075,97,1.681,98,0.422,111,1.233,113,1.336,115,1.917,117,0.245,118,1.492,119,2.265,123,0.986,125,0.478,127,1.681,128,1.209,129,1.527,130,1.681,131,1.818,141,1.917,142,1.209,150,2.204,151,1.422,157,1.209,186,2.135,187,2.583,245,1.557,287,2.303,288,1.618,289,2.4,290,2.4,303,2.105,313,1.968,315,3.66,321,1.364,322,1.422,323,1.968,324,1.968,325,1.968,326,1.917,327,2.079,328,1.422,329,1.483,330,1.422,331,2.06,332,1.483,339,2.221,340,1.364,341,2.131,342,1.968,343,1.645,344,2.016,345,1.968,346,1.933,347,1.974,371,4.634,372,2.981,485,2.705,486,2.354,492,1.696,494,1.736,495,3.156,511,2.428,622,2.886,991,4.634,992,3.907,993,7.021,994,4.402,995,4.402,996,4.402,997,4.402,998,4.755,999,3.907,1000,2.721,1001,3.907,1002,3.907,1003,4.402,1004,4.402,1005,4.402,1006,4.402]],["title/controllers/DepartmentsPerRecopilationsController.html",[111,1.303,1007,3.527]],["body/controllers/DepartmentsPerRecopilationsController.html",[0,0.167,3,0.058,4,0.053,5,0.041,7,0.176,8,0.008,16,0.058,18,0.004,19,0.004,52,0.602,73,3.126,77,4.892,94,0.837,97,1.618,98,0.422,111,0.96,113,1.04,115,1.492,117,0.191,118,1.246,119,2.434,123,1.015,125,0.492,127,1.73,128,1.244,129,1.571,130,1.73,131,2.01,133,3.054,141,1.492,142,0.941,151,1.107,157,1.401,171,1.233,173,1.131,187,2.244,245,1.788,279,1.666,287,2.051,288,1.441,289,2.138,290,2.138,296,1.666,312,1.716,313,1.532,314,1.828,315,3.319,318,1.261,320,1.384,321,1.062,322,1.107,323,2.282,324,1.532,325,1.532,326,1.492,327,1.618,328,1.107,329,1.155,330,1.107,331,1.72,332,1.155,333,1.574,334,1.666,335,1.532,336,1.666,339,1.929,340,1.062,341,1.852,342,1.532,343,1.374,344,1.684,345,1.532,346,1.615,347,1.649,360,1.959,392,2.1,401,1.447,485,2.349,486,1.966,487,2.166,488,2.726,492,1.32,494,1.352,495,2.636,497,1.574,498,2.918,500,1.618,503,3.031,511,1.891,515,2.119,622,2.88,707,5.603,708,3.912,710,1.878,1001,3.042,1002,3.042,1007,3.87,1008,2.788,1009,4.178,1010,3.427,1011,5.413,1012,3.427,1013,3.427,1014,3.427,1015,3.427,1016,5.998,1017,4.825,1018,3.427,1019,4.131,1020,2.321,1021,3.156,1022,4.53,1023,3.427,1024,3.427,1025,3.427,1026,3.427,1027,3.427]],["title/modules/DepartmentsPerRecopilationsModule.html",[20,1.412,35,3.322]],["body/modules/DepartmentsPerRecopilationsModule.html",[0,0.28,3,0.098,4,0.088,5,0.069,7,0.185,8,0.008,16,0.098,18,0.006,19,0.006,20,2.434,22,2.439,23,2.439,24,2.569,25,2.569,26,2.439,27,3.585,28,2.569,35,6.354,47,3.262,48,2.569,49,2.569,51,2.639,52,1.009,53,2.714,54,1.675,73,2.998,77,3.711,113,2.215,382,2.459,383,2.793,388,3.17,622,3.446,708,2.968,710,2.685,971,3.654,975,3.17,1007,6.08,1019,6.027,1020,3.892,1028,5.101,1029,5.101,1030,5.101,1031,4.675,1032,3.553,1033,5.101]],["title/injectables/DepartmentsPerRecopilationsService.html",[188,1.158,1019,3.151]],["body/injectables/DepartmentsPerRecopilationsService.html",[0,0.139,3,0.049,4,0.044,5,0.034,7,0.171,8,0.008,10,0.782,16,0.049,18,0.003,19,0.003,52,0.5,54,0.83,73,3.021,77,4.751,94,1.987,97,1.471,98,0.409,103,0.981,117,0.159,118,1.082,119,2.351,125,0.48,127,1.688,128,1.213,129,1.533,130,1.594,131,0.847,151,1.758,157,2.27,162,1.384,163,1.426,171,1.958,173,1.462,182,3.929,188,1.104,231,1.151,234,3.308,238,1.209,245,1.898,287,1.346,288,0.946,289,1.402,290,1.402,303,2.292,318,1.048,320,1.151,321,0.883,322,0.92,328,0.92,329,0.96,330,0.92,331,1.494,332,0.96,339,0.901,340,0.883,341,0.865,343,1.193,344,1.462,346,1.402,347,1.432,382,2.786,396,3.515,401,1.372,414,1.308,415,1.308,416,1.273,419,1.628,426,3.237,427,1.345,428,1.345,429,1.345,430,1.345,478,2.034,485,2.097,486,1.708,487,1.882,488,2.433,492,1.097,494,1.748,497,2.036,500,1.345,542,3.606,543,2.317,622,2.093,623,2.364,707,5.254,708,3.799,710,3.083,712,3.606,971,1.426,975,1.571,1009,1.761,1016,5.451,1017,4.386,1019,3.002,1021,2.741,1022,3.935,1032,1.761,1033,2.528,1034,2.317,1035,5.443,1036,2.848,1037,4.428,1038,2.848,1039,3.935,1040,2.848,1041,2.848,1042,2.848,1043,2.848,1044,2.848,1045,2.848,1046,2.317,1047,2.159,1048,1.929,1049,2.848,1050,6.142,1051,3.165,1052,2.848,1053,4.433,1054,2.848,1055,2.848,1056,2.848,1057,2.848,1058,2.848,1059,2.848,1060,2.528,1061,2.848,1062,2.848,1063,3.935,1064,2.848,1065,2.848,1066,2.848,1067,4.433,1068,2.848,1069,2.848,1070,4.657,1071,2.528,1072,2.528,1073,2.528,1074,2.848]],["title/injectables/DepartmentsService.html",[188,1.158,998,3.151]],["body/injectables/DepartmentsService.html",[0,0.194,3,0.068,4,0.061,5,0.048,7,0.177,8,0.008,10,1.094,16,0.068,18,0.004,19,0.004,52,0.7,54,1.162,73,1.962,94,1.772,97,1.738,98,0.458,117,0.222,118,1.391,119,2.351,125,0.494,127,1.738,128,1.25,129,1.578,130,1.593,131,1.979,151,1.841,157,1.826,171,2.05,173,1.88,188,1.419,231,1.61,234,3.404,238,1.692,242,3.68,244,4.636,245,1.702,246,4.069,247,2.366,256,3.022,257,3.022,258,2.846,259,3.022,260,2.846,261,3.022,262,3.022,263,3.022,264,2.699,287,1.73,288,1.216,289,1.803,290,1.803,303,1.962,321,1.235,322,1.287,328,1.287,329,1.343,330,1.287,331,1.92,332,1.343,339,1.803,340,1.235,341,2.019,343,1.534,344,1.88,346,1.803,347,1.841,382,1.343,401,1.403,414,1.83,415,1.83,416,1.782,426,1.83,427,1.882,428,1.882,429,1.882,430,1.882,485,2.562,486,2.195,492,1.535,494,2.247,622,3.141,710,2.671,971,1.995,974,2.199,975,2.199,998,3.859,1000,2.464,1039,5.904,1047,3.022,1048,2.699,1060,3.537,1070,3.022,1075,3.537,1076,5.699,1077,3.985,1078,3.985,1079,4.636,1080,5.699,1081,3.985,1082,3.985,1083,3.985,1084,3.242,1085,3.985,1086,3.985,1087,3.985,1088,5.699,1089,3.537]],["title/classes/Document.html",[0,0.227,1090,2.876]],["body/classes/Document.html",[0,0.315,2,1.252,3,0.11,4,0.099,5,0.078,7,0.173,8,0.008,9,4.379,10,1.775,16,0.11,17,3.053,18,0.006,19,0.006,98,0.437,117,0.36,123,0.908,125,0.44,186,2.032,462,1.379,579,3.567,580,4.489,600,4.332,726,6.038,737,4.175,742,4.175,1090,4.854,1091,5.738,1092,6.465,1093,4.055,1094,5.26,1095,6.465]],["title/controllers/DocumentsController.html",[111,1.303,1096,3.527]],["body/controllers/DocumentsController.html",[0,0.229,3,0.08,4,0.072,5,0.056,7,0.179,8,0.008,16,0.08,18,0.005,19,0.005,52,0.824,94,1.146,97,1.529,98,0.404,111,1.314,113,1.424,115,2.043,117,0.261,118,1.559,119,1.993,123,0.897,125,0.435,127,1.529,128,1.099,129,1.389,130,1.529,131,1.396,141,2.043,142,1.288,150,2.349,151,1.516,157,1.288,186,1.879,187,2.671,245,1.609,287,2.366,288,1.662,289,2.465,290,2.465,313,2.098,315,3.744,321,1.454,322,1.516,323,2.098,324,2.098,325,2.098,326,2.043,327,2.216,328,1.516,329,1.581,330,1.516,331,2.152,332,1.581,339,2.297,340,1.454,341,2.204,342,2.098,343,1.719,344,2.107,345,2.098,346,2.02,347,2.063,485,2.797,486,2.46,492,1.807,494,1.851,495,3.298,511,2.589,1096,4.842,1097,4.165,1098,5.668,1099,4.692,1100,4.692,1101,4.917,1102,4.165,1103,2.28,1104,4.692,1105,4.692,1106,4.692,1107,4.692,1108,4.692]],["title/injectables/DocumentsService.html",[188,1.158,1101,3.151]],["body/injectables/DocumentsService.html",[0,0.229,3,0.08,4,0.072,5,0.056,7,0.181,8,0.008,10,1.288,16,0.08,18,0.005,19,0.005,52,0.824,54,1.368,94,1.559,97,1.529,98,0.434,117,0.261,118,1.559,119,2.309,125,0.494,127,1.739,128,1.25,129,1.579,130,1.529,131,1.9,151,1.516,157,1.754,171,1.688,173,2.107,188,1.59,231,1.895,234,3.226,238,1.992,245,1.416,287,1.939,288,1.362,289,2.02,290,2.02,321,1.454,322,1.516,328,1.516,329,1.581,330,1.516,331,2.152,332,1.581,339,2.02,340,1.454,341,2.204,343,1.719,344,2.107,346,2.02,347,2.063,401,1.275,414,2.155,415,2.155,416,2.098,426,2.933,427,2.216,428,2.216,429,2.216,430,2.216,485,2.797,486,2.46,492,1.807,494,2.519,1090,4.488,1098,5.668,1101,4.325,1103,2.28,1109,4.165,1110,4.692,1111,4.692,1112,6.386,1113,4.692,1114,4.692,1115,3.817,1116,4.165,1117,4.692,1118,4.325,1119,4.692]],["title/entities/Evidence.html",[458,1.712,1093,2.402]],["body/entities/Evidence.html",[0,0.227,3,0.079,4,0.071,5,0.056,7,0.148,8,0.008,10,1.278,16,0.079,18,0.005,19,0.005,98,0.517,103,2.187,105,4.077,117,0.259,123,1.178,125,0.571,128,0.801,186,2.01,245,1.603,401,1.115,458,1.712,459,2.403,462,1.115,464,2.763,469,3.988,472,4.101,473,4.101,476,3.771,576,3.504,579,3.988,580,4.44,581,5.19,586,3.382,596,2.33,597,2.262,598,2.262,600,4.485,627,4.292,724,3.733,737,5.418,742,3.005,876,3.771,1093,3.279,1118,5.506,1120,4.131,1121,4.896,1122,6.351,1123,4.654,1124,3.786,1125,5.166,1126,5.166,1127,4.654,1128,4.654,1129,4.654,1130,4.654,1131,4.077,1132,4.654,1133,5.166,1134,5.637,1135,4.654,1136,4.131]],["title/controllers/EvidencesController.html",[111,1.303,1137,3.527]],["body/controllers/EvidencesController.html",[0,0.132,3,0.046,4,0.041,5,0.033,7,0.175,8,0.008,16,0.046,18,0.003,19,0.003,52,0.475,58,3.757,59,1.745,60,1.83,94,1.761,97,1.429,98,0.493,105,1.313,110,3.776,111,0.757,113,0.82,115,1.177,117,0.15,118,1.039,119,2.326,123,0.912,125,0.442,127,1.555,128,1.242,129,1.412,130,1.555,131,1.776,132,2.197,133,2.635,134,1.491,136,1.353,141,1.177,142,0.742,151,0.873,157,1.782,163,1.353,171,1.531,173,0.892,186,2.265,187,2.537,191,1.745,245,1.657,266,2.197,279,1.313,287,1.812,288,1.273,289,1.888,290,1.888,296,1.313,312,1.353,313,1.208,314,1.441,315,2.981,318,0.994,320,1.092,321,0.837,322,0.873,323,1.902,324,1.208,325,1.208,326,1.177,327,1.276,328,0.873,329,0.911,330,0.873,331,1.434,332,0.911,333,1.241,334,1.313,335,1.208,336,1.313,339,1.665,340,0.837,341,1.597,342,1.208,343,1.145,344,1.404,345,1.208,346,1.346,347,1.374,349,2.197,350,1.83,355,1.545,360,1.545,364,1.545,392,1.812,401,0.475,462,0.747,485,2.027,486,1.639,487,1.806,488,2.352,492,1.041,494,1.066,495,2.197,497,1.241,498,1.545,500,1.276,503,1.605,511,1.491,515,1.671,627,2.526,720,4.46,723,2.049,724,2.197,725,3.038,726,5.337,779,3.776,903,1.83,1093,2.197,1103,2.901,1137,3.226,1138,2.399,1139,2.703,1140,6.895,1141,2.703,1142,4.255,1143,2.703,1144,2.703,1145,2.703,1146,2.703,1147,4.827,1148,2.703,1149,2.703,1150,5.262,1151,5.262,1152,2.703,1153,3.564,1154,2.399,1155,3.038,1156,5.262,1157,2.703,1158,2.703,1159,2.399,1160,5.262,1161,2.399,1162,4.281,1163,4.281,1164,2.199,1165,2.703,1166,2.703,1167,2.703,1168,2.703,1169,2.703,1170,4.255,1171,4.255,1172,4.255,1173,3.776,1174,4.255,1175,4.255,1176,4.255,1177,4.255,1178,4.255,1179,3.461,1180,4.255,1181,4.255,1182,2.703,1183,4.255,1184,3.776,1185,2.703,1186,2.703,1187,2.703,1188,2.703,1189,3.776,1190,2.703,1191,2.703]],["title/modules/EvidencesModule.html",[20,1.412,36,3.322]],["body/modules/EvidencesModule.html",[0,0.221,3,0.077,4,0.07,5,0.055,7,0.192,8,0.008,11,2.716,16,0.077,18,0.005,19,0.005,20,2.165,22,1.924,23,1.924,24,2.027,25,2.027,26,1.924,27,3.188,28,2.027,36,6.637,47,2.788,48,2.027,49,2.027,51,2.082,52,0.796,53,2.141,54,1.322,113,1.894,214,2.927,388,2.501,586,2.716,597,2.203,598,2.203,762,2.082,1090,3.856,1093,3.221,1096,5.407,1101,5.637,1102,4.024,1115,3.688,1137,5.407,1153,5.637,1154,4.024,1192,4.024,1193,4.024,1194,5.637,1195,5.637,1196,4.592,1197,4.439,1198,4.533,1199,5.407,1200,5.407,1201,4.533,1202,4.024,1203,3.856,1204,3.688,1205,3.856,1206,3.688,1207,4.533,1208,4.533,1209,4.024,1210,4.533,1211,4.024,1212,3.07,1213,3.441,1214,3.688,1215,3.07]],["title/injectables/EvidencesService.html",[188,1.158,1153,3.151]],["body/injectables/EvidencesService.html",[0,0.116,3,0.041,4,0.037,5,0.029,7,0.175,8,0.008,10,0.654,16,0.041,18,0.003,19,0.003,52,0.418,54,0.694,94,1.927,97,1.561,98,0.458,117,0.132,118,0.939,119,2.262,125,0.444,127,1.561,128,1.122,129,1.418,130,1.46,131,0.708,151,1.969,157,2.025,162,2.351,163,2.422,171,2.468,173,1.268,182,3.687,187,0.876,188,0.957,231,0.962,234,3.448,238,1.01,245,1.635,266,3.808,287,1.167,288,0.82,289,1.216,290,1.216,303,1.666,318,0.876,320,0.962,321,0.738,322,0.769,328,0.769,329,0.802,330,0.769,331,1.296,332,0.802,339,1.216,340,0.738,341,1.468,343,1.035,344,1.268,346,1.216,347,1.242,353,1.516,382,1.296,392,1.324,401,1.295,413,1.805,414,1.093,415,1.093,416,1.064,426,2.551,427,1.124,428,1.124,429,1.124,430,1.124,433,1.7,485,1.863,486,1.481,487,1.632,488,2.162,492,0.917,494,1.516,497,1.766,500,1.124,546,2.351,586,1.037,597,1.157,598,1.157,623,2.58,627,1.413,710,1.415,720,4.559,723,3.668,724,1.986,737,1.537,742,1.537,762,1.093,778,3.454,787,1.537,827,1.805,828,4.518,830,3.935,881,3.454,1090,1.472,1093,3.366,1103,2.351,1115,1.936,1116,2.113,1118,4.836,1147,4.611,1153,2.604,1155,2.745,1179,3.128,1196,3.785,1197,3.659,1202,2.113,1203,1.472,1204,1.936,1205,1.472,1206,1.936,1212,1.612,1215,1.612,1216,2.113,1217,2.38,1218,4.837,1219,4.837,1220,4.293,1221,4.293,1222,2.38,1223,3.845,1224,3.128,1225,2.38,1226,2.38,1227,2.38,1228,2.38,1229,2.38,1230,1.936,1231,2.38,1232,2.113,1233,2.113,1234,1.612,1235,2.38,1236,2.38,1237,3.845,1238,2.113,1239,2.113,1240,3.845,1241,3.845,1242,3.128,1243,4.959,1244,3.845,1245,2.38,1246,3.413,1247,3.128,1248,3.845,1249,2.38,1250,6.519,1251,3.935,1252,4.293,1253,4.837,1254,3.935,1255,4.929,1256,4.837,1257,4.293,1258,5.554,1259,4.837,1260,3.935,1261,5.554,1262,3.935,1263,2.38,1264,3.413,1265,2.38,1266,2.38,1267,2.38,1268,2.38,1269,2.38,1270,2.113,1271,2.113,1272,2.38,1273,2.38,1274,4.837,1275,2.38,1276,2.38,1277,3.845,1278,2.38,1279,2.38,1280,2.38,1281,3.845,1282,2.38,1283,2.38,1284,2.38,1285,2.38,1286,2.113,1287,1.936,1288,2.38,1289,2.38,1290,2.113,1291,2.113,1292,2.38,1293,2.38,1294,2.38]],["title/interfaces/Filter.html",[1295,3.322,1296,3.322]],["body/interfaces/Filter.html",[3,0.108,4,0.098,5,0.076,7,0.13,8,0.007,16,0.108,18,0.006,19,0.006,98,0.487,117,0.354,186,2.362,462,1.365,1295,4.539,1296,5.549,1297,5.171,1298,5.642,1299,8.279,1300,8.744,1301,8.279,1302,6.243,1303,6.357]],["title/classes/FiltersSegmentDto.html",[0,0.227,290,1.472]],["body/classes/FiltersSegmentDto.html",[0,0.384,2,1.072,3,0.134,4,0.085,5,0.067,7,0.176,8,0.008,16,0.094,18,0.006,19,0.006,97,1.326,98,0.397,100,4.915,103,1.907,105,3.463,117,0.308,123,0.778,125,0.377,142,1.52,186,1.845,187,2.037,290,2.254,328,2.302,346,2.632,462,1.251,617,1.406,618,3.166,704,2.95,724,4.069,764,4.872,1296,5.627,1304,4.915,1305,5.537,1306,7.126,1307,7.126,1308,6.325,1309,7.88,1310,5.537,1311,7.126,1312,5.537,1313,5.537,1314,7.126,1315,4.505,1316,5.537,1317,6.994,1318,5.537,1319,3.68,1320,5.537,1321,5.537,1322,4.915,1323,7.126,1324,5.537]],["title/classes/FindOneParams.html",[0,0.227,1325,3.527]],["body/classes/FindOneParams.html",[0,0.392,2,1.3,3,0.114,4,0.103,5,0.081,7,0.137,8,0.007,16,0.114,18,0.006,19,0.006,98,0.374,117,0.374,123,0.943,125,0.457,245,1.905,401,1.41,462,1.41,617,1.704,741,7.628,1325,6.09,1326,7.129,1327,6.534,1328,5.461,1329,6.713]],["title/classes/HttpExceptionFilter.html",[0,0.227,1330,3.785]],["body/classes/HttpExceptionFilter.html",[0,0.277,2,1.099,3,0.097,4,0.087,5,0.068,7,0.163,8,0.008,16,0.097,18,0.006,19,0.006,52,0.996,94,2.118,97,1.359,98,0.316,117,0.316,118,1.768,125,0.386,127,1.359,128,0.977,129,1.234,130,1.359,146,5.148,159,4.733,191,3.665,193,4.903,627,3.37,636,3.844,637,6.486,638,5.89,639,6.045,640,6.831,642,4.617,643,5.996,644,3.844,645,3.844,646,3.844,649,4.617,650,4.617,651,4.617,718,5.489,1330,5.89,1331,6.426,1332,8.397,1333,5.675,1334,5.675,1335,7.24,1336,5.675,1337,5.675,1338,5.675,1339,5.675,1340,4.303,1341,5.675,1342,5.675,1343,5.675]],["title/classes/Image.html",[0,0.227,1203,2.876]],["body/classes/Image.html",[0,0.296,2,1.175,3,0.103,4,0.093,5,0.073,7,0.168,8,0.008,9,4.11,10,1.666,16,0.103,17,2.866,18,0.006,19,0.006,98,0.479,103,2.6,117,0.338,123,1.06,125,0.514,129,1.642,186,2.227,462,1.326,579,4.166,580,4.919,581,4.484,600,4.536,725,5.871,726,5.871,737,3.919,742,3.919,1093,3.9,1094,4.937,1203,4.669,1344,5.386,1345,6.069,1346,6.069,1347,6.069]],["title/controllers/ImagesController.html",[111,1.303,1199,3.527]],["body/controllers/ImagesController.html",[0,0.229,3,0.08,4,0.072,5,0.056,7,0.179,8,0.008,16,0.08,18,0.005,19,0.005,52,0.824,94,1.146,97,1.529,98,0.404,111,1.314,113,1.424,115,2.043,117,0.261,118,1.559,119,1.993,123,0.897,125,0.435,127,1.529,128,1.099,129,1.389,130,1.529,131,1.396,141,2.043,142,1.288,150,2.349,151,1.516,157,1.288,186,1.879,187,2.671,245,1.609,287,2.366,288,1.662,289,2.465,290,2.465,313,2.098,315,3.744,321,1.454,322,1.516,323,2.098,324,2.098,325,2.098,326,2.043,327,2.216,328,1.516,329,1.581,330,1.516,331,2.152,332,1.581,339,2.297,340,1.454,341,2.204,342,2.098,343,1.719,344,2.107,345,2.098,346,2.02,347,2.063,485,2.797,486,2.46,492,1.807,494,1.851,495,3.298,511,2.589,1103,2.28,1194,4.917,1199,4.842,1209,4.165,1348,4.165,1349,5.668,1350,4.692,1351,4.692,1352,4.692,1353,4.692,1354,4.692,1355,4.692,1356,4.692]],["title/injectables/ImagesService.html",[188,1.158,1194,3.151]],["body/injectables/ImagesService.html",[0,0.229,3,0.08,4,0.072,5,0.056,7,0.181,8,0.008,10,1.288,16,0.08,18,0.005,19,0.005,52,0.824,54,1.368,94,1.559,97,1.529,98,0.434,117,0.261,118,1.559,119,2.309,125,0.494,127,1.739,128,1.25,129,1.579,130,1.529,131,1.9,151,1.516,157,1.754,171,1.688,173,2.107,188,1.59,231,1.895,234,3.226,238,1.992,245,1.416,287,1.939,288,1.362,289,2.02,290,2.02,321,1.454,322,1.516,328,1.516,329,1.581,330,1.516,331,2.152,332,1.581,339,2.02,340,1.454,341,2.204,343,1.719,344,2.107,346,2.02,347,2.063,401,1.275,414,2.155,415,2.155,416,2.098,426,2.933,427,2.216,428,2.216,429,2.216,430,2.216,485,2.797,486,2.46,492,1.807,494,2.519,1103,2.28,1118,4.325,1194,4.325,1203,4.488,1204,3.817,1232,4.165,1349,5.668,1357,4.165,1358,4.692,1359,4.692,1360,6.386,1361,4.692,1362,4.692,1363,4.692,1364,4.692]],["title/entities/Indicator.html",[380,1.835,458,1.712]],["body/entities/Indicator.html",[0,0.223,3,0.078,4,0.07,5,0.055,7,0.158,8,0.008,10,1.257,16,0.078,18,0.005,19,0.005,73,2.163,98,0.497,103,2.163,105,4.058,117,0.429,123,1.201,125,0.582,128,1.234,186,2.161,269,3.955,353,3.293,380,2.477,401,1.103,437,3.955,444,3.589,458,1.685,459,2.364,462,1.103,463,3.456,477,3.883,479,3.725,480,3.101,524,4.256,526,2.831,527,2.831,574,4.432,579,3.955,580,3.591,581,4.957,589,6.275,590,5.508,600,4.256,601,4.769,688,4.629,757,2.719,1365,4.064,1366,6.363,1367,7.714,1368,4.579,1369,6.281,1370,4.579,1371,6.281,1372,4.579,1373,4.579,1374,7.169,1375,4.579,1376,4.579,1377,6.281,1378,6.281,1379,4.579,1380,4.579]],["title/entities/IndicatorPerRecopilation.html",[458,1.712,524,2.567]],["body/entities/IndicatorPerRecopilation.html",[0,0.257,3,0.09,4,0.081,5,0.063,7,0.157,8,0.008,10,1.446,16,0.09,18,0.005,19,0.005,73,3.095,98,0.428,117,0.293,123,1.08,125,0.524,245,1.706,380,3.617,382,3.063,401,1.211,458,1.938,459,2.72,462,1.211,464,4.096,469,4.244,472,5.272,473,5.804,474,5.829,476,4.568,477,3.257,478,3.761,482,4.286,524,3.806,526,5.047,595,3.994,757,4.847,1381,4.676,1382,5.268,1383,6.9,1384,5.268,1385,6.124,1386,5.268,1387,5.268]],["title/classes/IndicatorToRelate.html",[0,0.227,888,3.322]],["body/classes/IndicatorToRelate.html",[0,0.42,2,1.077,3,0.095,4,0.085,5,0.067,7,0.146,8,0.008,16,0.135,18,0.006,19,0.006,98,0.48,103,2.462,117,0.31,123,1.004,125,0.487,303,1.916,401,1.514,403,5.64,444,3.954,462,1.255,525,4.051,545,3.973,546,2.704,610,2.704,612,5.101,613,5.101,614,3.809,615,3.854,616,5.349,617,1.412,618,3.181,620,4.616,711,3.181,883,5.952,884,5.989,887,3.593,888,5.952,987,4.219,988,4.527,1388,5.564,1389,5.564]],["title/controllers/IndicatorsController.html",[111,1.303,1390,3.527]],["body/controllers/IndicatorsController.html",[0,0.157,3,0.055,4,0.049,5,0.039,7,0.174,8,0.008,16,0.055,18,0.004,19,0.004,52,0.565,94,1.807,97,1.684,98,0.428,111,0.902,113,0.977,115,1.402,117,0.327,118,1.189,119,2.457,123,1.039,125,0.504,127,1.772,128,1.274,129,1.609,130,1.772,131,2.092,132,2.515,133,2.438,134,1.776,136,1.612,141,1.402,142,0.884,150,1.612,151,1.04,157,1.931,186,2.201,187,2.588,245,1.64,279,1.564,287,1.988,288,1.639,289,2.431,290,2.072,296,1.564,303,2.022,312,1.612,313,1.439,314,1.717,315,3.529,318,1.184,320,1.3,321,0.997,322,1.04,323,2.177,324,1.439,325,1.439,326,1.402,327,1.52,328,1.04,329,1.085,330,1.04,331,1.641,332,1.085,333,1.478,334,1.564,335,1.439,336,1.564,339,1.858,340,0.997,341,1.783,342,1.439,343,1.763,344,2.16,345,2.177,346,1.54,347,1.573,349,2.515,351,3.961,355,1.84,359,3.961,360,1.84,362,2.619,363,2.619,364,1.84,371,3.692,372,2.18,380,2.583,525,3.596,747,4.676,899,2.079,1390,3.692,1391,2.857,1392,4.322,1393,4.322,1394,5.213,1395,4.869,1396,5.873,1397,5.213,1398,3.219,1399,3.219,1400,4.869,1401,3.219,1402,2.857,1403,3.219,1404,2.857,1405,3.219,1406,3.219,1407,3.219,1408,3.219,1409,3.219,1410,3.219,1411,5.812,1412,4.676,1413,3.219,1414,3.978,1415,2.857,1416,4.322,1417,2.857,1418,2.857,1419,3.219,1420,3.219,1421,3.219,1422,3.219,1423,4.869,1424,3.219,1425,3.219,1426,3.219,1427,3.219,1428,3.219]],["title/modules/IndicatorsModule.html",[20,1.412,37,3.322]],["body/modules/IndicatorsModule.html",[0,0.298,3,0.104,4,0.094,5,0.074,7,0.181,8,0.007,16,0.104,18,0.006,19,0.006,20,2.505,22,2.597,23,2.597,24,2.735,25,2.735,26,2.597,27,3.689,28,3.393,37,6.455,47,3.393,48,2.735,49,2.735,51,2.81,52,1.074,53,3.584,54,1.783,113,2.304,380,2.413,1390,6.256,1414,6.123,1415,5.43,1429,5.43,1430,5.43,1431,6.118,1432,6.118,1433,5.43,1434,6.118]],["title/controllers/IndicatorsPerRecopilationsController.html",[111,1.303,1435,3.527]],["body/controllers/IndicatorsPerRecopilationsController.html",[0,0.183,3,0.064,4,0.058,5,0.045,7,0.172,8,0.008,16,0.064,18,0.004,19,0.004,52,0.658,73,3.15,74,5.586,94,0.915,97,1.69,98,0.417,111,1.05,113,1.138,115,1.633,117,0.209,118,1.331,119,2.47,123,1.053,125,0.51,127,1.795,128,1.291,129,1.63,130,1.795,131,2.099,132,3.318,133,3.217,141,1.633,142,1.029,151,1.211,157,1.497,171,1.349,173,1.237,245,1.79,279,1.822,287,2.142,296,1.822,312,1.877,313,1.676,314,1.999,315,1.722,318,1.379,320,1.514,321,1.162,322,1.211,323,2.438,324,1.676,325,1.676,326,1.633,327,1.77,333,1.722,334,1.822,335,1.676,336,1.822,339,2.033,340,1.162,341,1.951,342,1.676,347,1.761,360,2.143,380,2.15,392,2.213,401,1.481,485,2.1,486,2.1,487,2.314,488,2.873,492,1.444,494,1.479,495,2.816,497,1.722,498,3.117,500,1.77,503,3.238,511,2.068,515,2.318,525,2.65,563,3.893,756,4.779,757,4.645,1008,3.05,1009,3.973,1020,2.539,1021,3.371,1417,3.328,1418,3.328,1435,4.134,1436,3.328,1437,3.749,1438,5.704,1439,3.749,1440,3.749,1441,3.749,1442,6.263,1443,5.038,1444,3.749,1445,4.352,1446,3.749,1447,3.749,1448,3.749,1449,3.749,1450,3.749,1451,3.749]],["title/modules/IndicatorsPerRecopilationsModule.html",[20,1.412,38,3.322]],["body/modules/IndicatorsPerRecopilationsModule.html",[0,0.28,3,0.098,4,0.088,5,0.069,7,0.185,8,0.008,16,0.098,18,0.006,19,0.006,20,2.434,22,2.439,23,2.439,24,2.569,25,2.569,26,2.439,27,3.585,28,2.569,38,6.354,47,3.262,48,2.569,49,2.569,51,2.639,52,1.009,53,2.714,54,1.675,73,2.998,74,4.103,113,2.215,380,2.878,381,3.553,382,2.459,383,2.793,388,3.17,524,4.026,525,3.547,527,3.553,757,3.412,1020,3.892,1030,5.101,1031,4.675,1435,6.08,1445,6.027,1452,5.101,1453,5.101,1454,5.101]],["title/injectables/IndicatorsPerRecopilationsService.html",[188,1.158,1445,3.151]],["body/injectables/IndicatorsPerRecopilationsService.html",[0,0.157,3,0.055,4,0.049,5,0.039,7,0.165,8,0.008,10,0.883,16,0.055,18,0.004,19,0.004,52,0.564,54,0.937,73,3.062,74,5.484,94,2.015,97,1.567,98,0.412,117,0.327,118,1.188,119,2.406,125,0.503,127,1.771,128,1.273,129,1.608,130,1.683,151,1.896,157,2.223,171,2.111,173,1.605,182,4.262,188,1.211,231,1.298,234,3.417,238,1.364,245,1.83,287,1.987,299,3.007,303,1.675,318,1.183,320,1.298,321,0.996,322,1.038,339,1.017,340,0.996,341,0.976,347,1.571,380,3.352,381,1.987,382,2.781,383,1.562,392,2.021,395,4.449,396,3.79,401,1.422,418,2.295,419,1.838,421,3.688,426,3.228,427,1.518,428,1.518,485,2.261,486,1.874,487,2.065,488,2.623,492,1.238,494,1.918,497,2.234,500,1.518,524,1.773,527,1.987,540,2.615,542,3.957,543,2.615,563,5.648,756,4.432,757,4.56,1021,3.007,1034,2.615,1051,3.473,1436,2.853,1438,5.209,1442,5.808,1443,4.672,1445,3.294,1454,2.853,1455,3.214,1456,3.214,1457,4.864,1458,3.214,1459,3.214,1460,3.214,1461,3.214,1462,3.214,1463,3.214,1464,6.544,1465,6.544,1466,6.544,1467,3.214,1468,4.864,1469,2.853,1470,2.853,1471,3.214]],["title/injectables/IndicatorsService.html",[188,1.158,1414,3.151]],["body/injectables/IndicatorsService.html",[0,0.142,3,0.05,4,0.045,5,0.035,7,0.167,8,0.008,10,0.8,16,0.05,18,0.004,19,0.004,52,0.512,54,0.849,94,1.999,97,1.777,98,0.427,103,1.901,117,0.456,118,1.102,119,2.418,125,0.505,127,1.777,128,1.32,129,1.613,130,1.704,131,1.342,151,0.941,157,2.037,162,1.416,163,1.459,171,1.048,173,1.489,182,3.959,187,1.072,188,1.123,231,1.177,234,2.574,238,1.237,245,1.378,269,3.046,287,1.37,288,1.178,289,1.747,290,1.427,303,1.901,318,1.072,320,1.177,321,0.903,322,0.941,328,0.941,329,0.982,330,0.941,331,1.521,332,0.982,339,1.427,340,0.903,341,1.676,343,1.674,344,2.051,345,2.468,346,1.427,347,1.457,353,2.452,380,3.023,382,1.861,395,3.421,401,1.459,413,2.209,414,1.338,415,1.338,416,1.303,418,2.081,421,3.421,426,1.338,427,1.376,428,1.376,429,2.131,430,1.376,433,2.081,437,1.607,439,2.37,441,2.586,442,2.081,444,2.259,453,2.586,455,2.37,463,2.286,525,3.022,570,3.222,688,1.882,747,5.079,1366,4.901,1392,4.901,1393,4.005,1394,4.901,1397,4.901,1404,2.586,1411,4.005,1412,5.474,1414,3.056,1416,4.005,1433,2.586,1472,2.586,1473,4.512,1474,5.522,1475,2.914,1476,2.914,1477,2.914,1478,2.914,1479,4.512,1480,2.914,1481,2.914,1482,4.512,1483,2.914,1484,2.914,1485,2.914,1486,2.914,1487,2.914,1488,2.914,1489,2.914,1490,2.914,1491,2.914,1492,2.586,1493,4.512,1494,2.914,1495,2.914,1496,2.586,1497,4.512,1498,2.586,1499,2.586,1500,4.005,1501,2.586,1502,2.586,1503,2.37,1504,2.914,1505,2.586,1506,2.914,1507,2.914,1508,2.914,1509,2.914,1510,2.914,1511,2.914,1512,2.914]],["title/entities/InformationCollection.html",[458,1.712,586,2.026]],["body/entities/InformationCollection.html",[0,0.197,3,0.069,4,0.062,5,0.049,7,0.158,8,0.008,10,1.108,16,0.069,18,0.004,19,0.004,98,0.499,105,4.232,117,0.225,123,1.206,125,0.584,128,1.153,186,1.889,245,1.485,353,3.386,382,2.893,401,1.009,458,1.485,459,2.084,462,1.009,464,3.976,469,3.695,476,4.334,478,2.881,480,2.733,574,2.494,576,3.172,579,3.695,580,4.173,581,5.009,586,2.503,596,4.36,597,4.232,600,4.027,601,3.554,699,3.172,710,3.159,764,4.14,876,4.334,985,3.282,1093,4.142,1103,3.255,1121,4.536,1124,3.282,1125,4.677,1126,4.677,1133,4.677,1513,3.581,1514,5.448,1515,5.749,1516,4.035,1517,4.035,1518,5.749,1519,4.035,1520,5.749,1521,4.035,1522,4.035,1523,5.749,1524,4.035,1525,4.035,1526,5.749,1527,4.035,1528,4.035,1529,4.035,1530,4.035]],["title/controllers/InformationCollectionsController.html",[111,1.303,1531,3.527]],["body/controllers/InformationCollectionsController.html",[0,0.133,3,0.047,4,0.042,5,0.033,7,0.167,8,0.008,16,0.047,18,0.003,19,0.003,52,0.48,63,4.846,94,1.692,97,1.66,98,0.418,111,0.766,113,0.83,115,1.191,117,0.152,118,1.049,119,2.436,123,1.018,125,0.493,127,1.736,128,1.248,129,1.576,130,1.736,131,2.061,132,2.218,133,2.655,134,1.509,136,1.369,141,1.191,142,0.751,151,0.883,157,1.793,171,0.984,173,0.902,184,4.662,187,2.666,245,1.785,279,1.329,287,1.824,288,1.685,289,2.499,290,1.901,296,1.329,303,2.386,312,1.369,313,1.223,314,1.459,315,3.545,318,1.006,320,1.105,321,0.848,322,0.883,323,1.92,324,1.223,325,1.223,326,1.191,327,1.292,328,0.883,329,0.922,330,0.883,331,1.447,332,0.922,333,1.256,334,1.329,335,1.223,336,1.329,339,1.678,340,0.848,341,1.61,342,1.223,343,1.865,344,2.286,345,2.371,346,1.359,347,1.387,349,2.218,350,2.909,355,1.564,360,1.564,364,1.564,372,2.909,392,1.826,401,1.58,485,2.043,486,1.654,487,1.823,488,2.371,492,1.054,494,1.079,495,2.218,497,1.256,498,1.564,503,2.55,511,1.509,515,1.691,546,3.647,586,1.87,596,3.757,623,3.204,760,4.908,762,2.999,899,1.766,903,1.852,1118,2.909,1531,3.256,1532,2.428,1533,4.29,1534,4.707,1535,4.314,1536,2.428,1537,2.735,1538,2.735,1539,2.735,1540,2.428,1541,6.008,1542,4.295,1543,2.735,1544,2.225,1545,4.295,1546,2.735,1547,2.735,1548,2.735,1549,5.359,1550,2.735,1551,3.256,1552,3.592,1553,2.428,1554,3.494,1555,2.735,1556,2.735,1557,2.735,1558,2.735,1559,4.295,1560,2.735,1561,2.735,1562,2.735,1563,4.295,1564,2.735,1565,3.812,1566,2.428,1567,4.295,1568,2.735,1569,2.735]],["title/modules/InformationCollectionsModule.html",[20,1.412,39,3.322]],["body/modules/InformationCollectionsModule.html",[0,0.263,3,0.092,4,0.083,5,0.065,7,0.19,8,0.008,11,3.051,16,0.092,18,0.005,19,0.005,20,2.362,22,2.289,23,2.289,24,2.411,25,2.411,26,2.289,27,3.479,28,2.411,39,6.449,47,3.132,48,2.411,49,2.411,51,2.477,52,0.947,53,2.547,54,1.572,63,3.482,113,2.127,214,3.482,353,2.763,382,2.361,383,2.621,388,2.975,523,3.482,586,3.051,596,2.7,598,2.621,710,2.578,762,3.217,1032,3.334,1197,4.667,1212,3.652,1213,3.865,1214,4.387,1531,5.9,1552,5.926,1553,4.786,1570,4.786,1571,4.786,1572,5.393,1573,5.393,1574,4.786]],["title/injectables/InformationCollectionsService.html",[188,1.158,1552,3.151]],["body/injectables/InformationCollectionsService.html",[0,0.107,3,0.037,4,0.034,5,0.026,7,0.167,8,0.008,10,0.601,16,0.037,18,0.003,19,0.003,52,0.385,54,0.638,63,4.624,94,2.018,97,1.502,98,0.42,103,1.237,117,0.122,118,0.877,119,2.346,125,0.471,127,1.656,128,1.19,129,1.504,130,1.586,131,1.359,157,2.073,171,2.1,173,1.185,182,3.571,187,1.322,188,0.895,231,0.885,234,3.247,238,0.93,245,1.85,266,3.238,287,1.091,288,1.127,289,1.672,290,1.137,303,2.654,318,0.806,320,0.885,321,0.679,322,0.707,328,0.707,329,0.738,330,0.707,331,1.211,332,0.738,339,1.137,340,0.679,341,1.387,343,1.688,344,2.069,346,1.137,347,1.161,353,2.824,382,2.413,383,1.064,392,1.573,396,2.95,399,3.717,401,1.528,414,1.006,415,1.006,416,0.979,417,1.564,419,1.252,426,2.428,427,1.034,428,1.034,429,2.157,430,1.034,485,1.76,486,1.384,487,1.525,488,2.042,492,0.844,494,1.417,497,1.65,500,1.034,523,1.414,546,3.872,548,2.433,572,3.413,586,2.541,596,3.585,598,1.064,623,3.93,699,2.52,710,2.778,723,1.661,760,4.683,762,2.098,778,2.566,787,1.414,1032,1.354,1037,3.717,1048,1.483,1051,1.564,1063,1.944,1072,1.944,1103,2.569,1197,3.532,1212,1.483,1230,1.782,1234,1.483,1251,2.923,1254,1.782,1257,3.189,1260,2.923,1262,2.923,1264,3.189,1503,2.923,1533,1.564,1534,4.055,1535,3.717,1536,1.944,1540,1.944,1544,1.782,1549,4.937,1552,2.433,1554,2.923,1565,4.692,1574,1.944,1575,1.944,1576,1.782,1577,2.19,1578,2.724,1579,2.19,1580,2.19,1581,2.19,1582,2.19,1583,2.19,1584,2.19,1585,2.19,1586,2.19,1587,2.19,1588,2.724,1589,3.593,1590,1.944,1591,2.19,1592,3.593,1593,2.19,1594,2.19,1595,5.836,1596,2.19,1597,2.19,1598,2.19,1599,2.19,1600,2.19,1601,3.593,1602,2.724,1603,3.189,1604,3.593,1605,2.19,1606,2.19,1607,2.19,1608,2.19,1609,2.19,1610,3.593,1611,1.944,1612,3.593,1613,2.19,1614,3.593,1615,2.19,1616,3.593,1617,2.19,1618,2.19,1619,2.19,1620,2.19,1621,2.19,1622,2.19,1623,2.19,1624,2.19,1625,2.19,1626,3.593,1627,2.19,1628,2.19,1629,2.19,1630,2.19]],["title/classes/Link.html",[0,0.227,1205,2.876]],["body/classes/Link.html",[0,0.315,2,1.252,3,0.11,4,0.099,5,0.078,7,0.173,8,0.008,9,4.379,10,1.775,16,0.11,17,3.053,18,0.006,19,0.006,98,0.437,117,0.36,123,0.908,125,0.44,186,2.032,462,1.379,579,3.567,580,4.489,600,4.332,725,6.038,737,4.175,742,4.175,1093,4.055,1094,5.26,1205,4.854,1631,5.738,1632,6.465,1633,6.465]],["title/controllers/LinksController.html",[111,1.303,1200,3.527]],["body/controllers/LinksController.html",[0,0.172,3,0.06,4,0.054,5,0.043,7,0.177,8,0.008,16,0.06,18,0.004,19,0.004,52,0.62,94,1.787,97,1.643,98,0.426,111,0.99,113,1.073,115,1.539,117,0.197,118,1.275,119,2.446,123,1.028,125,0.498,127,1.753,128,1.26,129,1.591,130,1.753,131,2.04,132,2.696,133,2.614,134,1.949,136,1.769,141,1.539,142,0.97,150,1.769,151,1.141,157,2.01,186,2.15,187,2.285,245,1.804,279,1.717,287,2.082,288,1.463,289,2.17,290,2.17,296,1.717,312,1.769,313,1.58,314,1.885,315,3.361,318,1.3,320,1.427,321,1.095,322,1.141,323,2.334,324,1.58,325,1.58,326,1.539,327,1.669,328,1.141,329,1.191,330,1.141,331,1.76,332,1.191,333,1.623,334,1.717,335,1.58,336,1.717,339,1.964,340,1.095,341,1.885,342,1.58,343,1.406,344,1.722,345,1.58,346,1.652,347,1.687,349,2.696,350,2.393,355,2.02,360,2.02,364,2.02,392,1.798,485,2.392,486,2.011,487,2.216,488,2.776,492,1.361,494,1.394,495,2.696,497,1.623,498,2.02,500,1.669,503,3.1,511,1.949,515,2.185,720,4.736,899,2.282,903,2.393,1093,2.696,1103,1.717,1147,5.254,1155,3.728,1184,4.634,1189,4.634,1195,4.206,1200,3.959,1211,3.136,1224,2.875,1634,3.136,1635,5.512,1636,3.534,1637,3.534,1638,3.534,1639,3.534,1640,3.534,1641,3.534,1642,3.534,1643,3.534,1644,3.534,1645,2.523,1646,3.534,1647,3.534,1648,3.534]],["title/injectables/LinksService.html",[188,1.158,1195,3.151]],["body/injectables/LinksService.html",[0,0.178,3,0.062,4,0.056,5,0.044,7,0.178,8,0.008,10,1.001,16,0.062,18,0.004,19,0.004,52,0.64,54,1.063,94,1.544,97,1.668,98,0.445,117,0.203,118,1.305,119,2.459,125,0.527,127,1.855,128,1.334,129,1.685,130,1.776,131,1.085,151,1.726,157,1.912,162,1.772,163,1.826,171,1.923,173,1.763,182,4.239,188,1.33,231,1.473,234,3.314,238,1.548,245,1.775,287,1.622,288,1.14,289,1.691,290,1.691,318,1.342,320,1.473,321,1.13,322,1.178,328,1.178,329,1.229,330,1.178,331,1.801,332,1.229,339,1.691,340,1.13,341,1.92,343,1.439,344,1.763,346,1.691,347,1.726,392,1.84,401,1.471,413,2.765,414,1.675,415,1.675,416,1.63,426,2.454,427,1.722,428,1.722,429,1.722,430,1.722,433,2.604,485,2.436,486,2.059,487,2.268,488,2.828,492,1.405,494,2.108,497,2.454,500,1.722,586,1.588,597,1.772,598,1.772,720,4.79,762,1.675,1093,1.883,1103,1.772,1118,4.284,1147,5.301,1155,3.816,1195,3.619,1205,2.255,1206,2.967,1220,4.743,1221,5.614,1224,4.347,1233,3.237,1234,2.47,1238,3.237,1239,3.237,1270,3.237,1271,3.237,1635,4.743,1649,3.237,1650,3.647,1651,3.647,1652,3.647,1653,3.647,1654,3.647,1655,3.647,1656,3.647,1657,3.647,1658,3.647,1659,6.325,1660,3.647,1661,3.647,1662,3.647,1663,3.647]],["title/classes/LoginAuthDto.html",[0,0.227,122,3.322]],["body/classes/LoginAuthDto.html",[0,0.381,2,1.241,3,0.109,4,0.098,5,0.077,7,0.131,8,0.007,16,0.109,18,0.006,19,0.006,98,0.435,117,0.357,122,5.577,123,1.097,125,0.532,186,2.27,242,5.44,247,5.002,462,1.372,614,3.576,617,1.627,678,3.155,860,6.933,1664,7.478,1665,5.69,1666,6.411,1667,6.411,1668,6.411,1669,6.411]],["title/modules/MailsModule.html",[20,1.412,40,3.151]],["body/modules/MailsModule.html",[0,0.28,3,0.098,4,0.088,5,0.069,7,0.172,8,0.008,11,2.502,16,0.098,18,0.006,19,0.006,20,2.434,22,2.439,23,2.439,24,2.569,25,2.569,26,2.439,27,3.585,28,2.569,40,6.027,47,3.262,48,2.569,49,2.569,51,2.639,52,1.009,57,5.937,58,5.726,59,4.713,60,4.942,93,4.675,105,2.793,106,4.675,116,5.101,639,4.357,764,3.553,1196,4.909,1670,5.747,1671,5.747,1672,5.747,1673,5.747,1674,5.747,1675,4.675,1676,5.747,1677,5.747,1678,5.747,1679,5.747,1680,5.747,1681,5.101,1682,5.747,1683,5.747,1684,5.747]],["title/injectables/MailsService.html",[188,1.158,1196,2.567]],["body/injectables/MailsService.html",[0,0.26,3,0.091,4,0.082,5,0.064,7,0.158,8,0.008,11,3.571,16,0.091,18,0.005,19,0.005,52,0.936,59,3.442,98,0.431,117,0.297,118,1.697,119,2.395,120,4.336,125,0.527,127,1.853,128,1.332,129,1.683,130,1.665,150,2.668,157,1.909,173,1.758,186,2.411,188,1.731,231,2.153,247,4.869,266,2.752,823,4.336,1196,3.835,1213,4.524,1675,4.336,1685,4.73,1686,6.952,1687,6.952,1688,5.33,1689,8.723,1690,5.33,1691,6.952,1692,5.33,1693,6.952,1694,5.33,1695,4.336,1696,5.33,1697,6.952,1698,6.952,1699,5.33,1700,5.33,1701,5.33,1702,6.952,1703,5.33,1704,5.33]],["title/entities/Notification.html",[458,1.712,1213,2.567]],["body/entities/Notification.html",[0,0.23,3,0.08,4,0.072,5,0.057,7,0.149,8,0.008,10,1.294,11,3.87,16,0.08,18,0.005,19,0.005,98,0.512,103,2.205,105,4.093,117,0.262,123,1.183,125,0.573,128,0.811,186,1.22,187,2.356,245,1.613,266,4.216,401,1.124,458,2.356,459,2.433,462,1.124,464,2.797,469,4.014,476,3.802,576,3.533,579,4.014,581,5,600,4.307,618,3.661,653,5.684,699,4.307,782,5.919,787,3.043,788,3.833,876,4.635,1121,4.927,1124,3.833,1125,5.21,1126,5.21,1131,3.794,1133,5.21,1213,3.533,1611,6.458,1705,4.182,1706,5.919,1707,4.712,1708,4.712,1709,4.712,1710,4.712,1711,4.712,1712,6.404,1713,4.712,1714,4.712,1715,3.191,1716,4.712,1717,4.712,1718,4.712]],["title/controllers/NotificationsController.html",[111,1.303,1719,3.527]],["body/controllers/NotificationsController.html",[0,0.158,3,0.055,4,0.05,5,0.039,7,0.172,8,0.008,16,0.055,18,0.004,19,0.004,52,0.568,94,1.879,97,1.775,98,0.441,103,1.113,111,0.905,113,0.981,115,1.408,117,0.18,118,1.193,119,2.496,123,1.081,125,0.524,127,1.843,128,1.325,129,1.673,130,1.843,131,2.205,132,2.523,133,1.618,134,1.783,136,1.618,141,1.408,142,0.888,150,1.618,151,1.044,157,2.113,184,5.902,186,2.099,187,2.167,245,1.706,279,1.571,287,1.992,288,1.4,289,2.076,290,2.076,296,1.571,312,2.948,313,1.445,314,1.724,315,3.236,318,1.189,321,1.002,322,1.044,323,2.184,324,1.445,325,1.445,326,1.408,327,1.526,328,1.044,329,1.089,330,1.044,331,1.646,332,1.089,333,1.485,334,1.571,335,1.445,336,1.571,339,1.863,340,1.002,341,1.788,342,1.445,343,1.315,344,1.612,345,1.445,346,1.545,347,1.578,349,2.523,350,2.189,351,3.974,355,1.848,359,3.974,363,2.63,364,1.848,392,1.682,488,2.184,500,1.526,775,5.212,899,2.087,1197,3.141,1213,3.621,1402,2.869,1551,2.451,1645,2.308,1715,5.366,1719,3.704,1720,2.869,1721,5.227,1722,4.336,1723,4.885,1724,4.885,1725,2.869,1726,3.233,1727,2.869,1728,3.233,1729,2.869,1730,3.233,1731,2.869,1732,3.233,1733,3.233,1734,4.885,1735,3.233,1736,3.233,1737,4.885,1738,3.233,1739,3.233,1740,2.869,1741,2.63,1742,3.233,1743,3.233,1744,4.885,1745,3.233,1746,3.233,1747,3.233,1748,4.885,1749,4.336,1750,3.233,1751,3.233,1752,3.233,1753,3.233,1754,3.233,1755,3.233,1756,3.233]],["title/modules/NotificationsModule.html",[20,1.412,41,3.322]],["body/modules/NotificationsModule.html",[0,0.295,3,0.103,4,0.093,5,0.073,7,0.184,8,0.008,11,3.283,16,0.103,18,0.006,19,0.006,20,2.493,22,2.569,23,2.569,24,2.706,25,2.706,26,2.569,27,3.671,28,2.706,41,6.438,47,3.37,48,2.706,49,2.706,51,2.78,52,1.063,53,2.858,54,1.764,113,2.289,214,3.909,1197,4.809,1213,3.339,1719,6.226,1740,5.372,1757,6.053,1758,6.053,1759,6.053,1760,6.053,1761,5.372,1762,6.053]],["title/injectables/NotificationsService.html",[188,1.158,1197,2.481]],["body/injectables/NotificationsService.html",[0,0.145,3,0.051,4,0.046,5,0.036,7,0.168,8,0.008,10,0.819,11,3.586,16,0.051,18,0.004,19,0.004,52,0.524,54,0.869,94,1.935,97,1.72,98,0.458,103,1.027,105,2.723,117,0.166,118,1.122,119,2.468,125,0.526,127,1.85,128,1.33,129,1.68,130,1.792,131,1.367,151,1.484,157,2.261,171,1.653,173,1.516,182,4.179,188,1.144,214,1.926,231,1.205,234,3.097,238,1.266,240,2.426,245,1.794,266,1.54,287,1.395,288,0.98,289,1.453,290,1.453,312,2.3,318,1.097,321,0.924,322,0.963,328,0.963,329,1.005,330,0.963,331,1.548,332,1.005,339,1.453,340,0.924,341,1.701,343,1.237,344,1.516,346,1.453,347,1.484,392,1.929,401,1.467,414,1.37,415,1.37,416,1.333,426,2.573,427,1.408,428,1.408,429,2.646,430,1.408,488,2.054,500,2.169,663,1.844,699,3.091,775,5.577,778,4.001,876,1.771,1000,1.844,1121,3.111,1197,2.45,1213,4.262,1302,2.13,1706,2.426,1715,4.604,1721,4.973,1722,4.078,1725,2.647,1727,4.078,1729,2.647,1731,4.078,1741,2.426,1761,2.647,1763,2.647,1764,4.594,1765,4.594,1766,2.983,1767,5.604,1768,2.983,1769,4.594,1770,2.983,1771,4.594,1772,2.983,1773,2.983,1774,2.983,1775,4.594,1776,6.295,1777,2.983,1778,2.983,1779,2.983,1780,2.983,1781,2.983,1782,2.983,1783,4.594,1784,4.594,1785,2.983,1786,2.983,1787,2.983,1788,2.983,1789,2.983,1790,4.594,1791,4.078,1792,4.594,1793,5.604,1794,4.594,1795,2.983,1796,2.983,1797,2.983,1798,2.983]],["title/classes/OrderByParamDto.html",[0,0.227,288,0.992]],["body/classes/OrderByParamDto.html",[0,0.377,2,1.221,3,0.107,4,0.097,5,0.076,7,0.171,8,0.007,16,0.107,18,0.006,19,0.006,98,0.351,117,0.351,123,0.885,125,0.429,142,1.731,288,1.649,343,2.251,462,1.358,463,3.201,617,1.6,678,3.123,704,3.201,740,3.156,1131,3.064,1319,3.993,1799,6.862,1800,3.255,1801,4.46,1802,3.362,1803,3.478,1804,3.897,1805,3.993,1806,3.993,1807,6.304,1808,3.478]],["title/classes/OrderByParamDto-1.html",[0,0.189,288,0.829,340,1.204]],["body/classes/OrderByParamDto-1.html",[0,0.374,2,1.204,3,0.106,4,0.095,5,0.075,7,0.17,8,0.007,16,0.106,18,0.006,19,0.006,98,0.346,117,0.346,123,0.873,125,0.423,142,1.707,288,1.635,343,2.238,385,3.817,460,3.959,462,1.346,463,3.174,617,1.578,678,3.097,704,3.174,740,3.113,1131,3.022,1319,3.959,1800,3.211,1801,4.433,1802,3.316,1803,3.43,1805,3.959,1806,3.959,1808,3.43,1809,6.805,1810,5.058,1811,6.218]],["title/classes/OrderByParamDto-10.html",[0,0.189,288,0.829,342,1.737]],["body/classes/OrderByParamDto-10.html",[0,0.377,2,1.221,3,0.107,4,0.097,5,0.076,7,0.171,8,0.007,14,4.071,16,0.107,18,0.006,19,0.006,98,0.351,117,0.351,123,0.885,125,0.429,142,1.731,288,1.649,343,2.251,462,1.358,617,1.6,678,3.123,704,3.201,740,3.156,1000,4.78,1131,3.064,1319,3.993,1800,3.255,1801,4.46,1802,3.362,1803,3.478,1804,3.897,1805,3.993,1806,3.993,1808,3.478,1812,6.862]],["title/classes/OrderByParamDto-2.html",[0,0.189,288,0.829,1813,3.448]],["body/classes/OrderByParamDto-2.html",[0,0.377,2,1.221,3,0.107,4,0.097,5,0.076,7,0.171,8,0.007,16,0.107,18,0.006,19,0.006,98,0.351,117,0.351,123,0.885,125,0.429,142,1.731,269,4.265,288,1.649,343,2.251,462,1.358,617,1.6,678,3.123,704,3.201,740,3.156,1131,3.064,1319,3.993,1800,3.255,1801,4.46,1802,3.362,1803,3.478,1804,3.897,1805,3.993,1806,3.993,1808,3.478,1814,6.862,1815,6.304]],["title/classes/OrderByParamDto-3.html",[0,0.189,288,0.829,1816,3.885]],["body/classes/OrderByParamDto-3.html",[0,0.371,2,1.188,3,0.104,4,0.094,5,0.074,7,0.169,8,0.007,16,0.104,18,0.006,19,0.006,73,3.057,98,0.341,117,0.341,123,0.861,125,0.417,142,1.684,288,1.622,343,2.224,462,1.335,617,1.557,622,3.901,678,3.071,704,3.147,708,3.926,740,3.071,1009,4.7,1131,2.981,1319,3.926,1800,3.168,1801,4.406,1802,3.271,1803,3.384,1805,3.926,1806,3.926,1808,3.384,1810,4.99,1817,6.748,1818,5.445]],["title/classes/OrderByParamDto-4.html",[0,0.189,288,0.829,1819,3.885]],["body/classes/OrderByParamDto-4.html",[0,0.377,2,1.221,3,0.107,4,0.097,5,0.076,7,0.171,8,0.007,16,0.107,18,0.006,19,0.006,98,0.351,117,0.351,123,0.885,125,0.429,142,1.731,288,1.649,343,2.251,462,1.358,617,1.6,678,3.123,704,3.201,740,3.156,742,4.071,1103,3.757,1131,3.064,1319,3.993,1800,3.255,1801,4.46,1802,3.362,1803,3.478,1804,3.897,1805,3.993,1806,3.993,1808,3.478,1820,6.862]],["title/classes/OrderByParamDto-5.html",[0,0.189,288,0.829,1821,3.885]],["body/classes/OrderByParamDto-5.html",[0,0.377,2,1.221,3,0.107,4,0.097,5,0.076,7,0.171,8,0.007,16,0.107,18,0.006,19,0.006,98,0.351,117,0.351,123,0.885,125,0.429,142,1.731,288,1.649,343,2.251,462,1.358,525,3.757,617,1.6,678,3.123,704,3.201,740,3.156,1131,3.064,1319,3.993,1800,3.255,1801,4.46,1802,3.362,1803,3.478,1804,3.897,1805,3.993,1806,3.993,1808,3.478,1822,6.862,1823,6.304]],["title/classes/OrderByParamDto-6.html",[0,0.189,288,0.829,1824,3.885]],["body/classes/OrderByParamDto-6.html",[0,0.374,2,1.204,3,0.106,4,0.095,5,0.075,7,0.17,8,0.007,16,0.106,18,0.006,19,0.006,98,0.346,117,0.346,123,0.873,125,0.423,142,1.707,288,1.635,343,2.238,462,1.346,596,3.838,617,1.578,678,3.097,704,3.174,740,3.113,762,3.817,1131,3.022,1319,3.959,1533,5.474,1800,3.211,1801,4.433,1802,3.316,1803,3.43,1805,3.959,1806,3.959,1808,3.43,1810,5.058,1825,6.805,1826,6.218]],["title/classes/OrderByParamDto-7.html",[0,0.189,288,0.829,1827,3.885]],["body/classes/OrderByParamDto-7.html",[0,0.377,2,1.221,3,0.107,4,0.097,5,0.076,7,0.171,8,0.007,16,0.107,18,0.006,19,0.006,98,0.351,117,0.351,123,0.885,125,0.429,142,1.731,288,1.649,343,2.251,462,1.358,617,1.6,678,3.123,704,3.201,740,3.156,1009,4.78,1131,3.064,1319,3.993,1800,3.255,1801,4.46,1802,3.362,1803,3.478,1804,3.897,1805,3.993,1806,3.993,1808,3.478,1818,5.595,1828,6.862]],["title/classes/OrderByParamDto-8.html",[0,0.189,288,0.829,1829,3.885]],["body/classes/OrderByParamDto-8.html",[0,0.377,2,1.221,3,0.107,4,0.097,5,0.076,7,0.171,8,0.007,16,0.107,18,0.006,19,0.006,98,0.351,117,0.351,123,0.885,125,0.429,142,1.731,288,1.649,343,2.251,462,1.358,617,1.6,678,3.123,704,3.201,740,3.156,788,5.128,1131,3.064,1319,3.993,1715,5.236,1800,3.255,1801,4.46,1802,3.362,1803,3.478,1804,3.897,1805,3.993,1806,3.993,1808,3.478,1830,6.862]],["title/classes/OrderByParamDto-9.html",[0,0.189,288,0.829,1831,3.885]],["body/classes/OrderByParamDto-9.html",[0,0.377,2,1.221,3,0.107,4,0.097,5,0.076,7,0.171,8,0.007,16,0.107,18,0.006,19,0.006,98,0.351,117,0.351,123,0.885,125,0.429,142,1.731,288,1.649,343,2.251,462,1.358,573,4.993,617,1.6,678,3.123,704,3.201,740,3.156,1131,3.064,1319,3.993,1800,3.255,1801,4.46,1802,3.362,1803,3.478,1804,3.897,1805,3.993,1806,3.993,1808,3.478,1832,6.862,1833,6.304]],["title/classes/OrderTypeParamDto.html",[0,0.227,289,1.472]],["body/classes/OrderTypeParamDto.html",[0,0.379,2,1.231,3,0.108,4,0.098,5,0.076,7,0.159,8,0.007,16,0.108,18,0.006,19,0.006,98,0.467,117,0.354,123,0.893,125,0.433,142,1.745,289,2.458,330,2.51,344,2.769,345,3.752,462,1.365,617,1.614,678,3.139,704,3.217,1131,3.089,1319,4.013,1791,7.45,1800,3.283,1802,3.39,1805,4.013,1834,6.357,1835,6.357]],["title/classes/PaginatedItems.html",[0,0.227,349,2.402]],["body/classes/PaginatedItems.html",[0,0.287,2,1.139,3,0.1,4,0.09,5,0.071,8,0.007,16,0.1,18,0.006,19,0.006,98,0.506,117,0.327,125,0.618,326,3.529,341,2.46,349,3.824,401,1.614,462,1.3,699,4.693,1836,8.158,1837,5.219,1838,7.194,1839,8.105,1840,8.105,1841,7.194,1842,8.105,1843,5.881,1844,5.881,1845,5.881,1846,6.572,1847,5.881,1848,5.881,1849,5.881,1850,5.881]],["title/classes/PaginationParams.html",[0,0.227,287,1.412]],["body/classes/PaginationParams.html",[0,0.4,2,1.172,3,0.103,4,0.093,5,0.073,7,0.168,8,0.008,16,0.103,18,0.006,19,0.006,98,0.492,117,0.337,123,1.059,125,0.513,142,1.662,287,2.289,321,2.545,339,2.598,341,2.493,401,1.583,462,1.324,615,3.671,617,1.536,618,3.46,704,3.399,1328,4.924,1805,4.241,1851,7.54,1852,6.053,1853,6.053,1854,6.053,1855,7.54]],["title/classes/RecommendCategoriesDto.html",[0,0.227,619,3.004]],["body/classes/RecommendCategoriesDto.html",[0,0.423,2,1.102,3,0.097,4,0.087,5,0.068,7,0.148,8,0.008,16,0.136,18,0.006,19,0.006,98,0.483,103,2.497,117,0.317,123,1.018,125,0.493,269,3.139,303,2.748,401,1.476,462,1.273,546,2.765,607,5.699,608,6.052,609,4.314,610,2.765,612,4.683,613,5.154,614,3.685,615,3.757,616,5.406,617,1.444,618,3.253,619,4.683,620,4.683,621,6.001,622,3.769,623,3.034,987,4.314,1856,5.689,1857,5.689,1858,5.689]],["title/entities/Recommendation.html",[458,1.712,592,2.66]],["body/entities/Recommendation.html",[0,0.275,3,0.096,4,0.086,5,0.068,7,0.162,8,0.008,10,1.547,16,0.096,18,0.006,19,0.006,73,2.481,98,0.442,117,0.313,123,1.116,125,0.541,245,1.761,353,3.659,401,1.265,458,2.073,459,2.909,462,1.265,464,4.278,469,4.383,472,4.653,473,4.653,476,4.717,477,3.482,480,3.815,592,4.119,708,2.909,971,4.608,974,3.108,975,3.108,1859,5,1860,7.205,1861,5.633,1862,7.205,1863,5.633,1864,5.633,1865,5.633,1866,5.633]],["title/controllers/RecommendationsController.html",[111,1.303,1867,3.527]],["body/controllers/RecommendationsController.html",[0,0.185,3,0.065,4,0.058,5,0.046,7,0.178,8,0.008,16,0.065,18,0.004,19,0.004,52,0.667,94,1.734,97,1.551,98,0.419,111,1.064,113,1.153,115,1.654,117,0.211,118,1.344,119,2.416,123,0.997,125,0.483,127,1.7,128,1.222,129,1.544,130,1.7,131,1.926,132,2.843,133,1.902,134,2.096,136,1.902,141,1.654,142,1.043,150,1.902,151,1.227,155,2.573,157,1.95,159,2.256,160,3.729,162,1.846,187,2.382,245,1.671,279,1.846,287,2.155,288,1.514,289,2.246,290,2.246,296,1.846,312,1.902,313,1.698,315,3.461,318,1.398,321,1.177,322,1.227,323,2.461,324,1.698,325,1.698,326,1.654,327,1.794,328,1.227,329,1.28,330,1.227,331,1.855,332,1.28,333,1.745,334,1.846,335,1.698,336,1.846,339,2.048,340,1.177,341,1.966,342,1.698,343,1.482,344,1.816,345,1.698,346,1.742,347,1.778,349,2.843,355,2.172,364,2.172,392,1.896,401,1.38,439,5.776,485,2.494,486,2.121,487,2.337,492,1.463,494,1.498,495,2.843,497,1.745,498,2.172,511,2.096,515,2.349,573,4.585,790,5.07,899,2.453,903,2.573,923,2.881,1645,2.713,1867,4.174,1868,3.372,1869,3.799,1870,3.799,1871,5.506,1872,3.799,1873,3.799,1874,3.799,1875,3.729,1876,3.372,1877,3.372,1878,3.799,1879,3.799,1880,3.799,1881,3.799,1882,3.799,1883,3.799,1884,3.799]],["title/modules/RecommendationsModule.html",[20,1.412,42,3.322]],["body/modules/RecommendationsModule.html",[0,0.252,3,0.088,4,0.079,5,0.062,7,0.191,8,0.008,11,2.968,16,0.088,18,0.005,19,0.005,20,2.315,22,2.195,23,2.195,24,2.312,25,2.312,26,2.195,27,3.409,28,2.312,42,6.528,47,3.047,48,2.312,49,2.312,51,2.375,52,0.908,53,2.442,54,1.508,73,2.347,113,2.069,214,3.34,353,2.688,382,2.297,383,2.514,388,2.853,523,3.34,592,3.897,622,2.442,710,2.508,971,3.413,974,2.853,975,2.853,1032,3.197,1196,4.772,1197,4.614,1212,3.503,1213,3.761,1214,4.208,1215,3.503,1867,5.781,1875,5.859,1876,4.591,1885,4.591,1886,4.591,1887,5.172,1888,5.172,1889,4.591]],["title/injectables/RecommendationsService.html",[188,1.158,1875,3.151]],["body/injectables/RecommendationsService.html",[0,0.153,3,0.053,4,0.048,5,0.038,7,0.181,8,0.008,10,0.859,16,0.053,18,0.004,19,0.004,52,0.55,54,0.913,73,1.642,94,2.002,97,1.383,98,0.424,117,0.174,118,1.164,119,2.32,125,0.473,127,1.664,128,1.196,129,1.511,130,1.546,131,0.931,151,2.244,157,2.154,171,2.738,173,1.573,182,3.78,188,1.187,231,1.264,234,3.639,238,1.329,245,1.782,266,2.982,287,1.447,288,1.017,289,1.508,290,1.508,303,1.642,318,1.152,321,0.97,322,1.011,328,1.011,329,1.055,330,1.011,331,1.607,332,1.055,339,1.508,340,0.97,341,1.753,343,1.283,344,1.573,346,1.508,347,1.54,353,2.546,382,1.607,383,1.521,392,1.988,401,1.285,414,1.438,415,1.438,416,1.399,417,2.235,419,1.79,426,2.19,427,1.478,428,1.478,429,1.478,430,1.478,480,2.12,485,2.224,486,1.836,487,2.023,492,1.206,494,1.88,497,2.19,546,3.376,548,2.12,573,3.729,592,2.726,622,1.478,623,3.443,710,2.124,724,2.462,778,2.235,787,2.021,790,5.434,828,2.546,971,3.478,974,1.727,975,1.727,1032,1.935,1047,2.373,1048,2.12,1079,4.697,1196,4.199,1197,4.059,1212,2.12,1215,2.12,1230,2.546,1260,2.546,1262,2.546,1290,2.778,1291,2.778,1875,3.229,1877,2.778,1889,2.778,1890,2.778,1891,3.13,1892,5.125,1893,4.697,1894,5.125,1895,3.13,1896,4.767,1897,3.13,1898,3.13,1899,3.13,1900,3.13,1901,3.13,1902,2.778,1903,3.13,1904,4.231,1905,3.13,1906,3.13,1907,3.13,1908,3.13,1909,3.13,1910,3.13,1911,3.13,1912,3.13,1913,3.13,1914,3.13,1915,3.13,1916,3.13,1917,3.13,1918,3.13,1919,3.13,1920,3.13,1921,3.13]],["title/entities/Recopilation.html",[382,1.568,458,1.712]],["body/entities/Recopilation.html",[0,0.189,3,0.066,4,0.059,5,0.047,7,0.155,8,0.008,10,1.063,16,0.066,18,0.004,19,0.004,73,2.466,98,0.506,105,4.291,117,0.215,123,1.227,125,0.595,128,1.126,186,1.854,245,1.451,382,1.88,384,3.444,386,1.881,387,1.881,401,0.98,458,1.424,459,1.999,460,1.999,462,0.98,469,3.61,524,3.951,526,2.393,527,2.393,563,5.421,565,4.539,570,4.672,572,4.225,574,4.427,576,4.872,579,4.188,580,3.19,581,5.124,586,3.444,589,4.539,590,3.984,596,1.938,597,1.881,598,1.881,600,4.497,601,4.694,699,3.078,708,1.999,724,3.379,757,2.298,798,4.672,799,4.672,800,4.672,876,2.298,971,3.586,974,2.135,975,2.135,1070,5.756,1071,4.953,1469,4.953,1922,3.435,1923,5.323,1924,3.87,1925,3.87,1926,3.87,1927,3.87,1928,3.87,1929,3.87,1930,3.87,1931,5.58,1932,3.87,1933,3.87,1934,3.87,1935,5.58,1936,3.87,1937,3.87,1938,3.87]],["title/interfaces/RecopilationDto.html",[1295,3.322,1939,3.527]],["body/interfaces/RecopilationDto.html",[3,0.089,4,0.08,5,0.063,7,0.166,8,0.008,16,0.089,18,0.005,19,0.005,98,0.52,117,0.29,128,1.4,186,2.245,245,1.803,353,3.208,380,3.021,401,1.345,444,2.613,462,1.204,463,3.171,479,4.246,480,3.535,525,3.953,576,5.005,595,3.957,622,3.841,699,4.225,710,2.818,724,4.201,798,5.808,799,5.808,800,5.808,985,4.246,1295,3.727,1297,4.246,1923,6.618,1939,5.2,1940,4.633,1941,7.22,1942,4.633]],["title/controllers/RecopilationsController.html",[111,1.303,1943,3.527]],["body/controllers/RecopilationsController.html",[0,0.105,3,0.037,4,0.033,5,0.026,7,0.168,8,0.008,10,0.591,16,0.037,18,0.003,19,0.003,52,0.378,54,0.628,94,1.789,97,1.836,98,0.434,103,0.741,111,0.603,113,0.654,115,0.937,117,0.12,118,0.865,119,2.492,123,1.077,125,0.522,127,1.836,128,1.32,129,1.667,130,1.836,131,2.234,132,1.829,133,2.619,134,1.188,136,1.078,141,0.937,142,0.591,151,1.144,155,2.399,157,2.178,159,2.103,160,3.543,162,1.722,171,1.275,173,0.71,184,4.129,186,2.152,187,2.419,234,1.467,238,0.914,245,1.825,269,1.954,279,4.217,280,1.911,287,1.588,288,1.402,289,2.08,290,1.655,296,4,312,1.078,313,0.962,314,1.148,315,3.019,318,0.792,320,0.87,321,0.667,322,0.695,323,1.584,324,0.962,325,0.962,326,0.937,327,1.017,328,0.695,329,0.726,330,0.695,331,1.194,332,0.726,333,0.989,334,1.046,335,0.962,336,1.046,339,1.428,340,0.667,341,1.37,342,0.962,343,1.408,344,1.726,345,1.584,346,1.121,347,1.144,349,1.829,350,3.916,355,1.231,360,1.231,364,1.231,382,2.469,392,1.22,401,0.378,419,1.231,485,1.739,486,1.365,487,1.504,488,2.018,492,0.829,494,0.849,495,1.112,497,0.989,498,1.231,500,1.017,503,1.278,511,1.188,515,1.331,525,2.194,619,4.245,623,2.407,710,0.792,796,3.916,887,4.245,923,2.686,1009,2.19,1011,3.144,1020,1.458,1021,2.791,1551,2.686,1566,1.911,1645,1.537,1749,1.911,1893,1.751,1943,2.686,1944,1.911,1945,4.514,1946,3.144,1947,3.144,1948,4.514,1949,4.514,1950,3.543,1951,3.543,1952,1.911,1953,2.153,1954,6.503,1955,2.153,1956,2.153,1957,2.153,1958,2.153,1959,2.153,1960,2.153,1961,2.153,1962,1.911,1963,2.153,1964,2.153,1965,1.911,1966,2.153,1967,2.153,1968,2.153,1969,2.153,1970,2.153,1971,2.153,1972,2.153,1973,2.153,1974,2.153,1975,2.153,1976,2.153,1977,2.153,1978,3.543,1979,2.153,1980,4.694,1981,2.153,1982,2.153,1983,2.153,1984,2.153,1985,2.153,1986,3.057,1987,1.911,1988,1.911,1989,1.911,1990,1.751,1991,2.153,1992,2.153,1993,2.153,1994,2.153,1995,3.543,1996,2.153,1997,2.153,1998,2.153,1999,2.153,2000,2.153,2001,2.153,2002,2.153,2003,2.153,2004,3.543,2005,2.153,2006,5.231,2007,3.543,2008,2.153,2009,3.543,2010,2.153,2011,2.153,2012,2.153,2013,2.153,2014,2.153,2015,2.153,2016,2.153,2017,2.153,2018,1.911,2019,1.911,2020,1.911]],["title/modules/RecopilationsModule.html",[20,1.412,43,3.322]],["body/modules/RecopilationsModule.html",[0,0.251,3,0.088,4,0.079,5,0.062,7,0.191,8,0.008,16,0.088,18,0.005,19,0.005,20,2.31,22,2.185,23,2.185,24,2.302,25,2.302,26,2.185,27,3.401,28,3.038,43,6.169,47,3.038,48,2.302,49,2.302,51,2.365,52,0.904,53,3.209,54,1.501,73,2.786,113,2.063,353,2.68,380,2.68,381,3.183,382,2.29,384,2.959,385,2.365,386,2.502,387,2.502,388,2.84,463,2.813,522,3.183,523,3.325,524,3.749,525,2.502,526,3.183,527,3.183,586,2.959,592,3.886,597,2.502,598,2.502,622,2.431,710,2.501,762,2.365,971,3.403,974,2.84,975,2.84,1020,3.487,1031,4.189,1032,3.183,1943,5.768,1986,5.851,1990,4.189,2021,4.57,2022,4.57,2023,5.149,2024,4.57]],["title/injectables/RecopilationsService.html",[188,1.158,1986,3.151]],["body/injectables/RecopilationsService.html",[0,0.069,3,0.024,4,0.022,5,0.017,7,0.161,8,0.008,10,0.386,16,0.024,18,0.002,19,0.002,52,0.247,54,0.41,73,1.363,94,2.131,97,1.733,98,0.379,103,2.051,105,0.684,117,0.183,118,0.602,119,2.316,125,0.451,127,1.587,128,1.198,129,1.441,130,1.54,131,1.588,157,2.223,162,1.199,163,1.649,171,2.447,173,0.814,182,2.928,187,1.456,188,0.614,231,0.568,234,3.457,238,0.597,245,1.841,264,1.671,269,1.817,287,0.749,288,0.703,289,1.042,290,0.78,303,2.051,318,0.518,320,0.568,321,0.436,322,0.455,328,0.455,329,0.474,330,0.455,331,0.831,332,0.474,339,0.78,340,0.436,341,1,343,1.212,344,1.485,345,2.012,346,0.78,347,0.797,353,2.745,380,2.613,381,0.87,382,2.479,384,2.325,385,0.646,386,0.684,387,0.684,392,0.85,397,2.231,401,1.431,414,0.646,415,0.646,416,0.629,417,1.005,418,1.005,419,0.805,420,0.953,426,2.452,427,0.665,428,0.665,429,2.126,430,0.665,442,2.826,444,1.649,455,2.68,463,2.466,471,3.513,485,1.269,486,0.95,487,1.047,488,1.473,492,0.542,494,0.973,497,1.133,500,0.665,522,0.87,523,0.909,524,1.817,525,3.017,526,0.87,527,0.87,530,2.68,539,1.005,540,1.145,544,1.067,546,2.188,548,3.049,554,2.19,559,1.249,563,2.352,567,1.067,570,2.352,572,2.127,573,2.907,576,0.776,586,0.613,592,1.411,597,0.684,598,0.684,619,3.2,622,2.34,623,3.177,710,2.086,724,1.274,762,0.646,796,2.68,798,2.352,799,2.826,800,2.826,881,1.005,887,3.448,960,1.249,971,2.254,974,0.776,975,0.776,1009,0.87,1021,2.037,1032,0.87,1046,1.145,1047,1.067,1048,0.953,1070,2.498,1073,1.249,1079,2.68,1089,2.19,1103,0.684,1121,0.953,1234,0.953,1385,2.19,1470,1.249,1492,2.19,1496,2.19,1498,2.924,1499,2.19,1500,2.19,1501,1.249,1502,4.398,1503,2.007,1505,1.249,1514,2.007,1535,2.68,1544,1.145,1578,2.498,1588,1.067,1590,1.249,1602,2.498,1603,2.19,1892,2.924,1893,2.007,1894,2.924,1902,1.249,1904,1.249,1923,3.22,1939,3.757,1942,1.249,1946,2.19,1947,2.19,1952,2.19,1954,3.995,1962,2.19,1965,2.19,1980,2.826,1986,1.671,1987,1.249,1988,1.249,1989,1.249,1990,1.145,2018,3.513,2019,2.19,2020,1.249,2024,1.249,2025,1.249,2026,3.294,2027,2.467,2028,3.294,2029,1.407,2030,3.294,2031,3.294,2032,3.294,2033,1.407,2034,1.407,2035,1.407,2036,1.407,2037,1.407,2038,1.407,2039,1.407,2040,1.407,2041,1.407,2042,2.467,2043,1.407,2044,1.407,2045,1.407,2046,1.407,2047,1.407,2048,1.249,2049,1.407,2050,1.407,2051,1.407,2052,1.407,2053,3.294,2054,1.407,2055,1.407,2056,1.407,2057,1.407,2058,2.467,2059,1.407,2060,1.407,2061,2.467,2062,2.467,2063,2.467,2064,2.467,2065,3.958,2066,2.467,2067,2.467,2068,2.467,2069,2.467,2070,1.407,2071,1.407,2072,1.407,2073,1.407,2074,1.407,2075,1.407,2076,1.407,2077,1.407,2078,1.407,2079,1.407,2080,1.407,2081,1.407,2082,1.407,2083,1.407,2084,1.407,2085,2.467,2086,1.407,2087,1.407,2088,1.407,2089,1.407,2090,1.407,2091,3.294,2092,1.407,2093,1.407,2094,1.249,2095,3.294,2096,1.407,2097,1.407,2098,1.407,2099,1.407,2100,1.407,2101,3.294,2102,3.294,2103,1.407,2104,1.407,2105,1.407,2106,1.407,2107,1.407,2108,1.407,2109,2.467,2110,1.407,2111,1.407,2112,1.407,2113,1.407,2114,1.407,2115,1.407,2116,1.407,2117,1.407,2118,1.407,2119,1.407,2120,1.249,2121,1.407,2122,1.407,2123,1.407,2124,1.407,2125,1.407,2126,1.407,2127,1.407,2128,1.407,2129,1.407,2130,1.407,2131,1.407,2132,1.407,2133,1.407,2134,1.407,2135,1.407,2136,2.467,2137,2.467,2138,3.294,2139,2.467]],["title/classes/RelateIndicatorsToRecopilationDto.html",[0,0.227,887,3.004]],["body/classes/RelateIndicatorsToRecopilationDto.html",[0,0.42,2,1.077,3,0.095,4,0.085,5,0.067,7,0.146,8,0.008,16,0.135,18,0.006,19,0.006,98,0.48,103,2.462,117,0.31,123,1.004,125,0.487,303,2.72,401,1.514,403,3.973,444,2.786,462,1.255,525,4.288,545,3.973,546,2.704,610,2.704,612,5.101,613,5.101,614,3.809,615,3.854,616,5.349,617,1.412,618,3.181,620,4.616,711,3.181,883,5.64,884,5.989,887,4.616,888,5.952,987,4.219,988,4.527,2140,5.564,2141,5.564]],["title/guards/RolesGuard.html",[166,3.785,218,3.527]],["body/guards/RolesGuard.html",[0,0.277,3,0.097,4,0.087,5,0.068,7,0.172,8,0.008,11,2.471,16,0.097,18,0.006,19,0.006,52,0.996,94,1.768,97,1.734,98,0.403,103,1.954,117,0.316,118,1.768,125,0.493,127,1.734,128,1.246,129,1.574,130,1.359,150,2.841,168,4.617,170,7.453,173,1.872,176,7.873,178,6.426,179,6.831,181,4.617,188,1.802,189,4.303,193,3.844,196,5.037,197,5.037,198,5.037,218,5.489,335,2.537,699,3.994,2142,5.037,2143,5.675,2144,5.675,2145,5.675,2146,5.675,2147,4.617,2148,5.675,2149,7.24,2150,5.675,2151,5.675,2152,5.675]],["title/injectables/SuccessfulResponseBuilderInterceptor.html",[188,1.158,2153,3.785]],["body/injectables/SuccessfulResponseBuilderInterceptor.html",[0,0.275,3,0.096,4,0.086,5,0.068,7,0.177,8,0.008,16,0.096,18,0.006,19,0.006,52,0.989,94,1.759,97,1.349,98,0.313,117,0.313,118,1.759,125,0.383,127,1.349,128,0.97,129,1.225,130,1.349,179,6.812,181,5.862,188,1.794,191,3.638,193,3.815,231,2.275,258,5.979,266,2.909,643,6.426,644,3.815,645,3.815,646,3.815,1340,4.271,2153,5.862,2154,6.395,2155,6.395,2156,5,2157,7.945,2158,5.633,2159,8.374,2160,5.633,2161,7.945,2162,7.205,2163,4.583,2164,5,2165,5.633,2166,4.583,2167,5,2168,5.633,2169,5.633,2170,5.633,2171,5.633,2172,5.633,2173,4.583]],["title/controllers/SummaryInformationController.html",[111,1.303,2174,3.527]],["body/controllers/SummaryInformationController.html",[0,0.273,3,0.095,4,0.086,5,0.067,7,0.177,8,0.008,16,0.095,18,0.006,19,0.006,52,0.984,86,5.129,97,1.342,98,0.312,111,1.57,113,1.702,115,2.441,117,0.312,118,1.754,119,2.176,123,0.787,125,0.381,127,1.342,128,0.965,129,1.219,130,1.342,131,1.667,141,2.441,142,1.539,151,1.811,157,1.539,171,2.017,173,1.849,186,2.288,279,2.724,296,2.724,313,2.506,333,2.574,334,2.724,335,2.506,336,2.724,762,3.64,764,4.44,2174,5.446,2175,5.446,2176,4.975,2177,6.448,2178,4.56,2179,6.8,2180,7.183,2181,5.605,2182,6.448,2183,5.368,2184,4.975,2185,5.605,2186,5.605,2187,5.605,2188,5.605,2189,5.605]],["title/modules/SummaryInformationModule.html",[20,1.412,44,3.322]],["body/modules/SummaryInformationModule.html",[0,0.277,3,0.097,4,0.087,5,0.068,7,0.187,8,0.008,16,0.097,18,0.006,19,0.006,20,2.423,22,2.415,23,2.415,24,2.543,25,2.543,26,2.415,27,3.568,28,2.543,44,6.337,47,3.242,48,2.543,49,2.543,51,2.613,52,0.999,53,2.687,54,1.659,86,4.062,113,2.201,382,2.444,383,2.765,384,3.158,385,2.613,386,2.765,387,2.765,388,3.139,463,3.002,522,3.517,586,3.158,597,2.765,598,2.765,762,2.613,764,4.483,2174,6.052,2175,4.314,2183,6.011,2184,5.05,2190,5.05,2191,5.05,2192,5.689,2193,5.689]],["title/injectables/SummaryInformationService.html",[188,1.158,2183,3.151]],["body/injectables/SummaryInformationService.html",[0,0.225,3,0.078,4,0.071,5,0.055,7,0.175,8,0.008,10,1.265,16,0.078,18,0.005,19,0.005,52,0.809,54,1.343,86,5.135,94,1.756,97,1.103,98,0.351,117,0.256,118,1.54,119,1.975,125,0.429,127,1.51,128,1.086,129,1.371,130,1.103,131,1.37,157,2.224,171,2.782,173,2.081,188,1.57,231,1.861,234,3.796,238,1.955,245,1.714,353,2.487,382,2.819,383,2.239,384,2.746,385,2.116,386,2.239,387,2.239,396,4.644,397,4.87,401,1.469,419,2.634,420,3.12,426,2.896,444,3.157,463,2.977,522,2.848,539,3.289,544,3.493,548,3.12,572,4.073,586,2.006,597,2.239,598,2.239,710,1.695,762,2.116,1051,3.289,1103,2.239,1234,3.12,1576,3.748,1578,4.782,1588,3.493,1602,3.493,2175,5.452,2177,5.131,2178,5.131,2179,6.291,2182,5.131,2183,4.271,2194,4.089,2195,6.383,2196,4.607,2197,4.607,2198,4.607,2199,4.089,2200,4.607,2201,4.607]],["title/classes/TypeORMExceptionFilter.html",[0,0.227,2202,3.785]],["body/classes/TypeORMExceptionFilter.html",[0,0.229,2,0.909,3,0.08,4,0.072,5,0.056,7,0.159,8,0.008,10,1.288,16,0.08,18,0.005,19,0.005,52,0.824,94,1.773,97,1.124,98,0.261,117,0.261,118,1.559,125,0.319,127,1.124,128,0.808,129,1.02,130,1.124,136,2.349,146,4.688,159,4.311,186,1.215,191,3.03,193,4.325,245,1.04,315,2.155,392,1.616,401,0.824,416,2.855,433,3.35,458,2.35,477,2.901,627,5.332,636,3.178,637,5.906,638,5.195,639,5.505,640,6.34,642,3.817,643,5.184,644,3.178,645,3.178,646,3.178,649,3.817,650,3.817,651,3.817,718,3.558,827,3.558,876,2.786,1046,5.195,1242,3.817,1243,5.906,1247,6.632,1287,3.817,1302,3.35,1340,6.377,2163,3.817,2173,3.817,2202,5.195,2203,5.195,2204,4.692,2205,6.386,2206,6.386,2207,4.692,2208,5.195,2209,4.165,2210,4.692,2211,4.692,2212,4.692,2213,4.692,2214,4.692,2215,4.692,2216,4.692,2217,4.692,2218,4.692,2219,6.386,2220,4.692,2221,4.692,2222,4.692,2223,4.692,2224,4.692,2225,4.692,2226,4.692,2227,4.692,2228,4.692,2229,4.692,2230,4.692,2231,4.692,2232,6.386,2233,4.692,2234,4.165,2235,4.692,2236,4.692]],["title/classes/UpdateCategorizedCriterionDto.html",[0,0.227,502,3.322]],["body/classes/UpdateCategorizedCriterionDto.html",[0,0.331,2,1.315,3,0.116,4,0.104,5,0.082,7,0.165,8,0.007,16,0.116,17,3.82,18,0.006,19,0.006,142,1.865,385,3.715,392,2.339,460,3.508,490,5.85,502,5.776,507,5.527,667,5.527,2237,6.03,2238,5.34]],["title/classes/UpdateCategoryDto.html",[0,0.227,309,3.322]],["body/classes/UpdateCategoryDto.html",[0,0.368,2,1.172,3,0.103,4,0.093,5,0.073,7,0.124,8,0.007,16,0.103,18,0.006,19,0.006,98,0.457,117,0.337,123,1.153,125,0.559,128,1.414,129,1.961,186,2.225,299,5.077,309,5.383,401,1.324,437,4.53,462,1.324,617,1.536,672,4.924,678,3.317,704,3.558,731,6.692,2239,7.629,2240,6.053,2241,5.372,2242,6.053,2243,6.053,2244,6.692]],["title/classes/UpdateCriteriaDto.html",[0,0.227,914,3.322]],["body/classes/UpdateCriteriaDto.html",[0,0.337,2,1.339,3,0.118,4,0.106,5,0.083,7,0.167,8,0.007,16,0.118,17,3.861,18,0.006,19,0.006,392,2.382,685,4.685,687,5.627,914,5.838,918,5.627,2238,4.276,2245,6.14,2246,8.176,2247,5.627,2248,5.627]],["title/classes/UpdateDepartmentPerRecopilationDto.html",[0,0.227,1017,3.322]],["body/classes/UpdateDepartmentPerRecopilationDto.html",[0,0.374,2,1.204,3,0.106,4,0.095,5,0.075,7,0.127,8,0.007,16,0.106,18,0.006,19,0.006,73,3.125,98,0.427,117,0.346,123,1.077,125,0.522,303,2.862,401,1.524,462,1.346,610,3.726,614,3.528,615,3.716,617,1.578,708,4.292,710,3.058,711,3.555,712,6.762,717,5.058,759,5.519,1017,5.474,2249,6.762]],["title/classes/UpdateEvidenceDto.html",[0,0.227,1147,3.004]],["body/classes/UpdateEvidenceDto.html",[0,0.338,2,1.344,3,0.118,4,0.107,5,0.083,7,0.167,8,0.007,16,0.118,17,3.868,18,0.006,19,0.006,142,1.905,392,2.389,720,4.289,722,5.644,1147,5.289,1155,4.954,2238,4.289,2250,6.158,2251,8.191]],["title/classes/UpdateIndicatorDto.html",[0,0.227,1412,3.322]],["body/classes/UpdateIndicatorDto.html",[0,0.35,2,1.085,3,0.095,4,0.086,5,0.067,7,0.147,8,0.007,16,0.095,18,0.006,19,0.006,98,0.465,117,0.465,123,1.174,125,0.569,128,1.364,129,1.98,186,2.288,401,1.261,437,4.373,462,1.261,602,3.328,603,3.328,615,3.211,617,1.423,678,3.376,679,3.465,680,3.465,681,4.638,683,4.25,684,4.25,688,5.118,695,4.975,704,3.577,749,4.56,751,4.975,752,4.975,753,4.975,754,4.975,755,6.375,1412,5.129,2252,7.67,2253,7.183,2254,5.605]],["title/classes/UpdateIndicatorPerRecopilationDto.html",[0,0.227,1443,3.322]],["body/classes/UpdateIndicatorPerRecopilationDto.html",[0,0.328,2,1.304,3,0.115,4,0.103,5,0.081,7,0.164,8,0.007,16,0.115,17,3.799,18,0.006,19,0.006,73,2.963,142,1.849,380,3.173,392,2.318,711,3.849,756,5.828,757,3.998,1021,4.162,1443,5.745,2238,5.32,2249,5.477]],["title/classes/UpdateInformationCollectionDto.html",[0,0.227,1549,3.322]],["body/classes/UpdateInformationCollectionDto.html",[0,0.376,2,1.214,3,0.107,4,0.096,5,0.075,7,0.17,8,0.007,16,0.107,17,3.639,18,0.006,19,0.006,98,0.349,117,0.349,123,0.88,125,0.427,142,1.721,392,2.159,462,1.353,596,3.858,617,1.591,699,4.251,700,5.565,703,6.839,704,3.19,760,5.65,762,3.831,763,5.1,1514,6.787,1549,5.502,1554,5.1,2238,5.157,2255,6.839,2256,6.269]],["title/classes/UpdateNotificationDto.html",[0,0.227,2257,3.785]],["body/classes/UpdateNotificationDto.html",[0,0.338,2,1.344,3,0.118,4,0.107,5,0.083,7,0.167,8,0.007,16,0.118,17,3.868,18,0.006,19,0.006,142,1.905,392,2.389,775,4.699,777,5.644,1741,5.644,2238,4.289,2257,6.663,2258,6.158,2259,8.191]],["title/classes/UpdateRecopilationDto.html",[0,0.227,1980,3.322]],["body/classes/UpdateRecopilationDto.html",[0,0.382,2,1.245,3,0.11,4,0.099,5,0.077,7,0.172,8,0.007,16,0.11,17,3.695,18,0.006,19,0.006,98,0.358,117,0.358,123,0.903,125,0.438,142,1.765,245,1.87,392,2.214,401,1.374,462,1.374,617,1.632,704,3.239,711,3.675,796,4.354,1021,3.974,1980,5.587,2238,3.974,2241,5.706,2244,6.945,2260,6.945,2261,7.825,2262,6.429]],["title/classes/UpdateUserDto.html",[0,0.227,2263,3.322]],["body/classes/UpdateUserDto.html",[0,0.337,2,1.339,3,0.118,4,0.106,5,0.083,7,0.167,8,0.007,16,0.118,17,3.861,18,0.006,19,0.006,392,2.382,848,4.685,850,5.627,2238,4.276,2247,5.627,2248,5.627,2263,5.838,2264,6.14,2265,8.176,2266,5.627]],["title/entities/User.html",[11,2.026,458,1.712]],["body/entities/User.html",[0,0.224,3,0.078,4,0.07,5,0.055,7,0.147,8,0.008,10,1.26,11,2.739,13,2.836,14,2.963,16,0.078,18,0.005,19,0.005,98,0.51,103,2.166,105,4.345,117,0.35,123,1.201,125,0.582,128,1.083,186,2.162,187,1.688,242,4.634,244,5.116,245,1.591,246,5.124,247,4.261,401,1.104,458,2.314,459,2.369,462,1.104,469,3.959,477,4.436,571,6.58,574,2.836,576,3.47,577,5.838,579,2.531,581,4.803,600,4.609,601,3.888,857,5.838,867,6.369,881,4.491,1000,2.836,1131,4.06,1134,5.582,1136,4.072,1213,4.259,1715,5.478,2267,4.072,2268,4.588,2269,4.588,2270,4.588,2271,4.588,2272,6.289,2273,4.588,2274,4.588,2275,4.588,2276,4.588,2277,4.588,2278,4.588,2279,6.289]],["title/controllers/UsersController.html",[111,1.303,2280,3.527]],["body/controllers/UsersController.html",[0,0.169,3,0.059,4,0.053,5,0.042,7,0.178,8,0.008,16,0.059,18,0.004,19,0.004,52,0.61,94,0.848,97,1.74,98,0.439,111,0.973,113,1.055,115,1.513,117,0.193,118,1.259,119,2.373,123,1.069,125,0.518,127,1.823,128,1.311,129,1.656,130,1.823,131,1.829,132,2.663,133,2.582,134,1.917,136,1.739,141,1.513,142,0.954,150,1.739,151,1.122,157,1.416,187,2.262,245,1.611,279,1.688,287,2.065,288,1.451,289,2.152,290,2.152,296,1.688,312,1.739,313,2.305,314,1.853,315,3.338,318,1.278,320,1.403,321,1.077,322,1.666,323,1.553,324,1.553,325,1.553,326,1.513,327,1.641,328,1.122,329,1.171,330,1.122,331,1.738,332,1.171,333,1.596,334,1.688,335,1.553,336,1.688,339,1.945,340,1.077,341,1.867,342,1.553,343,1.388,344,1.701,345,1.553,346,1.631,347,1.666,355,1.986,364,1.986,392,1.775,485,2.368,486,1.986,487,2.189,488,2.749,492,1.338,495,2.663,498,1.986,503,3.061,848,5.156,899,2.244,903,2.353,1000,3.801,1325,6.622,1327,2.826,1645,2.481,2263,5.781,2266,4.195,2280,3.909,2281,3.084,2282,4.577,2283,3.084,2284,3.474,2285,3.474,2286,3.474,2287,3.474,2288,3.474,2289,5.156,2290,5.156,2291,3.474,2292,3.474,2293,3.474,2294,3.474,2295,3.474,2296,4.164,2297,3.084,2298,3.474,2299,3.474,2300,3.474,2301,3.474,2302,3.474,2303,3.474,2304,3.474,2305,3.474,2306,3.474,2307,3.474,2308,3.474,2309,3.474,2310,3.474]],["title/modules/UsersModule.html",[20,1.412,45,3.322]],["body/modules/UsersModule.html",[0,0.246,1,4.324,3,0.086,4,0.077,5,0.061,7,0.19,8,0.008,11,2.916,16,0.086,18,0.005,19,0.005,20,2.284,22,2.137,23,2.137,24,2.251,25,2.251,26,2.137,27,3.364,28,2.994,40,5.815,45,6.595,47,2.994,48,2.251,49,2.251,51,3.075,52,0.884,53,3.162,54,1.468,73,2.306,113,2.033,388,2.778,622,2.378,663,4.14,710,2.464,971,3.353,974,2.778,975,2.778,991,5.705,998,5.815,999,4.469,1084,4.096,1196,4.736,1215,3.41,2280,5.705,2296,5.815,2297,4.469,2311,4.469,2312,4.469,2313,5.035,2314,5.035,2315,5.035,2316,4.469,2317,4.469,2318,4.469,2319,5.035,2320,5.035]],["title/injectables/UsersService.html",[188,1.158,2296,3.151]],["body/injectables/UsersService.html",[0,0.131,1,1.735,3,0.046,4,0.041,5,0.032,7,0.177,8,0.008,10,0.738,11,3.548,13,1.661,14,1.735,16,0.046,18,0.003,19,0.003,52,0.472,54,0.783,94,1.957,97,1.786,98,0.446,103,0.925,117,0.15,118,1.034,119,2.43,125,0.522,127,1.786,128,1.284,129,1.622,130,1.786,131,2.046,157,2.323,171,2.883,173,1.397,186,1.357,188,1.054,231,1.085,233,2.385,234,3.422,236,3.759,238,1.14,239,3.445,240,2.186,245,1.702,247,4.083,251,2.385,254,2.385,256,2.037,257,2.037,258,1.918,259,2.037,260,1.918,261,2.037,262,2.037,263,2.037,264,1.82,265,4.653,287,1.286,288,0.903,289,1.34,290,1.34,318,0.989,320,1.085,321,0.833,322,0.868,328,0.868,329,0.905,330,0.868,331,1.427,332,0.905,339,1.34,340,0.833,341,1.591,342,1.201,343,1.14,344,1.397,346,1.34,347,1.368,392,1.458,401,1.431,414,1.234,415,1.234,416,1.201,427,1.269,428,1.269,429,1.269,430,1.269,485,2.019,486,1.631,487,1.798,488,1.893,492,1.035,494,1.67,497,1.945,500,2,590,1.918,663,1.661,710,1.558,848,4.658,1000,3.241,1037,4.264,1048,1.82,1084,2.186,1196,3.971,1215,1.82,1242,2.186,1243,4.264,1247,3.445,1681,2.385,2263,5.326,2266,3.445,2282,3.759,2283,3.759,2296,2.868,2316,2.385,2317,2.385,2318,2.385,2321,2.385,2322,4.235,2323,5.949,2324,5.242,2325,5.242,2326,2.687,2327,2.687,2328,4.235,2329,2.687,2330,2.687,2331,2.687,2332,2.687,2333,4.235,2334,2.687,2335,2.687,2336,2.687,2337,2.687,2338,2.385,2339,2.687,2340,2.687,2341,5.949,2342,7.198,2343,4.235,2344,5.242,2345,2.687,2346,6.877,2347,2.687,2348,2.687,2349,2.687,2350,2.687,2351,2.687,2352,2.687,2353,2.687,2354,2.687,2355,2.687,2356,6.473,2357,4.235,2358,2.687,2359,2.687,2360,2.687,2361,2.687,2362,2.687,2363,2.687,2364,2.385,2365,2.687]],["title/controllers/WordController.html",[111,1.303,2366,3.527]],["body/controllers/WordController.html",[0,0.241,3,0.084,4,0.076,5,0.059,7,0.169,8,0.008,16,0.084,18,0.005,19,0.005,52,0.867,94,1.614,98,0.368,111,1.383,113,1.499,115,2.15,117,0.275,118,1.614,119,2.046,123,0.693,125,0.336,127,1.182,128,0.85,129,1.073,130,1.182,141,2.15,142,1.355,150,2.471,151,1.595,155,3.343,157,1.815,159,2.931,160,4.476,162,2.399,186,2.21,264,4.476,279,2.399,296,2.399,303,2.856,313,2.207,333,2.267,334,2.399,335,2.207,336,2.399,372,3.343,590,3.525,923,3.743,2366,5.011,2367,4.382,2368,4.937,2369,6.613,2370,4.937,2371,8.295,2372,6.609,2373,4.937,2374,7.957,2375,5.046,2376,4.382,2377,4.937,2378,4.937,2379,4.937,2380,4.937,2381,4.937,2382,4.937,2383,4.382,2384,4.937,2385,4.937,2386,7.957,2387,4.937,2388,6.609,2389,4.937,2390,4.937,2391,4.382,2392,4.382,2393,4.382,2394,4.937,2395,4.937,2396,4.937,2397,4.937,2398,4.016,2399,4.937,2400,4.937,2401,4.937,2402,4.937,2403,4.382,2404,4.937]],["title/modules/WordModule.html",[20,1.412,46,3.322]],["body/modules/WordModule.html",[0,0.28,3,0.098,4,0.088,5,0.069,7,0.187,8,0.008,16,0.098,18,0.006,19,0.006,20,2.434,22,2.439,23,2.439,24,2.569,25,2.569,26,2.439,27,3.585,28,2.569,46,6.354,47,3.262,48,2.569,49,2.569,51,2.639,52,1.009,53,2.714,54,1.675,113,2.215,382,2.459,383,2.793,384,3.178,385,2.639,386,2.793,387,2.793,388,3.17,463,3.021,522,3.553,586,3.178,597,2.793,598,2.793,762,2.639,2366,6.08,2375,6.027,2376,5.101,2405,5.101,2406,5.101,2407,5.747,2408,5.747]],["title/injectables/WordService.html",[188,1.158,2375,3.151]],["body/injectables/WordService.html",[0,0.079,3,0.027,4,0.025,5,0.019,7,0.146,8,0.008,10,0.442,16,0.027,18,0.002,19,0.002,52,0.283,54,0.469,94,1.743,97,0.875,98,0.337,103,1.686,117,0.352,118,0.677,119,1.469,125,0.296,127,1.04,128,0.748,129,0.944,130,0.875,131,0.825,157,1.739,163,4.633,171,2.062,173,0.915,186,1.639,188,0.691,231,0.651,234,2.954,238,0.684,245,0.963,266,2.243,340,0.86,353,1.094,380,0.635,382,1.803,383,0.783,384,1.208,385,0.74,386,0.783,387,0.783,396,2.36,397,2.475,401,1.224,419,0.921,420,1.091,426,1.678,429,1.725,442,4.323,444,1.389,462,0.283,463,1.513,522,0.996,539,1.15,544,1.221,548,1.091,565,1.31,567,1.221,572,1.791,580,4.534,586,2.132,597,0.783,598,0.783,690,2.77,710,0.593,725,4.323,726,4.093,762,0.74,764,0.996,823,2.257,827,1.221,830,2.257,876,0.956,881,1.981,1051,1.15,1090,2.259,1093,2.763,1103,0.783,1203,1.715,1205,3.027,1234,1.091,1251,3.983,1252,1.429,1254,3.533,1255,1.429,1286,1.429,1287,2.257,1533,2.609,1576,1.31,1578,2.103,1588,1.221,1602,1.221,2094,1.429,2120,3.243,2177,2.257,2178,2.257,2179,4.926,2182,2.973,2195,3.243,2199,1.429,2369,2.462,2375,1.879,2383,2.462,2391,1.429,2392,1.429,2393,1.429,2398,1.31,2403,1.429,2409,1.429,2410,2.774,2411,1.611,2412,2.774,2413,1.611,2414,8.844,2415,1.611,2416,2.774,2417,1.611,2418,1.611,2419,1.611,2420,8.01,2421,4.897,2422,1.611,2423,1.611,2424,1.611,2425,1.611,2426,4.343,2427,4.343,2428,1.611,2429,1.611,2430,1.611,2431,1.611,2432,2.774,2433,1.611,2434,1.611,2435,1.611,2436,4.343,2437,4.343,2438,2.774,2439,2.774,2440,1.611,2441,2.774,2442,2.774,2443,1.611,2444,1.611,2445,1.611,2446,1.611,2447,1.611,2448,1.611,2449,2.774,2450,1.611,2451,1.611,2452,1.611,2453,1.611,2454,1.611,2455,1.611,2456,1.611,2457,1.611,2458,4.343,2459,1.611,2460,1.611,2461,1.611,2462,1.611,2463,1.611,2464,1.611,2465,3.654,2466,4.343,2467,6.055,2468,2.774,2469,1.611,2470,1.611,2471,5.352,2472,8.379,2473,7.931,2474,7.753,2475,7.931,2476,7.931,2477,4.897,2478,1.611,2479,2.774,2480,1.611,2481,3.654,2482,1.611,2483,2.774,2484,4.343,2485,4.343,2486,3.654,2487,4.343,2488,2.774,2489,3.654,2490,3.654,2491,1.611,2492,1.611,2493,1.611,2494,1.611,2495,2.774,2496,1.611,2497,1.611,2498,3.654,2499,1.611,2500,1.611,2501,1.611,2502,1.611,2503,1.611,2504,2.774,2505,2.774,2506,4.343,2507,2.774,2508,4.343,2509,1.611,2510,2.774,2511,2.774,2512,2.774,2513,1.611,2514,1.611,2515,1.611,2516,1.611,2517,1.611,2518,1.611,2519,1.611,2520,2.774,2521,2.774,2522,1.611,2523,1.611,2524,2.774,2525,1.611,2526,1.611,2527,1.611,2528,2.774,2529,1.611,2530,1.611,2531,1.611,2532,1.611,2533,1.611,2534,1.611,2535,1.611,2536,1.611]],["title/classes/WrongPasswordException.html",[0,0.227,143,3.322]],["body/classes/WrongPasswordException.html",[0,0.336,2,1.335,3,0.117,4,0.106,5,0.083,8,0.007,16,0.117,17,3.854,18,0.006,19,0.006,125,0.469,143,5.828,173,2.868,627,4.846,632,6.121,2537,7.244,2538,6.121,2539,6.896,2540,6.896,2541,6.896]],["title/coverage.html",[2542,5.165]],["body/coverage.html",[0,0.451,1,1.037,5,0.019,6,1.425,8,0.008,11,1.205,13,0.993,18,0.002,19,0.002,26,0.682,63,2.355,73,2.9,74,1.976,77,2.355,79,2.355,86,1.976,98,0.203,111,2.196,112,1.218,114,1.425,122,1.147,137,1.088,143,1.147,146,1.037,163,0.804,166,2.251,167,1.218,169,1.425,188,1.993,192,1.306,218,1.218,232,1.425,266,0.829,267,1.218,268,1.425,269,0.886,278,1.147,287,0.488,288,1.446,289,0.508,290,0.508,309,1.147,316,1.088,321,0.498,323,0.718,324,0.718,325,0.718,326,0.699,328,0.519,330,0.519,333,0.738,346,1.371,349,0.829,353,0.633,380,1.438,382,0.541,384,1.205,385,1.675,386,1.345,389,1.425,414,0.738,415,1.991,416,1.237,442,6.901,458,2.562,460,3.122,461,2.456,463,1.794,483,1.218,484,1.425,490,1.088,502,1.147,505,1.088,524,1.527,525,2.106,526,1.711,528,1.425,569,1.425,573,1.037,586,0.699,592,1.582,596,2.866,597,0.78,607,1.147,608,2.765,609,2.765,617,0.926,619,1.037,621,1.147,622,0.758,624,1.218,625,2.765,626,1.425,634,1.306,635,2.251,636,3.311,643,1.976,644,1.088,645,1.088,646,1.088,657,5.613,663,0.993,664,1.425,666,1.425,667,2.251,671,1.425,672,2.251,685,1.088,686,1.425,687,2.251,707,1.147,708,3.122,709,2.251,710,1.342,711,3.616,720,0.993,721,1.425,722,2.251,747,1.147,748,1.425,749,2.251,756,1.088,757,3.172,760,1.088,761,1.425,762,1.675,763,2.251,775,1.088,776,1.425,777,2.251,787,1.037,790,1.147,791,1.425,792,1.425,796,1.088,797,1.425,848,1.088,849,1.425,850,2.251,866,2.456,883,1.147,884,2.765,887,1.037,888,1.147,889,1.218,890,1.425,914,1.147,916,1.088,938,1.425,967,1.425,971,1.385,974,1.527,977,2.456,991,1.218,992,1.425,998,1.088,1000,0.993,1007,1.218,1008,2.251,1009,1.711,1017,1.147,1019,1.088,1034,2.251,1075,1.425,1090,0.993,1091,1.425,1093,1.429,1096,1.218,1097,1.425,1101,1.088,1103,0.78,1109,1.425,1120,2.456,1137,1.218,1138,1.425,1147,1.037,1153,1.088,1162,1.306,1163,1.306,1164,2.251,1194,1.088,1195,1.088,1196,0.886,1197,0.856,1199,1.218,1200,1.218,1203,0.993,1205,0.993,1213,0.886,1216,1.425,1295,1.976,1296,1.147,1298,1.425,1304,1.425,1315,1.306,1322,1.425,1325,1.218,1326,1.425,1327,1.306,1328,2.251,1330,1.306,1331,1.425,1344,1.425,1348,1.425,1357,1.425,1365,1.425,1381,2.456,1390,1.218,1391,1.425,1412,1.147,1414,1.088,1435,1.218,1443,1.147,1445,1.088,1472,1.425,1513,1.425,1531,1.218,1532,1.425,1533,1.147,1549,1.147,1552,1.088,1575,1.425,1631,1.425,1634,1.425,1649,1.425,1664,1.425,1665,1.425,1685,1.425,1695,1.306,1705,1.425,1715,1.088,1719,1.218,1720,1.425,1763,1.425,1799,1.425,1800,3.596,1806,3.499,1809,1.425,1812,1.425,1814,1.425,1817,1.425,1820,1.425,1822,1.425,1825,1.425,1828,1.425,1830,1.425,1832,1.425,1836,1.425,1837,1.425,1859,2.456,1867,1.218,1868,1.425,1875,1.088,1890,1.425,1922,1.425,1939,1.218,1940,1.425,1943,1.218,1944,1.425,1980,1.147,1986,1.088,2025,1.425,2142,1.425,2147,1.306,2153,1.306,2154,1.425,2155,1.425,2156,1.425,2174,1.218,2175,2.098,2176,1.425,2183,1.088,2194,1.425,2202,1.306,2203,2.251,2208,1.306,2237,1.425,2239,1.425,2245,1.425,2249,2.251,2250,1.425,2252,1.425,2255,1.425,2257,1.306,2258,1.425,2260,1.425,2263,1.147,2264,1.425,2267,2.456,2280,1.218,2281,1.425,2296,1.088,2321,1.425,2366,1.218,2367,1.425,2375,1.088,2409,1.425,2537,1.425,2538,1.425,2542,1.306,2543,1.606,2544,1.606,2545,8.375,2546,6.964,2547,7.747,2548,2.456,2549,8.209,2550,9.098,2551,2.456,2552,1.306,2553,5.724,2554,4.335,2555,1.306,2556,5.724,2557,6.777,2558,6.324,2559,1.306,2560,3.646,2561,1.306,2562,1.218,2563,1.306,2564,1.306,2565,1.425,2566,1.425,2567,2.251,2568,1.306,2569,1.306,2570,2.767,2571,2.251,2572,1.425,2573,1.425,2574,1.425,2575,2.456,2576,3.526,2577,1.425,2578,1.425,2579,1.425,2580,1.425,2581,3.236,2582,1.425,2583,1.425,2584,1.425,2585,1.425,2586,1.606,2587,1.606]],["title/dependencies.html",[23,2.375,2588,3.448]],["body/dependencies.html",[0,0.35,5,0.067,8,0.008,10,1.539,18,0.006,19,0.006,23,2.379,52,0.984,54,1.634,59,4.638,60,3.796,82,4.975,142,1.539,184,4.002,189,4.25,190,4.25,191,4.638,201,4.975,239,4.56,247,3.328,576,3.092,617,1.423,618,3.205,818,4.975,1159,4.975,1161,4.975,1675,4.56,2164,4.975,2247,4.56,2248,4.56,2338,4.975,2398,4.56,2589,5.605,2590,7.926,2591,5.605,2592,5.605,2593,5.605,2594,5.605,2595,5.605,2596,5.605,2597,5.605,2598,5.605,2599,5.605,2600,5.605,2601,5.605,2602,5.605,2603,5.605,2604,5.605,2605,5.605,2606,5.605,2607,5.605,2608,5.605,2609,5.605,2610,5.605,2611,5.605,2612,5.605,2613,5.605,2614,5.605,2615,5.605,2616,5.605,2617,5.605,2618,5.605,2619,5.605,2620,5.605,2621,5.605,2622,5.605,2623,5.605,2624,5.605,2625,5.605,2626,5.605,2627,5.605]],["title/miscellaneous/enumerations.html",[2628,2.402,2629,4.966]],["body/miscellaneous/enumerations.html",[1,5.205,8,0.007,18,0.006,19,0.006,117,0.376,335,3.603,663,4.983,710,2.966,737,5.205,1090,4.983,1203,4.983,1205,4.983,1302,6.608,2562,5.12,2628,4.175,2629,5.994,2630,5.494,2631,6.753,2632,6.753]],["title/miscellaneous/functions.html",[2628,2.402,2633,4.966]],["body/miscellaneous/functions.html",[8,0.007,18,0.005,19,0.005,26,3.121,98,0.49,117,0.268,127,2.11,128,1.516,129,1.916,130,1.761,136,3.252,186,2.374,242,3.107,247,3.857,266,4.066,323,2.904,324,2.151,325,2.904,326,3.202,341,1.972,346,2.74,349,2.484,401,1.488,414,2.983,415,2.983,430,2.272,617,1.649,625,3.648,628,4.27,635,5.284,636,4.399,644,4.399,645,3.258,646,4.399,658,4.27,718,4.925,1296,3.435,1315,5.284,1317,4.27,1340,3.648,1695,5.284,1838,5.765,1841,5.765,1846,5.765,2166,3.914,2173,3.914,2565,4.27,2566,5.765,2572,5.765,2573,4.27,2574,5.765,2581,6.989,2582,5.765,2583,5.765,2584,5.765,2585,5.765,2628,2.974,2633,4.27,2634,4.811,2635,6.496,2636,4.811,2637,4.811,2638,7.874,2639,6.496,2640,4.811,2641,4.811,2642,4.811,2643,6.496,2644,4.811,2645,4.811]],["title/index.html",[117,0.216,2646,3.885,2647,3.885]],["body/index.html",[4,0.088,8,0.007,18,0.006,19,0.006,234,2.373,260,4.093,724,2.96,1308,5.088,2234,5.088,2542,4.663,2648,5.732,2649,5.732,2650,7.286,2651,5.732,2652,5.732,2653,5.732,2654,5.732,2655,5.732,2656,8.01,2657,5.732,2658,5.732,2659,8.01,2660,9.035,2661,5.732,2662,5.732,2663,5.732,2664,8.893,2665,5.732,2666,5.732,2667,7.286,2668,5.732,2669,5.732,2670,5.732,2671,5.732,2672,7.286,2673,7.286,2674,5.732,2675,5.732,2676,5.732,2677,7.286,2678,7.286,2679,5.732,2680,5.732,2681,5.732,2682,5.732,2683,5.732,2684,5.088,2685,5.732,2686,5.732,2687,5.732,2688,5.088,2689,5.732,2690,5.732,2691,5.732,2692,5.732,2693,5.732,2694,5.088,2695,5.732,2696,5.732,2697,5.732,2698,5.732,2699,5.732,2700,5.732,2701,5.088]],["title/modules.html",[22,2.695]],["body/modules.html",[8,0.006,18,0.006,19,0.006,21,4.447,22,2.489,31,4.188,32,4.188,33,4.188,34,4.188,35,4.188,36,4.188,37,4.188,38,4.188,39,4.188,40,3.972,41,4.188,42,4.188,43,4.188,44,4.188,45,4.188,46,4.188,2684,8.519,2702,9.598,2703,9.598,2704,9.598]],["title/overview.html",[2705,5.635]],["body/overview.html",[2,0.72,8,0.008,18,0.004,19,0.004,20,1.129,21,7.256,22,1.578,23,1.578,24,1.662,25,1.662,26,1.578,27,1.662,28,1.662,29,3.3,30,3.3,31,5.336,32,5.336,33,5.336,34,5.336,35,5.336,36,6.415,37,5.336,38,5.336,39,5.75,40,5.283,41,5.336,42,6.106,43,5.57,44,5.336,45,6.187,46,5.336,47,2.423,48,1.662,49,1.662,113,1.129,137,4.332,168,3.025,210,3.3,211,3.3,231,1.502,316,4.332,375,3.3,376,3.3,459,1.92,505,4.332,517,3.3,518,3.3,916,4.332,932,3.3,933,3.3,998,4.332,1019,4.332,1028,3.3,1029,3.3,1101,4.332,1153,4.332,1192,3.3,1193,3.3,1194,4.332,1195,4.332,1196,4.303,1197,4.16,1297,3.025,1414,4.332,1429,3.3,1430,3.3,1445,4.332,1452,3.3,1453,3.3,1552,4.332,1570,3.3,1571,3.3,1813,4.811,1875,4.332,1885,3.3,1886,3.3,1986,4.332,2021,3.3,2022,3.3,2183,4.332,2190,3.3,2191,3.3,2296,4.332,2311,3.3,2312,3.3,2364,3.3,2375,4.332,2405,3.3,2406,3.3,2705,3.3,2706,3.718,2707,3.718,2708,3.718,2709,3.718]],["title/properties.html",[462,0.982,2588,3.448]],["body/properties.html",[8,0.007,18,0.007,19,0.007,462,1.277,724,3.755,2694,6.453,2701,6.453,2710,7.271,2711,7.271,2712,7.271]],["title/miscellaneous/typealiases.html",[2628,2.402,2713,5.595]],["body/miscellaneous/typealiases.html",[8,0.006,18,0.006,19,0.006,63,3.807,73,2.794,77,3.807,79,3.807,98,0.452,117,0.328,460,3.044,596,2.952,708,3.044,782,6.034,857,6.034,1299,6.583,1301,6.583,1801,5.167,1941,6.583,2166,6.034,2167,5.233,2552,4.796,2555,6.034,2559,4.796,2561,6.034,2562,4.47,2563,4.796,2564,6.034,2567,4.796,2568,4.796,2569,4.796,2571,4.796,2576,4.796,2628,3.645,2630,4.796,2714,5.896,2715,6.583,2716,5.896,2717,7.417,2718,6.583,2719,5.233,2720,5.233,2721,5.233,2722,5.233,2723,5.233,2724,5.233,2725,5.233,2726,5.233,2727,6.583]],["title/miscellaneous/variables.html",[2628,2.402,2728,4.966]],["body/miscellaneous/variables.html",[1,3.227,5,0.06,8,0.008,13,3.09,18,0.004,19,0.004,63,2.152,73,2.065,77,2.152,79,2.152,94,2.169,97,0.798,98,0.494,103,1.721,105,1.619,117,0.278,128,1.147,146,3.227,186,1.552,192,4.066,194,2.957,242,2.152,245,1.847,246,2.379,333,3.279,335,1.489,416,2.234,437,3.309,460,1.721,592,2.857,596,1.668,636,3.385,663,3.09,688,3.227,689,2.711,690,2.526,708,1.721,710,1.839,724,1.721,764,2.06,787,3.227,798,2.379,799,2.379,800,2.379,876,5.478,1121,3.385,1162,4.066,1163,4.066,1164,2.711,1173,4.436,1179,2.711,1246,2.957,1302,6.588,1551,3.789,1706,2.711,1806,4.731,2048,2.957,2147,4.066,2163,2.711,2203,2.711,2208,4.066,2209,2.957,2548,2.957,2551,2.957,2552,2.711,2555,4.066,2559,2.711,2561,4.066,2562,2.526,2563,2.711,2564,4.066,2567,2.711,2568,2.711,2569,2.711,2571,2.711,2575,5.323,2576,2.711,2577,4.436,2578,4.436,2579,4.436,2580,4.436,2628,2.06,2630,2.711,2688,2.957,2715,5.914,2718,4.436,2719,2.957,2720,2.957,2721,2.957,2722,2.957,2723,2.957,2724,2.957,2725,2.957,2726,2.957,2727,4.436,2728,2.957,2729,4.998,2730,4.998,2731,3.332,2732,4.998,2733,3.332,2734,3.332,2735,3.332,2736,3.332,2737,4.998,2738,3.332,2739,3.332,2740,4.998,2741,3.332,2742,4.998,2743,3.332,2744,3.332,2745,3.332,2746,3.332,2747,3.332,2748,4.998,2749,4.998,2750,4.998,2751,4.998,2752,4.998,2753,8.458,2754,3.332]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"classes/Admin.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/Coordinator.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"classes/WrongPasswordException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":442,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/IndicatorsService.html":{},"injectables/RecopilationsService.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2711,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2598,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":2622,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":2627,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2597,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2550,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2560,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2570,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2545,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2547,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2546,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2558,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2556,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2557,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2553,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2554,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":340,"title":{"classes/OrderByParamDto-1.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{}}}],["1.4.11",{"_index":2613,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":2611,"title":{},"body":{"dependencies.html":{}}}],["1.7.1",{"_index":2604,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":342,"title":{"classes/OrderByParamDto-10.html":{}},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["10.0.0",{"_index":2590,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":2595,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":2591,"title":{},"body":{"dependencies.html":{}}}],["10d",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["115",{"_index":2514,"title":{},"body":{"injectables/WordService.html":{}}}],["12",{"_index":2364,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{}}}],["16).tostring(16",{"_index":2746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["168",{"_index":2488,"title":{},"body":{"injectables/WordService.html":{}}}],["17",{"_index":2706,"title":{},"body":{"overview.html":{}}}],["19",{"_index":2707,"title":{},"body":{"overview.html":{}}}],["2",{"_index":1813,"title":{"classes/OrderByParamDto-2.html":{}},"body":{"overview.html":{}}}],["2.0.2",{"_index":2589,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":2603,"title":{},"body":{"dependencies.html":{}}}],["2.88.2",{"_index":2623,"title":{},"body":{"dependencies.html":{}}}],["202425/tree/main/apps/server/src/shared/filtering",{"_index":1323,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["202425/tree/main/apps/server/src/shared/filtering).'})@transform(segment",{"_index":1310,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["2097152",{"_index":1176,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["21",{"_index":2708,"title":{},"body":{"overview.html":{}}}],["22",{"_index":2474,"title":{},"body":{"injectables/WordService.html":{}}}],["23505",{"_index":2209,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["255",{"_index":1367,"title":{},"body":{"entities/Indicator.html":{}}}],["3",{"_index":1816,"title":{"classes/OrderByParamDto-3.html":{}},"body":{}}],["3.6.0",{"_index":2599,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":1935,"title":{},"body":{"entities/Recopilation.html":{}}}],["300",{"_index":2486,"title":{},"body":{"injectables/WordService.html":{}}}],["36",{"_index":2524,"title":{},"body":{"injectables/WordService.html":{}}}],["4",{"_index":1819,"title":{"classes/OrderByParamDto-4.html":{}},"body":{}}],["4.0.1",{"_index":2617,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2593,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":2610,"title":{},"body":{"dependencies.html":{}}}],["4.19.2",{"_index":2601,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":2608,"title":{},"body":{"dependencies.html":{}}}],["4.7.8",{"_index":2606,"title":{},"body":{"dependencies.html":{}}}],["43",{"_index":2503,"title":{},"body":{"injectables/WordService.html":{}}}],["5",{"_index":1821,"title":{"classes/OrderByParamDto-5.html":{}},"body":{}}],["5.1.1",{"_index":2596,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1824,"title":{"classes/OrderByParamDto-6.html":{}},"body":{}}],["6.9.14",{"_index":2615,"title":{},"body":{"dependencies.html":{}}}],["64",{"_index":2709,"title":{},"body":{"overview.html":{}}}],["7",{"_index":1827,"title":{"classes/OrderByParamDto-7.html":{}},"body":{}}],["7.3.1",{"_index":2594,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2624,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1829,"title":{"classes/OrderByParamDto-8.html":{}},"body":{}}],["8.11.5",{"_index":2619,"title":{},"body":{"dependencies.html":{}}}],["8.5.0",{"_index":2600,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":2515,"title":{},"body":{"injectables/WordService.html":{}}}],["9",{"_index":1831,"title":{"classes/OrderByParamDto-9.html":{}},"body":{}}],["_",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsService.html":{},"injectables/RecopilationsService.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{}}}],["a.id",{"_index":2080,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["abstract",{"_index":1136,"title":{},"body":{"entities/Evidence.html":{},"entities/User.html":{}}}],["access",{"_index":2400,"title":{},"body":{"controllers/WordController.html":{}}}],["activerecopilations",{"_index":1995,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["actual",{"_index":838,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["address",{"_index":2533,"title":{},"body":{"injectables/WordService.html":{}}}],["admin",{"_index":1,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["adminrepository",{"_index":2324,"title":{},"body":{"injectables/UsersService.html":{}}}],["aid.department.id",{"_index":1065,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["algo",{"_index":2229,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["alias",{"_index":688,"title":{},"body":{"classes/CreateCriteriaDto.html":{},"classes/CreateIndicatorDto.html":{},"entities/Criteria.html":{},"entities/Indicator.html":{},"injectables/IndicatorsService.html":{},"classes/UpdateIndicatorDto.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":2714,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":2508,"title":{},"body":{"injectables/WordService.html":{}}}],["alignment",{"_index":2520,"title":{},"body":{"injectables/WordService.html":{}}}],["allcategories",{"_index":2074,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["allcategories.map(async",{"_index":2084,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["alreadyinsertedcategory",{"_index":1500,"title":{},"body":{"injectables/IndicatorsService.html":{},"injectables/RecopilationsService.html":{}}}],["alreadyinsertedcategory.criteria.push(cc.criterion",{"_index":2072,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["alreadyinsertedcategory.criteria.push(criterion",{"_index":1504,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["alreadyinserteddepartment",{"_index":1592,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["alreadyinserteddepartment.informationcollections.push(ic",{"_index":1596,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["alreadyinserteddepartments",{"_index":1059,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["alreadyinserteddepartments.some((aid",{"_index":1064,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["amazing",{"_index":2685,"title":{},"body":{"index.html":{}}}],["andrés",{"_index":2529,"title":{},"body":{"injectables/WordService.html":{}}}],["answer/:recopilationid/:categoryid",{"_index":1542,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["answer/:recopilationid/:categoryid/:departmentid",{"_index":1545,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["answers",{"_index":2083,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["api",{"_index":1321,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["apibody",{"_index":1156,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["apiconsumes",{"_index":1157,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["apiconsumes('multipart/form",{"_index":1177,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["apiproperty",{"_index":1319,"title":{},"body":{"classes/FiltersSegmentDto.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{}}}],["apiproperty({enum",{"_index":1802,"title":{},"body":{"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{}}}],["apiproperty({type",{"_index":1305,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["apipropertyoptional",{"_index":1805,"title":{},"body":{"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginationParams.html":{}}}],["apipropertyoptional()@min(1)@isnumber()@type(undefined)@isoptional",{"_index":1851,"title":{},"body":{"classes/PaginationParams.html":{}}}],["apitags",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{}}}],["apitags('auth",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('categories",{"_index":337,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apitags('categorized",{"_index":508,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["apitags('criteria",{"_index":919,"title":{},"body":{"controllers/CriterionController.html":{}}}],["apitags('departments",{"_index":1001,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{}}}],["apitags('documents",{"_index":1104,"title":{},"body":{"controllers/DocumentsController.html":{}}}],["apitags('evidences",{"_index":1166,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["apitags('images",{"_index":1352,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apitags('indicators",{"_index":1417,"title":{},"body":{"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{}}}],["apitags('information",{"_index":1555,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["apitags('links",{"_index":1641,"title":{},"body":{"controllers/LinksController.html":{}}}],["apitags('notifications",{"_index":1742,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["apitags('recommendations",{"_index":1878,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["apitags('recopilations",{"_index":1991,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["apitags('summary",{"_index":2185,"title":{},"body":{"controllers/SummaryInformationController.html":{}}}],["apitags('users",{"_index":2299,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('word",{"_index":2377,"title":{},"body":{"controllers/WordController.html":{}}}],["app",{"_index":2662,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["application/docx",{"_index":2387,"title":{},"body":{"controllers/WordController.html":{}}}],["applications",{"_index":2655,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":21,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["aqu",{"_index":822,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["argumentshost",{"_index":640,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeORMExceptionFilter.html":{}}}],["array",{"_index":719,"title":{},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{}}}],["array'})@isarray()@isnotempty",{"_index":715,"title":{},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{}}}],["array(4",{"_index":2743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayinfcol",{"_index":2435,"title":{},"body":{"injectables/WordService.html":{}}}],["arrayinfcol.foreach((infcol",{"_index":2446,"title":{},"body":{"injectables/WordService.html":{}}}],["arrayinfcol.foreach((informationcollection",{"_index":2443,"title":{},"body":{"injectables/WordService.html":{}}}],["arraynotempty",{"_index":612,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CriteriaToRelate.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/IndicatorToRelate.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{}}}],["asc",{"_index":345,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"classes/OrderTypeParamDto.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{}}}],["asociada",{"_index":1289,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["async",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"injectables/MailsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{}}}],["attachment",{"_index":2389,"title":{},"body":{"controllers/WordController.html":{}}}],["auth",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"modules/MailsModule.html":{}}}],["auth.controller",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.dto.ts",{"_index":1665,"title":{},"body":{"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["auth.dto.ts:10",{"_index":1669,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["auth.dto.ts:6",{"_index":1667,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["auth.guard",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/role.enum",{"_index":336,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{}}}],["auth/roles.decorator",{"_index":334,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{}}}],["authcontroller",{"_index":112,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":167,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":31,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2694,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":137,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"injectables/MailsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{}}}],["b",{"_index":2079,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["b.id",{"_index":2081,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["backers",{"_index":2686,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(pass",{"_index":2362,"title":{},"body":{"injectables/UsersService.html":{}}}],["bearer",{"_index":209,"title":{},"body":{"guards/AuthGuard.html":{}}}],["bello",{"_index":2391,"title":{},"body":{"controllers/WordController.html":{},"injectables/WordService.html":{}}}],["binary",{"_index":1180,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["body",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["bold",{"_index":2477,"title":{},"body":{"injectables/WordService.html":{}}}],["bool",{"_index":1523,"title":{},"body":{"entities/InformationCollection.html":{}}}],["boolean",{"_index":699,"title":{},"body":{"classes/CreateCriteriaDto.html":{},"entities/Criteria.html":{},"entities/InformationCollection.html":{},"injectables/InformationCollectionsService.html":{},"entities/Notification.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedItems.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"guards/RolesGuard.html":{},"classes/UpdateInformationCollectionDto.html":{}}}],["bootstrap",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":1247,"title":{},"body":{"injectables/EvidencesService.html":{},"classes/TypeORMExceptionFilter.html":{},"injectables/UsersService.html":{}}}],["browse",{"_index":2704,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2702,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":2383,"title":{},"body":{"controllers/WordController.html":{},"injectables/WordService.html":{}}}],["buffer.buffer.length",{"_index":2399,"title":{},"body":{"controllers/WordController.html":{}}}],["buffer.criterionname",{"_index":2397,"title":{},"body":{"controllers/WordController.html":{}}}],["buffer.index",{"_index":2395,"title":{},"body":{"controllers/WordController.html":{}}}],["buffer.subindex",{"_index":2396,"title":{},"body":{"controllers/WordController.html":{}}}],["builder.ts",{"_index":2156,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{},"coverage.html":{}}}],["builder.ts:16",{"_index":2160,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["builder/successful",{"_index":2155,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{},"coverage.html":{}}}],["building",{"_index":2651,"title":{},"body":{"index.html":{}}}],["c",{"_index":455,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/IndicatorsService.html":{},"injectables/RecopilationsService.html":{}}}],["c.categoryid",{"_index":2107,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["c.criteria.id",{"_index":966,"title":{},"body":{"injectables/CriterionService.html":{}}}],["c.criteriaid",{"_index":2106,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["c.helptext",{"_index":449,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["c.id",{"_index":1502,"title":{},"body":{"injectables/IndicatorsService.html":{},"injectables/RecopilationsService.html":{}}}],["c.indicatorindex",{"_index":450,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["c.name",{"_index":448,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["cada",{"_index":2454,"title":{},"body":{"injectables/WordService.html":{}}}],["calibri",{"_index":2476,"title":{},"body":{"injectables/WordService.html":{}}}],["callback",{"_index":2737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(new",{"_index":2739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":2740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callhandler",{"_index":2159,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["canactivate",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["cannotcreateentityidmaperror",{"_index":2205,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["cascade",{"_index":473,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Evidence.html":{},"entities/IndicatorPerRecopilation.html":{},"entities/Recommendation.html":{}}}],["case",{"_index":1243,"title":{},"body":{"injectables/EvidencesService.html":{},"classes/TypeORMExceptionFilter.html":{},"injectables/UsersService.html":{}}}],["cat",{"_index":2123,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["cat.categoryid",{"_index":2125,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["catch",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"controllers/CriterionController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"classes/TypeORMExceptionFilter.html":{},"controllers/WordController.html":{}}}],["catch(classvalidatorvalidationsexception",{"_index":648,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{}}}],["catch(exception",{"_index":638,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeORMExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1334,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(typeormerror",{"_index":2210,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["categoria",{"_index":1918,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["categories",{"_index":269,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryToRecommend.html":{},"classes/DepartmentToBeRecommended.html":{},"entities/Indicator.html":{},"injectables/IndicatorsService.html":{},"classes/OrderByParamDto-2.html":{},"classes/RecommendCategoriesDto.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"coverage.html":{}}}],["categories.constants",{"_index":1815,"title":{},"body":{"classes/OrderByParamDto-2.html":{}}}],["categories.controller",{"_index":378,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.dto",{"_index":1989,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["categories.dto.ts",{"_index":609,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/RecommendCategoriesDto.html":{},"coverage.html":{}}}],["categories.dto.ts:13",{"_index":1858,"title":{},"body":{"classes/RecommendCategoriesDto.html":{}}}],["categories.dto.ts:18",{"_index":1857,"title":{},"body":{"classes/RecommendCategoriesDto.html":{}}}],["categories.dto.ts:24",{"_index":990,"title":{},"body":{"classes/DepartmentToBeRecommended.html":{}}}],["categories.dto.ts:31",{"_index":989,"title":{},"body":{"classes/DepartmentToBeRecommended.html":{}}}],["categories.dto.ts:37",{"_index":611,"title":{},"body":{"classes/CategoryToRecommend.html":{}}}],["categories.find",{"_index":1501,"title":{},"body":{"injectables/IndicatorsService.html":{},"injectables/RecopilationsService.html":{}}}],["categories.push",{"_index":1505,"title":{},"body":{"injectables/IndicatorsService.html":{},"injectables/RecopilationsService.html":{}}}],["categories.service",{"_index":317,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/entities/category.entity",{"_index":523,"title":{},"body":{"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{}}}],["categoriesbyindicator",{"_index":390,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoriesbyindicator(indicatorid",{"_index":400,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoriesbyrecopilation",{"_index":391,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoriesbyrecopilation(recopilationid",{"_index":404,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoriescontroller",{"_index":267,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":32,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesrepository",{"_index":1892,"title":{},"body":{"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{}}}],["categoriesservice",{"_index":316,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["categorized",{"_index":385,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"classes/OrderByParamDto-1.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["categorizedcriteria",{"_index":384,"title":{"entities/CategorizedCriteria.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["categorizedcriteria).category",{"_index":2201,"title":{},"body":{"injectables/SummaryInformationService.html":{}}}],["categorizedcriteria).recopilation",{"_index":2200,"title":{},"body":{"injectables/SummaryInformationService.html":{}}}],["categorizedcriteria.category",{"_index":567,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"injectables/RecopilationsService.html":{},"injectables/WordService.html":{}}}],["categorizedcriteria.criteria",{"_index":566,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"entities/Criteria.html":{}}}],["categorizedcriteria.foreach((cc",{"_index":2070,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["categorizedcriteria.recopilation",{"_index":565,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"entities/Recopilation.html":{},"injectables/WordService.html":{}}}],["categorizedcriteriacontroller",{"_index":483,"title":{"controllers/CategorizedCriteriaController.html":{}},"body":{"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"coverage.html":{}}}],["categorizedcriteriamodule",{"_index":33,"title":{"modules/CategorizedCriteriaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules.html":{},"overview.html":{}}}],["categorizedcriteriarepository",{"_index":397,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["categorizedcriterias",{"_index":963,"title":{},"body":{"injectables/CriterionService.html":{}}}],["categorizedcriteriaservice",{"_index":505,"title":{"injectables/CategorizedCriteriaService.html":{}},"body":{"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"coverage.html":{},"overview.html":{}}}],["categorizedcriteriatoinsert",{"_index":2101,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["categorizedcriteriatoinsert.push(categorizedcriteria",{"_index":2113,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["categorizedcriterion",{"_index":570,"title":{},"body":{"entities/Category.html":{},"entities/Criteria.html":{},"injectables/IndicatorsService.html":{},"entities/Recopilation.html":{},"injectables/RecopilationsService.html":{}}}],["categorizedcriterion.category",{"_index":2056,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["categorizedcriterion.criteria.indicator",{"_index":2055,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["category",{"_index":353,"title":{"entities/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"injectables/EvidencesService.html":{},"entities/Indicator.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"entities/Recommendation.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"interfaces/RecopilationDto.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["category.categorizedcriterion",{"_index":465,"title":{},"body":{"entities/CategorizedCriteria.html":{}}}],["category.dto",{"_index":319,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["category.dto.ts",{"_index":672,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:10",{"_index":2240,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:14",{"_index":2242,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:15",{"_index":677,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:21",{"_index":674,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:25",{"_index":675,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:6",{"_index":2243,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.id",{"_index":1503,"title":{},"body":{"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/RecopilationsService.html":{}}}],["category.indicator",{"_index":1369,"title":{},"body":{"entities/Indicator.html":{}}}],["category.indicator.index",{"_index":557,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["category.informationcollections",{"_index":1515,"title":{},"body":{"entities/InformationCollection.html":{}}}],["category.name",{"_index":1604,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["category.recommendations",{"_index":1860,"title":{},"body":{"entities/Recommendation.html":{}}}],["categoryid",{"_index":546,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"classes/CategoryToRecommend.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CriteriaToRelate.html":{},"classes/DepartmentToBeRecommended.html":{},"injectables/EvidencesService.html":{},"classes/IndicatorToRelate.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"classes/RecommendCategoriesDto.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{}}}],["categoryname",{"_index":1260,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/RecommendationsService.html":{}}}],["categoryrepository",{"_index":399,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/InformationCollectionsService.html":{}}}],["categorytorecommend",{"_index":607,"title":{"classes/CategoryToRecommend.html":{}},"body":{"classes/CategoryToRecommend.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/RecommendCategoriesDto.html":{},"coverage.html":{}}}],["categoría",{"_index":1290,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/RecommendationsService.html":{}}}],["catholic",{"_index":2393,"title":{},"body":{"controllers/WordController.html":{},"injectables/WordService.html":{}}}],["cc",{"_index":453,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/IndicatorsService.html":{}}}],["cc.category",{"_index":1498,"title":{},"body":{"injectables/IndicatorsService.html":{},"injectables/RecopilationsService.html":{}}}],["cc.category.id",{"_index":2071,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["cc.criteria",{"_index":1499,"title":{},"body":{"injectables/IndicatorsService.html":{},"injectables/RecopilationsService.html":{}}}],["cc.criteria.indicator.index",{"_index":1496,"title":{},"body":{"injectables/IndicatorsService.html":{},"injectables/RecopilationsService.html":{}}}],["cc.criterion",{"_index":2073,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["center",{"_index":2521,"title":{},"body":{"injectables/WordService.html":{}}}],["change",{"_index":1794,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["change.seen",{"_index":1795,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["change/:id",{"_index":2290,"title":{},"body":{"controllers/UsersController.html":{}}}],["childentity",{"_index":9,"title":{},"body":{"classes/Admin.html":{},"classes/Coordinator.html":{},"classes/Department.html":{},"classes/Document.html":{},"classes/Image.html":{},"classes/Link.html":{}}}],["childentity(evidencetype.document",{"_index":1095,"title":{},"body":{"classes/Document.html":{}}}],["childentity(evidencetype.image",{"_index":1347,"title":{},"body":{"classes/Image.html":{}}}],["childentity(evidencetype.link",{"_index":1633,"title":{},"body":{"classes/Link.html":{}}}],["childentity(user_types.admin",{"_index":15,"title":{},"body":{"classes/Admin.html":{}}}],["childentity(user_types.coordinator",{"_index":665,"title":{},"body":{"classes/Coordinator.html":{}}}],["childentity(user_types.department",{"_index":976,"title":{},"body":{"classes/Department.html":{}}}],["children",{"_index":2472,"title":{},"body":{"injectables/WordService.html":{}}}],["class",{"_index":0,"title":{"classes/Admin.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/Coordinator.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"classes/CriteriaToRelate.html":{},"classes/Department.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/Document.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"classes/IndicatorToRelate.html":{},"classes/Link.html":{},"classes/LoginAuthDto.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"classes/WrongPasswordException.html":{}},"body":{"classes/Admin.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/Coordinator.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"classes/WrongPasswordException.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Admin.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/Coordinator.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"classes/CriteriaToRelate.html":{},"classes/Department.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/Document.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"classes/IndicatorToRelate.html":{},"classes/Link.html":{},"classes/LoginAuthDto.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"classes/WrongPasswordException.html":{},"overview.html":{}}}],["classvalidatorvalidationsexception",{"_index":624,"title":{"classes/ClassValidatorValidationsException.html":{}},"body":{"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"coverage.html":{}}}],["classvalidatorvalidationsexceptionfilter",{"_index":634,"title":{"classes/ClassValidatorValidationsExceptionFilter.html":{}},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"coverage.html":{}}}],["cluster_appmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":375,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":376,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categorizedcriteriamodule",{"_index":517,"title":{},"body":{"modules/CategorizedCriteriaModule.html":{},"overview.html":{}}}],["cluster_categorizedcriteriamodule_providers",{"_index":518,"title":{},"body":{"modules/CategorizedCriteriaModule.html":{},"overview.html":{}}}],["cluster_criterionmodule",{"_index":932,"title":{},"body":{"modules/CriterionModule.html":{},"overview.html":{}}}],["cluster_criterionmodule_providers",{"_index":933,"title":{},"body":{"modules/CriterionModule.html":{},"overview.html":{}}}],["cluster_departmentsperrecopilationsmodule",{"_index":1028,"title":{},"body":{"modules/DepartmentsPerRecopilationsModule.html":{},"overview.html":{}}}],["cluster_departmentsperrecopilationsmodule_providers",{"_index":1029,"title":{},"body":{"modules/DepartmentsPerRecopilationsModule.html":{},"overview.html":{}}}],["cluster_evidencesmodule",{"_index":1192,"title":{},"body":{"modules/EvidencesModule.html":{},"overview.html":{}}}],["cluster_evidencesmodule_providers",{"_index":1193,"title":{},"body":{"modules/EvidencesModule.html":{},"overview.html":{}}}],["cluster_indicatorsmodule",{"_index":1429,"title":{},"body":{"modules/IndicatorsModule.html":{},"overview.html":{}}}],["cluster_indicatorsmodule_providers",{"_index":1430,"title":{},"body":{"modules/IndicatorsModule.html":{},"overview.html":{}}}],["cluster_indicatorsperrecopilationsmodule",{"_index":1452,"title":{},"body":{"modules/IndicatorsPerRecopilationsModule.html":{},"overview.html":{}}}],["cluster_indicatorsperrecopilationsmodule_providers",{"_index":1453,"title":{},"body":{"modules/IndicatorsPerRecopilationsModule.html":{},"overview.html":{}}}],["cluster_informationcollectionsmodule",{"_index":1570,"title":{},"body":{"modules/InformationCollectionsModule.html":{},"overview.html":{}}}],["cluster_informationcollectionsmodule_providers",{"_index":1571,"title":{},"body":{"modules/InformationCollectionsModule.html":{},"overview.html":{}}}],["cluster_mailsmodule",{"_index":1670,"title":{},"body":{"modules/MailsModule.html":{}}}],["cluster_mailsmodule_providers",{"_index":1671,"title":{},"body":{"modules/MailsModule.html":{}}}],["cluster_notificationsmodule",{"_index":1757,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["cluster_notificationsmodule_providers",{"_index":1758,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["cluster_recommendationsmodule",{"_index":1885,"title":{},"body":{"modules/RecommendationsModule.html":{},"overview.html":{}}}],["cluster_recommendationsmodule_providers",{"_index":1886,"title":{},"body":{"modules/RecommendationsModule.html":{},"overview.html":{}}}],["cluster_recopilationsmodule",{"_index":2021,"title":{},"body":{"modules/RecopilationsModule.html":{},"overview.html":{}}}],["cluster_recopilationsmodule_providers",{"_index":2022,"title":{},"body":{"modules/RecopilationsModule.html":{},"overview.html":{}}}],["cluster_summaryinformationmodule",{"_index":2190,"title":{},"body":{"modules/SummaryInformationModule.html":{},"overview.html":{}}}],["cluster_summaryinformationmodule_providers",{"_index":2191,"title":{},"body":{"modules/SummaryInformationModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2311,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2313,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2312,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_wordmodule",{"_index":2405,"title":{},"body":{"modules/WordModule.html":{},"overview.html":{}}}],["cluster_wordmodule_providers",{"_index":2406,"title":{},"body":{"modules/WordModule.html":{},"overview.html":{}}}],["coleccion",{"_index":1659,"title":{},"body":{"injectables/LinksService.html":{}}}],["colecciones",{"_index":2440,"title":{},"body":{"injectables/WordService.html":{}}}],["colección",{"_index":1286,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/WordService.html":{}}}],["collection",{"_index":1118,"title":{},"body":{"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/LinksService.html":{}}}],["collection.category.id",{"_index":1259,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["collection.category.name",{"_index":1261,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["collection.department.email",{"_index":1293,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["collection.department.fullname",{"_index":1252,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/WordService.html":{}}}],["collection.department.id",{"_index":1250,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["collection.dto",{"_index":1554,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"classes/UpdateInformationCollectionDto.html":{}}}],["collection.dto.ts",{"_index":763,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"coverage.html":{}}}],["collection.dto.ts:10",{"_index":2256,"title":{},"body":{"classes/UpdateInformationCollectionDto.html":{}}}],["collection.dto.ts:13",{"_index":769,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{}}}],["collection.dto.ts:17",{"_index":766,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{}}}],["collection.dto.ts:21",{"_index":765,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{}}}],["collection.dto.ts:28",{"_index":771,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{}}}],["collection.dto.ts:33",{"_index":768,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{}}}],["collection.entity",{"_index":598,"title":{},"body":{"entities/Category.html":{},"classes/Department.html":{},"entities/Evidence.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{}}}],["collection.entity.ts",{"_index":1513,"title":{},"body":{"entities/InformationCollection.html":{},"coverage.html":{}}}],["collection.entity.ts:17",{"_index":1522,"title":{},"body":{"entities/InformationCollection.html":{}}}],["collection.entity.ts:23",{"_index":1527,"title":{},"body":{"entities/InformationCollection.html":{}}}],["collection.entity.ts:29",{"_index":1519,"title":{},"body":{"entities/InformationCollection.html":{}}}],["collection.entity.ts:32",{"_index":1516,"title":{},"body":{"entities/InformationCollection.html":{}}}],["collection.entity.ts:35",{"_index":1525,"title":{},"body":{"entities/InformationCollection.html":{}}}],["collection.entity.ts:38",{"_index":1528,"title":{},"body":{"entities/InformationCollection.html":{}}}],["collection.entity.ts:41",{"_index":1524,"title":{},"body":{"entities/InformationCollection.html":{}}}],["collection.entity.ts:48",{"_index":1517,"title":{},"body":{"entities/InformationCollection.html":{}}}],["collection.entity.ts:51",{"_index":1521,"title":{},"body":{"entities/InformationCollection.html":{}}}],["collection.evidences",{"_index":1122,"title":{},"body":{"entities/Evidence.html":{}}}],["collection.evidences.foreach((evidence",{"_index":2478,"title":{},"body":{"injectables/WordService.html":{}}}],["collection.id",{"_index":1253,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["collection.name",{"_index":1255,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/WordService.html":{}}}],["collection.recopilation.id",{"_index":1256,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["collection.recopilation.name",{"_index":1258,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["collection.summary",{"_index":2470,"title":{},"body":{"injectables/WordService.html":{}}}],["collectiondata",{"_index":1625,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["collectiondata.id",{"_index":1627,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["collectiondata.name",{"_index":1628,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["collectiondescription",{"_index":2466,"title":{},"body":{"injectables/WordService.html":{}}}],["collectionid",{"_index":723,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{}}}],["collectionname",{"_index":1254,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/WordService.html":{}}}],["collections",{"_index":1533,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"classes/OrderByParamDto-6.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["collections.constants",{"_index":1826,"title":{},"body":{"classes/OrderByParamDto-6.html":{}}}],["collections.constants.ts",{"_index":2564,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["collections.controller",{"_index":1573,"title":{},"body":{"modules/InformationCollectionsModule.html":{}}}],["collections.controller.ts",{"_index":1532,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"coverage.html":{}}}],["collections.controller.ts:108",{"_index":1550,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["collections.controller.ts:126",{"_index":1547,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["collections.controller.ts:35",{"_index":1538,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["collections.controller.ts:60",{"_index":1539,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["collections.controller.ts:67",{"_index":1543,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["collections.controller.ts:81",{"_index":1546,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["collections.controller.ts:98",{"_index":1537,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["collections.filter((ic",{"_index":2501,"title":{},"body":{"injectables/WordService.html":{}}}],["collections.foreach((collection",{"_index":2469,"title":{},"body":{"injectables/WordService.html":{}}}],["collections.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["collections.module.ts",{"_index":1572,"title":{},"body":{"modules/InformationCollectionsModule.html":{}}}],["collections.service",{"_index":1553,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{}}}],["collections.service.ts",{"_index":1575,"title":{},"body":{"injectables/InformationCollectionsService.html":{},"coverage.html":{}}}],["collections.service.ts:121",{"_index":1579,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["collections.service.ts:163",{"_index":1585,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["collections.service.ts:19",{"_index":1577,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["collections.service.ts:227",{"_index":1584,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["collections.service.ts:32",{"_index":1580,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["collections.service.ts:54",{"_index":1581,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["collections.service.ts:61",{"_index":1583,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["collections.service.ts:82",{"_index":1582,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["collections/dto/create",{"_index":761,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{},"coverage.html":{}}}],["collections/dto/order",{"_index":1825,"title":{},"body":{"classes/OrderByParamDto-6.html":{},"coverage.html":{}}}],["collections/dto/update",{"_index":2255,"title":{},"body":{"classes/UpdateInformationCollectionDto.html":{},"coverage.html":{}}}],["collections/entities/information",{"_index":597,"title":{},"body":{"entities/Category.html":{},"classes/Department.html":{},"entities/Evidence.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"entities/InformationCollection.html":{},"injectables/LinksService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["collections/information",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["column",{"_index":600,"title":{},"body":{"entities/Category.html":{},"entities/Criteria.html":{},"classes/Document.html":{},"entities/Evidence.html":{},"classes/Image.html":{},"entities/Indicator.html":{},"entities/InformationCollection.html":{},"classes/Link.html":{},"entities/Notification.html":{},"entities/Recopilation.html":{},"entities/User.html":{}}}],["column({default",{"_index":1933,"title":{},"body":{"entities/Recopilation.html":{}}}],["column({nullable",{"_index":867,"title":{},"body":{"entities/Criteria.html":{},"entities/User.html":{}}}],["column({type",{"_index":579,"title":{},"body":{"entities/Category.html":{},"entities/Criteria.html":{},"classes/Document.html":{},"entities/Evidence.html":{},"classes/Image.html":{},"entities/Indicator.html":{},"entities/InformationCollection.html":{},"classes/Link.html":{},"entities/Notification.html":{},"entities/Recopilation.html":{},"entities/User.html":{}}}],["comparation",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"controllers/EvidencesController.html":{},"modules/MailsModule.html":{},"dependencies.html":{}}}],["config.get('database",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('host').host",{"_index":1678,"title":{},"body":{"modules/MailsModule.html":{}}}],["config.get('jwt",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('password').password",{"_index":1682,"title":{},"body":{"modules/MailsModule.html":{}}}],["config.get('user').user",{"_index":1680,"title":{},"body":{"modules/MailsModule.html":{}}}],["configmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailsModule.html":{}}}],["configmodule.load(path.resolve(__dirname",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"controllers/EvidencesController.html":{},"modules/MailsModule.html":{}}}],["conflictexception",{"_index":538,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["console.log(e",{"_index":923,"title":{},"body":{"controllers/CriterionController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/WordController.html":{}}}],["const",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":1303,"title":{},"body":{"interfaces/Filter.html":{}}}],["constraint",{"_index":2217,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["constructhttpresponse",{"_index":644,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"classes/TypeORMExceptionFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["constructhttpresponse(statuscode",{"_index":2173,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{},"classes/TypeORMExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["constructlogindatamail",{"_index":1695,"title":{},"body":{"injectables/MailsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["constructlogindatamail(email",{"_index":2640,"title":{},"body":{"miscellaneous/functions.html":{}}}],["constructlogindatamail(user",{"_index":1703,"title":{},"body":{"injectables/MailsService.html":{}}}],["constructor",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/ClassValidatorValidationsException.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/MailsService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"guards/RolesGuard.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{},"classes/WrongPasswordException.html":{}}}],["constructor(categorizedcriteriarepository",{"_index":529,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["constructor(categoryrepository",{"_index":394,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(criterionrepository",{"_index":941,"title":{},"body":{"injectables/CriterionService.html":{}}}],["constructor(departmentsperrecopilationrepository",{"_index":1036,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["constructor(departmentsrepository",{"_index":1077,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["constructor(documentsrepository",{"_index":1110,"title":{},"body":{"injectables/DocumentsService.html":{}}}],["constructor(errors",{"_index":629,"title":{},"body":{"classes/ClassValidatorValidationsException.html":{}}}],["constructor(evidencerepository",{"_index":1217,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["constructor(imagesrepository",{"_index":1358,"title":{},"body":{"injectables/ImagesService.html":{}}}],["constructor(indicatorrepository",{"_index":1475,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["constructor(indicatorsperrecopilationsrepository",{"_index":1455,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["constructor(informationcollectionsrepository",{"_index":1576,"title":{},"body":{"injectables/InformationCollectionsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["constructor(jwtservice",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(linkrepository",{"_index":1650,"title":{},"body":{"injectables/LinksService.html":{}}}],["constructor(mailerservice",{"_index":1688,"title":{},"body":{"injectables/MailsService.html":{}}}],["constructor(notificationrepository",{"_index":1766,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["constructor(private",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DocumentsController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/LinksController.html":{},"injectables/MailsService.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{}}}],["constructor(recommendationsrepository",{"_index":1891,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["constructor(recopilationsrepository",{"_index":2029,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["constructor(reflector",{"_index":2143,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(usersrepository",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructpaginateditemsdto",{"_index":323,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["constructpaginateditemsdto(departments",{"_index":1004,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["constructpaginateditemsdto(documents",{"_index":1107,"title":{},"body":{"controllers/DocumentsController.html":{}}}],["constructpaginateditemsdto(images",{"_index":1355,"title":{},"body":{"controllers/ImagesController.html":{}}}],["constructpaginateditemsdto(items",{"_index":2641,"title":{},"body":{"miscellaneous/functions.html":{}}}],["constructpaginateditemsdto(users",{"_index":2303,"title":{},"body":{"controllers/UsersController.html":{}}}],["content",{"_index":2386,"title":{},"body":{"controllers/WordController.html":{}}}],["context",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["context.getclass",{"_index":197,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":196,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":198,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getresponse",{"_index":2169,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["control",{"_index":2401,"title":{},"body":{"controllers/WordController.html":{}}}],["controller",{"_index":111,"title":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('categories",{"_index":338,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('categorized",{"_index":509,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["controller('criteria",{"_index":920,"title":{},"body":{"controllers/CriterionController.html":{}}}],["controller('departments",{"_index":1002,"title":{},"body":{"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{}}}],["controller('documents",{"_index":1105,"title":{},"body":{"controllers/DocumentsController.html":{}}}],["controller('evidences",{"_index":1167,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["controller('images",{"_index":1353,"title":{},"body":{"controllers/ImagesController.html":{}}}],["controller('indicators",{"_index":1418,"title":{},"body":{"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{}}}],["controller('information",{"_index":1556,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["controller('links",{"_index":1642,"title":{},"body":{"controllers/LinksController.html":{}}}],["controller('notifications",{"_index":1743,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["controller('recommendations",{"_index":1879,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["controller('recopilations",{"_index":1992,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["controller('summary",{"_index":2186,"title":{},"body":{"controllers/SummaryInformationController.html":{}}}],["controller('users",{"_index":2300,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('word",{"_index":2378,"title":{},"body":{"controllers/WordController.html":{}}}],["controllers",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/WordController.html":{},"modules/WordModule.html":{},"overview.html":{}}}],["coordinator",{"_index":663,"title":{"classes/Coordinator.html":{}},"body":{"classes/Coordinator.html":{},"injectables/NotificationsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["coordinatorrepository",{"_index":2325,"title":{},"body":{"injectables/UsersService.html":{}}}],["core/auth/auth.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["core/categories/categories.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["core/categorized",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["core/criterion/criterion.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["core/departments",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["core/evidences/evidences.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["core/indicators",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["core/indicators/indicators.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["core/information",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["core/mails/mails.module",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["core/notifications/notifications.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["core/recommendations/recommendations.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["core/recopilations/recopilations.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["core/summary",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["core/users/users.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["core/word/word.module",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["count",{"_index":347,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["country",{"_index":2530,"title":{},"body":{"injectables/WordService.html":{}}}],["coverage",{"_index":2542,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":392,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1645,"title":{},"body":{"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["create(createcategorizedcriteriadto",{"_index":489,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{}}}],["create(createcategorydto",{"_index":406,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["create(createdepartmentsperrecopilationdto",{"_index":1010,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{}}}],["create(createevidencedto",{"_index":1224,"title":{},"body":{"injectables/EvidencesService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{}}}],["create(createindicatorsperrecopilationsdto",{"_index":1436,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{}}}],["create(createinformationcollectiondto",{"_index":1536,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{}}}],["create(createnotificationdto",{"_index":1725,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["create(createrecommendationdto",{"_index":1897,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["create(createrecommenddto",{"_index":1869,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["create(createuserdto",{"_index":2283,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(filelink",{"_index":1139,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["create(recopilationdata",{"_index":1952,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["createall",{"_index":1764,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["createall(createnotificationdto",{"_index":1771,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["createcategorizedcriteriadto",{"_index":490,"title":{"classes/CreateCategorizedCriteriaDto.html":{}},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"coverage.html":{}}}],["createcategory",{"_index":270,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["createcategory(@body",{"_index":356,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["createcategory(newcategory",{"_index":277,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["createcategorydto",{"_index":278,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["createcategorydto.indicatorindex",{"_index":422,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["createcriteriadto",{"_index":685,"title":{"classes/CreateCriteriaDto.html":{}},"body":{"classes/CreateCriteriaDto.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"classes/UpdateCriteriaDto.html":{},"coverage.html":{}}}],["createcriterion",{"_index":891,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{}}}],["createcriterion(@body",{"_index":921,"title":{},"body":{"controllers/CriterionController.html":{}}}],["createcriterion(createcriteriondto",{"_index":898,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{}}}],["createcriteriondto",{"_index":901,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{}}}],["createcriteriondto.indicatorindex",{"_index":952,"title":{},"body":{"injectables/CriterionService.html":{}}}],["createdat",{"_index":1121,"title":{},"body":{"entities/Evidence.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{},"injectables/NotificationsService.html":{},"injectables/RecopilationsService.html":{},"miscellaneous/variables.html":{}}}],["createdatecolumn",{"_index":1133,"title":{},"body":{"entities/Evidence.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{}}}],["createdatecolumn({type",{"_index":1124,"title":{},"body":{"entities/Evidence.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{}}}],["createdcategory",{"_index":357,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["createdepartmentsperrecopilationdto",{"_index":707,"title":{"classes/CreateDepartmentsPerRecopilationDto.html":{}},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"coverage.html":{}}}],["createdindicator",{"_index":1423,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["creatednotification",{"_index":1744,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["createdrecopilation",{"_index":2004,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["createevidencedto",{"_index":720,"title":{"classes/CreateEvidenceDto.html":{}},"body":{"classes/CreateEvidenceDto.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/UpdateEvidenceDto.html":{},"coverage.html":{}}}],["createevidencedto.collectionid",{"_index":1238,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/LinksService.html":{}}}],["createevidencedto.error",{"_index":1240,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["createevidencedto.externallink",{"_index":1241,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["createevidencedto.filelink",{"_index":1182,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["createevidencedto.filelink.match(/\\.(jpeg|jpg|png|gif",{"_index":1249,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["createevidencedto.filelink.match(/\\.(xls|xlsx|doc|docx|pdf",{"_index":1245,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["createevidences",{"_index":2410,"title":{},"body":{"injectables/WordService.html":{}}}],["createevidences(collections",{"_index":2412,"title":{},"body":{"injectables/WordService.html":{}}}],["createindicator",{"_index":1392,"title":{},"body":{"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{}}}],["createindicator(@body",{"_index":1422,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["createindicator(createindicatordto",{"_index":1477,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["createindicator(newindicador",{"_index":1398,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["createindicatordto",{"_index":747,"title":{"classes/CreateIndicatorDto.html":{}},"body":{"classes/CreateIndicatorDto.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"coverage.html":{}}}],["createindicatorperrecopilationdto",{"_index":756,"title":{"classes/CreateIndicatorPerRecopilationDto.html":{}},"body":{"classes/CreateIndicatorPerRecopilationDto.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"coverage.html":{}}}],["createindicatorsperrecopilationsdto",{"_index":1438,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{}}}],["createinformationcollectiondto",{"_index":760,"title":{"classes/CreateInformationCollectionDto.html":{}},"body":{"classes/CreateInformationCollectionDto.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"classes/UpdateInformationCollectionDto.html":{},"coverage.html":{}}}],["createnotificationdto",{"_index":775,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["createnotificationdto.data",{"_index":1787,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["createnotificationdto.type",{"_index":1788,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["createnotificationdto.userid",{"_index":1782,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["createquerybuilder",{"_index":446,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["createrecommendationdto",{"_index":790,"title":{"classes/CreateRecommendationDto.html":{}},"body":{"classes/CreateRecommendationDto.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"coverage.html":{}}}],["createrecommenddto",{"_index":1871,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["createrecopilationdto",{"_index":796,"title":{"classes/CreateRecopilationDto.html":{}},"body":{"classes/CreateRecopilationDto.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"classes/UpdateRecopilationDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":848,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.password",{"_index":2345,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdtowithouttype",{"_index":2341,"title":{},"body":{"injectables/UsersService.html":{}}}],["criteria",{"_index":463,"title":{"entities/Criteria.html":{}},"body":{"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Criteria.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"entities/Indicator.html":{},"injectables/IndicatorsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"interfaces/RecopilationDto.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["criteria.constants",{"_index":1811,"title":{},"body":{"classes/OrderByParamDto-1.html":{}}}],["criteria.constants.ts",{"_index":2555,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["criteria.controller",{"_index":521,"title":{},"body":{"modules/CategorizedCriteriaModule.html":{}}}],["criteria.controller.ts",{"_index":484,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"coverage.html":{}}}],["criteria.controller.ts:32",{"_index":493,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["criteria.controller.ts:56",{"_index":496,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["criteria.controller.ts:61",{"_index":491,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["criteria.controller.ts:68",{"_index":504,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["criteria.controller.ts:79",{"_index":499,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["criteria.dto",{"_index":918,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"classes/UpdateCriteriaDto.html":{}}}],["criteria.dto.ts",{"_index":687,"title":{},"body":{"classes/CreateCriteriaDto.html":{},"classes/UpdateCriteriaDto.html":{},"coverage.html":{}}}],["criteria.dto.ts:15",{"_index":696,"title":{},"body":{"classes/CreateCriteriaDto.html":{}}}],["criteria.dto.ts:19",{"_index":702,"title":{},"body":{"classes/CreateCriteriaDto.html":{}}}],["criteria.dto.ts:26",{"_index":698,"title":{},"body":{"classes/CreateCriteriaDto.html":{}}}],["criteria.dto.ts:32",{"_index":692,"title":{},"body":{"classes/CreateCriteriaDto.html":{}}}],["criteria.dto.ts:38",{"_index":694,"title":{},"body":{"classes/CreateCriteriaDto.html":{}}}],["criteria.dto.ts:42",{"_index":701,"title":{},"body":{"classes/CreateCriteriaDto.html":{}}}],["criteria.id",{"_index":2109,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["criteria.indicator",{"_index":1371,"title":{},"body":{"entities/Indicator.html":{}}}],["criteria.indicator.index",{"_index":556,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["criteria.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["criteria.module.ts",{"_index":519,"title":{},"body":{"modules/CategorizedCriteriaModule.html":{}}}],["criteria.service",{"_index":506,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{}}}],["criteria.service.ts",{"_index":528,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"coverage.html":{}}}],["criteria.service.ts:105",{"_index":537,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["criteria.service.ts:159",{"_index":536,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["criteria.service.ts:18",{"_index":532,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["criteria.service.ts:32",{"_index":534,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["criteria.service.ts:54",{"_index":535,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["criteria.service.ts:61",{"_index":533,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["criteria/categorized",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["criteria/dto/create",{"_index":666,"title":{},"body":{"classes/CreateCategorizedCriteriaDto.html":{},"coverage.html":{}}}],["criteria/dto/order",{"_index":1809,"title":{},"body":{"classes/OrderByParamDto-1.html":{},"coverage.html":{}}}],["criteria/dto/update",{"_index":2237,"title":{},"body":{"classes/UpdateCategorizedCriterionDto.html":{},"coverage.html":{}}}],["criteria/entities/categorized",{"_index":386,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["criteriaid",{"_index":545,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CriteriaToRelate.html":{},"classes/IndicatorToRelate.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{}}}],["criteriarepository",{"_index":2195,"title":{},"body":{"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["criteriatorelate",{"_index":883,"title":{"classes/CriteriaToRelate.html":{}},"body":{"classes/CriteriaToRelate.html":{},"classes/IndicatorToRelate.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"coverage.html":{}}}],["criterion",{"_index":444,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"entities/Indicator.html":{},"classes/IndicatorToRelate.html":{},"injectables/IndicatorsService.html":{},"interfaces/RecopilationDto.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["criterion.categorizedcriterion",{"_index":467,"title":{},"body":{"entities/CategorizedCriteria.html":{}}}],["criterion.constants",{"_index":1807,"title":{},"body":{"classes/OrderByParamDto.html":{}}}],["criterion.controller",{"_index":935,"title":{},"body":{"modules/CriterionModule.html":{}}}],["criterion.dto",{"_index":507,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/UpdateCategorizedCriterionDto.html":{}}}],["criterion.dto.ts",{"_index":667,"title":{},"body":{"classes/CreateCategorizedCriteriaDto.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"coverage.html":{}}}],["criterion.dto.ts:10",{"_index":669,"title":{},"body":{"classes/CreateCategorizedCriteriaDto.html":{}}}],["criterion.dto.ts:14",{"_index":668,"title":{},"body":{"classes/CreateCategorizedCriteriaDto.html":{}}}],["criterion.dto.ts:6",{"_index":670,"title":{},"body":{"classes/CreateCategorizedCriteriaDto.html":{}}}],["criterion.entity",{"_index":387,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{}}}],["criterion.entity.ts",{"_index":461,"title":{},"body":{"entities/CategorizedCriteria.html":{},"coverage.html":{}}}],["criterion.entity.ts:10",{"_index":470,"title":{},"body":{"entities/CategorizedCriteria.html":{}}}],["criterion.entity.ts:17",{"_index":475,"title":{},"body":{"entities/CategorizedCriteria.html":{}}}],["criterion.entity.ts:20",{"_index":468,"title":{},"body":{"entities/CategorizedCriteria.html":{}}}],["criterion.entity.ts:23",{"_index":466,"title":{},"body":{"entities/CategorizedCriteria.html":{}}}],["criterion.id",{"_index":2199,"title":{},"body":{"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["criterion.service",{"_index":917,"title":{},"body":{"controllers/CriterionController.html":{},"modules/CriterionModule.html":{}}}],["criterion/entities/criteria.entity",{"_index":522,"title":{},"body":{"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{}}}],["criterionbyindicator",{"_index":939,"title":{},"body":{"injectables/CriterionService.html":{}}}],["criterionbyindicator(indicatorid",{"_index":944,"title":{},"body":{"injectables/CriterionService.html":{}}}],["criterionbyrecopilation",{"_index":940,"title":{},"body":{"injectables/CriterionService.html":{}}}],["criterionbyrecopilation(recopilationid",{"_index":946,"title":{},"body":{"injectables/CriterionService.html":{}}}],["criterioncontroller",{"_index":889,"title":{"controllers/CriterionController.html":{}},"body":{"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"coverage.html":{}}}],["criterionid",{"_index":2374,"title":{},"body":{"controllers/WordController.html":{}}}],["criterionmodule",{"_index":34,"title":{"modules/CriterionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CriterionModule.html":{},"modules.html":{},"overview.html":{}}}],["criterionname",{"_index":2498,"title":{},"body":{"injectables/WordService.html":{}}}],["criterionrepository",{"_index":530,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/RecopilationsService.html":{}}}],["criterionservice",{"_index":916,"title":{"injectables/CriterionService.html":{}},"body":{"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"coverage.html":{},"overview.html":{}}}],["criterionwithoutindicator",{"_index":2065,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["ctx",{"_index":649,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeORMExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":651,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeORMExceptionFilter.html":{}}}],["current_timestamp(6",{"_index":1126,"title":{},"body":{"entities/Evidence.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{}}}],["currentdate",{"_index":2134,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["currentdate.sethours(0",{"_index":2135,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["currentpage",{"_index":1838,"title":{},"body":{"classes/PaginatedItems.html":{},"miscellaneous/functions.html":{}}}],["custom",{"_index":840,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["d",{"_index":1063,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/InformationCollectionsService.html":{}}}],["d).{ts,js",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["d.department.id",{"_index":1594,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["d.departmentid",{"_index":2131,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["d.id",{"_index":1066,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["data",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateNotificationDto.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"injectables/WordService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["data')@apibody({schema",{"_index":1142,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["database_config",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["database_config.url",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["datatoupdate",{"_index":1610,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["datatoupdate.category",{"_index":1621,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["datatoupdate.department",{"_index":1623,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["datatoupdate.isapproved",{"_index":1617,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["datatoupdate.name",{"_index":1613,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["datatoupdate.recopilation",{"_index":1619,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["datatoupdate.summary",{"_index":1615,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["date",{"_index":576,"title":{},"body":{"entities/Category.html":{},"classes/CreateRecopilationDto.html":{},"entities/Criteria.html":{},"entities/Evidence.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"injectables/RecopilationsService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["datos",{"_index":1699,"title":{},"body":{"injectables/MailsService.html":{}}}],["de",{"_index":830,"title":{},"body":{"classes/CreateRecopilationDto.html":{},"injectables/EvidencesService.html":{},"injectables/WordService.html":{}}}],["debe",{"_index":835,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["declarations",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{},"overview.html":{}}}],["decorators",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"classes/LoginAuthDto.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"entities/Recopilation.html":{},"controllers/RecopilationsController.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"controllers/SummaryInformationController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateRecopilationDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{}}}],["default",{"_index":876,"title":{},"body":{"entities/Criteria.html":{},"entities/Evidence.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{},"injectables/NotificationsService.html":{},"entities/Recopilation.html":{},"classes/TypeORMExceptionFilter.html":{},"injectables/WordService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":1683,"title":{},"body":{"modules/MailsModule.html":{}}}],["defined",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateRecopilationDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{},"classes/WrongPasswordException.html":{}}}],["delete",{"_index":312,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["delete('/:id",{"_index":363,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/IndicatorsController.html":{},"controllers/NotificationsController.html":{}}}],["delete('/:id')@httpcode(httpstatus.no_content",{"_index":1402,"title":{},"body":{"controllers/IndicatorsController.html":{},"controllers/NotificationsController.html":{}}}],["delete(':id",{"_index":498,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content",{"_index":903,"title":{},"body":{"controllers/CriterionController.html":{},"controllers/EvidencesController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/RecommendationsController.html":{},"controllers/UsersController.html":{}}}],["delete(@param('id",{"_index":1755,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["delete(id",{"_index":1727,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["deletecategory",{"_index":271,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["deletecategory(@param('id",{"_index":365,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletecategory(id",{"_index":283,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["deletecriterion",{"_index":892,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{}}}],["deletecriterion(@param('id",{"_index":928,"title":{},"body":{"controllers/CriterionController.html":{}}}],["deletecriterion(id",{"_index":902,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{}}}],["deletedat",{"_index":571,"title":{},"body":{"entities/Category.html":{},"entities/Criteria.html":{},"entities/User.html":{}}}],["deletedatecolumn",{"_index":577,"title":{},"body":{"entities/Category.html":{},"entities/Criteria.html":{},"entities/User.html":{}}}],["deleteindicator",{"_index":1393,"title":{},"body":{"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{}}}],["deleteindicator(@param('id",{"_index":1426,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["deleteindicator(id",{"_index":1401,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["deleteindicator(index",{"_index":1479,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["delimiter",{"_index":1299,"title":{},"body":{"interfaces/Filter.html":{},"miscellaneous/typealiases.html":{}}}],["delimiters",{"_index":2577,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dep",{"_index":2120,"title":{},"body":{"injectables/RecopilationsService.html":{},"injectables/WordService.html":{}}}],["dep.categories",{"_index":2124,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["dep.departmentid",{"_index":2122,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["departamento",{"_index":2442,"title":{},"body":{"injectables/WordService.html":{}}}],["department",{"_index":710,"title":{"classes/Department.html":{}},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/EvidencesService.html":{},"entities/InformationCollection.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["department.fullname",{"_index":1601,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["department.id",{"_index":1595,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["department.informationcollections",{"_index":1518,"title":{},"body":{"entities/InformationCollection.html":{}}}],["department.recopilationsperdepartment",{"_index":978,"title":{},"body":{"entities/DepartmentPerRecopilation.html":{}}}],["departmentenddate",{"_index":798,"title":{},"body":{"classes/CreateRecopilationDto.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"injectables/RecopilationsService.html":{},"miscellaneous/variables.html":{}}}],["departmentid",{"_index":623,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/DepartmentToBeRecommended.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/EvidencesService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"classes/RecommendCategoriesDto.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["departmentname",{"_index":1251,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/WordService.html":{}}}],["departmentperrecopilation",{"_index":971,"title":{"entities/DepartmentPerRecopilation.html":{}},"body":{"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"entities/Recommendation.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["departmentperrecopilation.department",{"_index":972,"title":{},"body":{"classes/Department.html":{}}}],["departmentperrecopilation.recommendations",{"_index":1862,"title":{},"body":{"entities/Recommendation.html":{}}}],["departmentrepository",{"_index":1037,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/UsersService.html":{}}}],["departments",{"_index":622,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/OrderByParamDto-3.html":{},"classes/RecommendCategoriesDto.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"interfaces/RecopilationDto.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["departments.controller",{"_index":2319,"title":{},"body":{"modules/UsersModule.html":{}}}],["departments.filter",{"_index":1062,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["departments.length",{"_index":1054,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["departments.service",{"_index":999,"title":{},"body":{"controllers/DepartmentsController.html":{},"modules/UsersModule.html":{}}}],["departmentsbyrecopilation",{"_index":1076,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["departmentsbyrecopilation(recopilationid",{"_index":1080,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["departmentscontroller",{"_index":991,"title":{"controllers/DepartmentsController.html":{}},"body":{"controllers/DepartmentsController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["departmentsids",{"_index":712,"title":{},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{}}}],["departmentsids.length",{"_index":1055,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["departmentsperrecopilation",{"_index":1070,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"entities/Recopilation.html":{},"injectables/RecopilationsService.html":{}}}],["departmentsperrecopilation.department",{"_index":1073,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/RecopilationsService.html":{}}}],["departmentsperrecopilation.map((dpr",{"_index":1087,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["departmentsperrecopilation.recommendations.category",{"_index":2054,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["departmentsperrecopilation.recopilation",{"_index":1071,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"entities/Recopilation.html":{}}}],["departmentsperrecopilationrepository",{"_index":1039,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{}}}],["departmentsperrecopilations",{"_index":1022,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{}}}],["departmentsperrecopilationscontroller",{"_index":1007,"title":{"controllers/DepartmentsPerRecopilationsController.html":{}},"body":{"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"coverage.html":{}}}],["departmentsperrecopilationsmodule",{"_index":35,"title":{"modules/DepartmentsPerRecopilationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules.html":{},"overview.html":{}}}],["departmentsperrecopilationsrepository",{"_index":1894,"title":{},"body":{"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{}}}],["departmentsperrecopilationsservice",{"_index":1019,"title":{"injectables/DepartmentsPerRecopilationsService.html":{}},"body":{"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"coverage.html":{},"overview.html":{}}}],["departmentsrepository",{"_index":1079,"title":{},"body":{"injectables/DepartmentsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{}}}],["departmentsservice",{"_index":998,"title":{"injectables/DepartmentsService.html":{}},"body":{"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["departmentstoinsert",{"_index":1061,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["departmentstoinsert.map((d",{"_index":1068,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["departmenttoberecommended",{"_index":621,"title":{"classes/DepartmentToBeRecommended.html":{}},"body":{"classes/CategoryToRecommend.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/RecommendCategoriesDto.html":{},"coverage.html":{}}}],["departmentwithoutpassword",{"_index":1088,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["dependencies",{"_index":23,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":1791,"title":{},"body":{"injectables/NotificationsService.html":{},"classes/OrderTypeParamDto.html":{}}}],["description",{"_index":724,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"classes/CreateRecopilationDto.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/FiltersSegmentDto.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"injectables/RecopilationsService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["destination",{"_index":1172,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["development",{"_index":2663,"title":{},"body":{"index.html":{}}}],["diferente",{"_index":2230,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["disable",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsService.html":{},"injectables/UsersService.html":{}}}],["diskstorage",{"_index":1160,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["disposition",{"_index":2388,"title":{},"body":{"controllers/WordController.html":{}}}],["distincton(['c.id",{"_index":451,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["doc",{"_index":2517,"title":{},"body":{"injectables/WordService.html":{}}}],["document",{"_index":1090,"title":{"classes/Document.html":{}},"body":{"classes/Document.html":{},"injectables/DocumentsService.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"injectables/WordService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["document.controller",{"_index":1207,"title":{},"body":{"modules/EvidencesModule.html":{}}}],["document.service",{"_index":1102,"title":{},"body":{"controllers/DocumentsController.html":{},"modules/EvidencesModule.html":{}}}],["documentation",{"_index":1322,"title":{},"body":{"classes/FiltersSegmentDto.html":{},"coverage.html":{}}}],["documentrepository",{"_index":1218,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["documents",{"_index":1098,"title":{},"body":{"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{}}}],["documentscontroller",{"_index":1096,"title":{"controllers/DocumentsController.html":{}},"body":{"controllers/DocumentsController.html":{},"modules/EvidencesModule.html":{},"coverage.html":{}}}],["documentsrepository",{"_index":1112,"title":{},"body":{"injectables/DocumentsService.html":{}}}],["documentsservice",{"_index":1101,"title":{"injectables/DocumentsService.html":{}},"body":{"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"modules/EvidencesModule.html":{},"coverage.html":{},"overview.html":{}}}],["docx",{"_index":2398,"title":{},"body":{"controllers/WordController.html":{},"injectables/WordService.html":{},"dependencies.html":{}}}],["dpr",{"_index":2058,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["dpr.department",{"_index":1089,"title":{},"body":{"injectables/DepartmentsService.html":{},"injectables/RecopilationsService.html":{}}}],["dpr.department.id",{"_index":2090,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["dpr.recommendations.map((r",{"_index":2059,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["dpr.recommendations?.some",{"_index":2086,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["dto",{"_index":327,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["dto.ts",{"_index":2585,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dto/create",{"_index":318,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/find",{"_index":2298,"title":{},"body":{"controllers/UsersController.html":{}}}],["dto/login",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/order",{"_index":332,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/recommend",{"_index":1988,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["dto/recopilation.dto",{"_index":2051,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["dto/relate",{"_index":1987,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["dto/update",{"_index":320,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtowithoutindicatorindex",{"_index":957,"title":{},"body":{"injectables/CriterionService.html":{}}}],["duplicate",{"_index":2214,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["e",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"controllers/CriterionController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/WordController.html":{}}}],["e.error",{"_index":2097,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["e2e",{"_index":2674,"title":{},"body":{"index.html":{}}}],["each",{"_index":620,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CriteriaToRelate.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/IndicatorToRelate.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{}}}],["efficient",{"_index":2652,"title":{},"body":{"index.html":{}}}],["el",{"_index":2225,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["email",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/DepartmentsService.html":{},"classes/LoginAuthDto.html":{},"entities/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":714,"title":{},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{}}}],["en",{"_index":827,"title":{},"body":{"classes/CreateRecopilationDto.html":{},"injectables/EvidencesService.html":{},"classes/TypeORMExceptionFilter.html":{},"injectables/WordService.html":{}}}],["encryptedpassword",{"_index":2346,"title":{},"body":{"injectables/UsersService.html":{}}}],["encryptpassword",{"_index":2322,"title":{},"body":{"injectables/UsersService.html":{}}}],["encryptpassword(pass",{"_index":2328,"title":{},"body":{"injectables/UsersService.html":{}}}],["enddate",{"_index":799,"title":{},"body":{"classes/CreateRecopilationDto.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"injectables/RecopilationsService.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":459,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Evidence.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{},"entities/Recommendation.html":{},"entities/Recopilation.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/admin.entity",{"_index":2318,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entities/categorized",{"_index":520,"title":{},"body":{"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{}}}],["entities/category.entity",{"_index":379,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["entities/coordinator.entity",{"_index":2317,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entities/criteria.entity",{"_index":936,"title":{},"body":{"modules/CriterionModule.html":{},"injectables/CriterionService.html":{}}}],["entities/department.entity",{"_index":1084,"title":{},"body":{"injectables/DepartmentsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entities/departments",{"_index":1033,"title":{},"body":{"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{}}}],["entities/document.entity",{"_index":1115,"title":{},"body":{"injectables/DocumentsService.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{}}}],["entities/evidence.entity",{"_index":1202,"title":{},"body":{"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{}}}],["entities/image.entity",{"_index":1204,"title":{},"body":{"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{}}}],["entities/indicator",{"_index":1454,"title":{},"body":{"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{}}}],["entities/indicator.entity",{"_index":1433,"title":{},"body":{"modules/IndicatorsModule.html":{},"injectables/IndicatorsService.html":{}}}],["entities/information",{"_index":1574,"title":{},"body":{"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{}}}],["entities/link.entity",{"_index":1206,"title":{},"body":{"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"injectables/LinksService.html":{}}}],["entities/notification.entity",{"_index":1761,"title":{},"body":{"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{}}}],["entities/recommendation.entity",{"_index":1889,"title":{},"body":{"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{}}}],["entities/recopilation.entity",{"_index":1990,"title":{},"body":{"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{}}}],["entities/user.entity",{"_index":2316,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":458,"title":{"entities/CategorizedCriteria.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Evidence.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{},"entities/Recommendation.html":{},"entities/Recopilation.html":{},"entities/User.html":{}},"body":{"entities/CategorizedCriteria.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Evidence.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{},"entities/Recommendation.html":{},"entities/Recopilation.html":{},"classes/TypeORMExceptionFilter.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('categories",{"_index":604,"title":{},"body":{"entities/Category.html":{}}}],["entity('categorized_criterion",{"_index":481,"title":{},"body":{"entities/CategorizedCriteria.html":{}}}],["entity('criterion",{"_index":879,"title":{},"body":{"entities/Criteria.html":{}}}],["entity('departments_per_recopilations",{"_index":986,"title":{},"body":{"entities/DepartmentPerRecopilation.html":{}}}],["entity('evidences",{"_index":1135,"title":{},"body":{"entities/Evidence.html":{}}}],["entity('indicators",{"_index":1380,"title":{},"body":{"entities/Indicator.html":{}}}],["entity('indicators_per_recopilations",{"_index":1387,"title":{},"body":{"entities/IndicatorPerRecopilation.html":{}}}],["entity('information_collections",{"_index":1530,"title":{},"body":{"entities/InformationCollection.html":{}}}],["entity('recommendations",{"_index":1865,"title":{},"body":{"entities/Recommendation.html":{}}}],["entity('recopilations",{"_index":1938,"title":{},"body":{"entities/Recopilation.html":{}}}],["entitynotfounderror",{"_index":1046,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/RecopilationsService.html":{},"classes/TypeORMExceptionFilter.html":{}}}],["entitynotfounderror(category",{"_index":2112,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["entitynotfounderror(criteria",{"_index":2110,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["entitynotfounderror(department",{"_index":1056,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["enum",{"_index":1131,"title":{},"body":{"entities/Evidence.html":{},"entities/Notification.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"entities/User.html":{}}}],["enumerations",{"_index":2629,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":2048,"title":{},"body":{"injectables/RecopilationsService.html":{},"miscellaneous/variables.html":{}}}],["equal(true",{"_index":2139,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["error",{"_index":627,"title":{},"body":{"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/CreateEvidenceDto.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/WrongPasswordException.html":{}}}],["error('departmentenddate",{"_index":845,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["error('enddate",{"_index":847,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["error('invalid",{"_index":1246,"title":{},"body":{"injectables/EvidencesService.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":628,"title":{},"body":{"classes/ClassValidatorValidationsException.html":{},"miscellaneous/functions.html":{}}}],["errors.foreach",{"_index":660,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{}}}],["errors/wrong",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["esa",{"_index":2224,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["eslint",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsService.html":{},"injectables/UsersService.html":{}}}],["eslint/no",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsService.html":{},"injectables/UsersService.html":{}}}],["evid.id",{"_index":2462,"title":{},"body":{"injectables/WordService.html":{}}}],["evid.type",{"_index":2460,"title":{},"body":{"injectables/WordService.html":{}}}],["evidence",{"_index":1093,"title":{"entities/Evidence.html":{}},"body":{"classes/Document.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"classes/Image.html":{},"entities/InformationCollection.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["evidence(s",{"_index":2523,"title":{},"body":{"injectables/WordService.html":{}}}],["evidence.collection",{"_index":1520,"title":{},"body":{"entities/InformationCollection.html":{}}}],["evidence.description",{"_index":2481,"title":{},"body":{"injectables/WordService.html":{}}}],["evidence.dto",{"_index":1155,"title":{},"body":{"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/UpdateEvidenceDto.html":{}}}],["evidence.dto.ts",{"_index":722,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"classes/UpdateEvidenceDto.html":{},"coverage.html":{}}}],["evidence.dto.ts:18",{"_index":730,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["evidence.dto.ts:22",{"_index":732,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["evidence.dto.ts:26",{"_index":739,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["evidence.dto.ts:31",{"_index":734,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["evidence.dto.ts:35",{"_index":736,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["evidence.dto.ts:39",{"_index":728,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["evidence.entity",{"_index":1094,"title":{},"body":{"classes/Document.html":{},"classes/Image.html":{},"classes/Link.html":{}}}],["evidence.error",{"_index":2479,"title":{},"body":{"injectables/WordService.html":{}}}],["evidence.type",{"_index":2458,"title":{},"body":{"injectables/WordService.html":{}}}],["evidence_creation",{"_index":2750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evidence_edition",{"_index":2751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evidence_error",{"_index":2752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["evidencedescription",{"_index":2467,"title":{},"body":{"injectables/WordService.html":{}}}],["evidencedocument",{"_index":2430,"title":{},"body":{"injectables/WordService.html":{}}}],["evidencedocument.document).filelink",{"_index":2491,"title":{},"body":{"injectables/WordService.html":{}}}],["evidenceid",{"_index":1278,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["evidencename",{"_index":1280,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["evidencenotification",{"_index":1276,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["evidencenotification.description",{"_index":1281,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["evidencenotification.id",{"_index":1279,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["evidencerepository",{"_index":1223,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["evidences",{"_index":1103,"title":{},"body":{"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/InformationCollection.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/OrderByParamDto-4.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["evidences.constants",{"_index":742,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"classes/Document.html":{},"entities/Evidence.html":{},"injectables/EvidencesService.html":{},"classes/Image.html":{},"classes/Link.html":{},"classes/OrderByParamDto-4.html":{}}}],["evidences.controller",{"_index":1201,"title":{},"body":{"modules/EvidencesModule.html":{}}}],["evidences.service",{"_index":1154,"title":{},"body":{"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{}}}],["evidences/entities/document.entity",{"_index":2431,"title":{},"body":{"injectables/WordService.html":{}}}],["evidences/entities/evidence.entity",{"_index":2433,"title":{},"body":{"injectables/WordService.html":{}}}],["evidences/entities/image.entity",{"_index":2428,"title":{},"body":{"injectables/WordService.html":{}}}],["evidences/entities/link.entity",{"_index":2429,"title":{},"body":{"injectables/WordService.html":{}}}],["evidencescontroller",{"_index":1137,"title":{"controllers/EvidencesController.html":{}},"body":{"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"coverage.html":{}}}],["evidencesmodule",{"_index":36,"title":{"modules/EvidencesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EvidencesModule.html":{},"modules.html":{},"overview.html":{}}}],["evidencesservice",{"_index":1153,"title":{"injectables/EvidencesService.html":{}},"body":{"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"coverage.html":{},"overview.html":{}}}],["evidencetype",{"_index":737,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"classes/Document.html":{},"entities/Evidence.html":{},"injectables/EvidencesService.html":{},"classes/Image.html":{},"classes/Link.html":{},"miscellaneous/enumerations.html":{}}}],["evidencetype.document",{"_index":1244,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["evidencetype.image",{"_index":1248,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["evidencetype.link",{"_index":1269,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["evidencia",{"_index":1285,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["evidencias",{"_index":2452,"title":{},"body":{"injectables/WordService.html":{}}}],["example",{"_index":2659,"title":{},"body":{"index.html":{}}}],["exception",{"_index":642,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeORMExceptionFilter.html":{}}}],["exception.constructor",{"_index":2211,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["exception.drivererror.code",{"_index":2213,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":636,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeORMExceptionFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["exception.filter.ts:12",{"_index":1333,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:16",{"_index":641,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{}}}],["exception.filter.ts:20",{"_index":2204,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["exception.getresponse",{"_index":1336,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":1341,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":2219,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["exceptionfilter",{"_index":637,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeORMExceptionFilter.html":{}}}],["exceptionresponse",{"_index":1335,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionresponse['message",{"_index":1337,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["execute",{"_index":457,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["executioncontext",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["existe",{"_index":2223,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["existsconflict",{"_index":552,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["expiresin",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":16,"title":{},"body":{"classes/Admin.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/Coordinator.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"classes/WrongPasswordException.html":{}}}],["exports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{},"overview.html":{}}}],["expose",{"_index":2402,"title":{},"body":{"controllers/WordController.html":{}}}],["express",{"_index":191,"title":{},"body":{"guards/AuthGuard.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"controllers/EvidencesController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"classes/TypeORMExceptionFilter.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1140,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["expressresponse",{"_index":2165,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["extends",{"_index":17,"title":{},"body":{"classes/Admin.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/Coordinator.html":{},"classes/Department.html":{},"classes/Document.html":{},"classes/Image.html":{},"classes/Link.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"classes/WrongPasswordException.html":{}}}],["externaldocs",{"_index":1307,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["externalhyperlink",{"_index":2426,"title":{},"body":{"injectables/WordService.html":{}}}],["externallink",{"_index":725,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"controllers/EvidencesController.html":{},"classes/Image.html":{},"classes/Link.html":{},"injectables/WordService.html":{}}}],["extracttokenfromheader",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{}}}],["failed",{"_index":2231,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["false",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"classes/FiltersSegmentDto.html":{},"entities/Indicator.html":{},"entities/InformationCollection.html":{},"modules/MailsModule.html":{},"entities/Notification.html":{},"injectables/NotificationsService.html":{},"entities/Recopilation.html":{},"injectables/RecopilationsService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["fecha",{"_index":834,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["field",{"_index":1300,"title":{},"body":{"interfaces/Filter.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Admin.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/Coordinator.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"classes/WrongPasswordException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["file.originalname",{"_index":2741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file.originalname.match(/\\.(jpeg|jpg|gif|png|xls|xlsx|doc|docx|pdf",{"_index":2738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filefilter",{"_index":1163,"title":{},"body":{"controllers/EvidencesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fileinterceptor",{"_index":1158,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["fileinterceptor('filelink",{"_index":1170,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["fileisrequired",{"_index":1187,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["filelink",{"_index":726,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"classes/Document.html":{},"controllers/EvidencesController.html":{},"classes/Image.html":{},"injectables/WordService.html":{}}}],["filename",{"_index":1173,"title":{},"body":{"controllers/EvidencesController.html":{},"miscellaneous/variables.html":{}}}],["filename=andres",{"_index":2390,"title":{},"body":{"controllers/WordController.html":{}}}],["filesize",{"_index":1175,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["fill(null",{"_index":2744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filter",{"_index":1296,"title":{"interfaces/Filter.html":{}},"body":{"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filter((cc",{"_index":2062,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["filter.type",{"_index":1318,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["filtering",{"_index":1320,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["filters",{"_index":346,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/FiltersSegmentDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filterssegmentdto",{"_index":290,"title":{"classes/FiltersSegmentDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/FiltersSegmentDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findactive",{"_index":1945,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["findactive(request",{"_index":1955,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["findall",{"_index":485,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@query",{"_index":1446,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{}}}],["findall(undefined",{"_index":492,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findinformationcollections",{"_index":2177,"title":{},"body":{"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["findinformationcollections(idcrit",{"_index":2178,"title":{},"body":{"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["findone",{"_index":486,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param",{"_index":2304,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(@param('id",{"_index":511,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{}}}],["findone(id",{"_index":494,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"injectables/UsersService.html":{}}}],["findone(undefined",{"_index":2286,"title":{},"body":{"controllers/UsersController.html":{}}}],["findonedetailed",{"_index":1946,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["findonedetailed(@param('id",{"_index":1999,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["findonedetailed(id",{"_index":1962,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["findonematrix",{"_index":1947,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["findonematrix(@param('id",{"_index":2002,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["findonematrix(id",{"_index":1965,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["findoneparams",{"_index":1325,"title":{"classes/FindOneParams.html":{}},"body":{"classes/FindOneParams.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["flag",{"_index":2436,"title":{},"body":{"injectables/WordService.html":{}}}],["flat",{"_index":2077,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["floating",{"_index":2504,"title":{},"body":{"injectables/WordService.html":{}}}],["fns",{"_index":818,"title":{},"body":{"classes/CreateRecopilationDto.html":{},"dependencies.html":{}}}],["font",{"_index":2475,"title":{},"body":{"injectables/WordService.html":{}}}],["format",{"_index":1179,"title":{},"body":{"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"miscellaneous/variables.html":{}}}],["formaterrors",{"_index":2572,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["formaterrors(errors",{"_index":658,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["formaterrors(exception.errors",{"_index":655,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{}}}],["formattederrors",{"_index":659,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{}}}],["formattederrors[e.property",{"_index":661,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{}}}],["formattedindicators",{"_index":1493,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["formattedinformationcollections",{"_index":1589,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["formattedinformationcollections.find",{"_index":1593,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["formattedinformationcollections.push",{"_index":1597,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["found",{"_index":433,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EvidencesService.html":{},"injectables/IndicatorsService.html":{},"injectables/LinksService.html":{},"classes/TypeORMExceptionFilter.html":{}}}],["framework",{"_index":2650,"title":{},"body":{"index.html":{}}}],["from('categorized_criterion",{"_index":452,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["fs",{"_index":2432,"title":{},"body":{"injectables/WordService.html":{}}}],["fs.readfilesync('./images/gm.png",{"_index":2513,"title":{},"body":{"injectables/WordService.html":{}}}],["fs.readfilesync('./images/ucab.png",{"_index":2502,"title":{},"body":{"injectables/WordService.html":{}}}],["fs.readfilesync('./uploads",{"_index":2483,"title":{},"body":{"injectables/WordService.html":{}}}],["fullname",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/DepartmentsService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":657,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"coverage.html":{}}}],["functions",{"_index":2633,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":2338,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["generatedpassword",{"_index":2342,"title":{},"body":{"injectables/UsersService.html":{}}}],["generatepassword",{"_index":2323,"title":{},"body":{"injectables/UsersService.html":{}}}],["generateword",{"_index":2369,"title":{},"body":{"controllers/WordController.html":{},"injectables/WordService.html":{}}}],["generateword(criterionid",{"_index":2370,"title":{},"body":{"controllers/WordController.html":{}}}],["generateword(idcrit",{"_index":2416,"title":{},"body":{"injectables/WordService.html":{}}}],["generator",{"_index":2337,"title":{},"body":{"injectables/UsersService.html":{}}}],["generator.generate",{"_index":2363,"title":{},"body":{"injectables/UsersService.html":{}}}],["get('/:id",{"_index":351,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/IndicatorsController.html":{},"controllers/NotificationsController.html":{}}}],["get('/indicator/:indicatorindex",{"_index":367,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{}}}],["get('/own",{"_index":1734,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["get('/own/unseen",{"_index":1737,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["get('/recopilation/:recopilationid",{"_index":371,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/IndicatorsController.html":{}}}],["get(':criterionid/:recopilationid",{"_index":2372,"title":{},"body":{"controllers/WordController.html":{}}}],["get(':id",{"_index":495,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["get(':id/detailed",{"_index":1998,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["get(':id/matrix",{"_index":2001,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["get(':idcrit/:idrecop",{"_index":2180,"title":{},"body":{"controllers/SummaryInformationController.html":{}}}],["get('active",{"_index":1994,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["get('department",{"_index":1541,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["getactiverecopilations",{"_index":2026,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["getactiverecopilations(undefined",{"_index":2039,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["getall",{"_index":1721,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["getall(undefined",{"_index":1729,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["getallcategories",{"_index":272,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getallcategories(undefined",{"_index":286,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getallcriteria",{"_index":893,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{}}}],["getallcriteria(undefined",{"_index":905,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{}}}],["getalldepartmentsanswers",{"_index":1534,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{}}}],["getalldepartmentsanswers(recopilationid",{"_index":1540,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{}}}],["getallindicators",{"_index":1394,"title":{},"body":{"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{}}}],["getallindicators(undefined",{"_index":1404,"title":{},"body":{"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{}}}],["getbyuserid",{"_index":1765,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["getbyuserid(userid",{"_index":1775,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["getcategoriesbyindicator",{"_index":273,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcategoriesbyindicator(indicatorindex",{"_index":295,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcategoriesbyrecopilation",{"_index":274,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcategoriesbyrecopilation(recopilationid",{"_index":300,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcategory",{"_index":275,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcategory(@param('id",{"_index":352,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcategory(id",{"_index":304,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcriterionbyindicator",{"_index":894,"title":{},"body":{"controllers/CriterionController.html":{}}}],["getcriterionbyindicator(indicatorindex",{"_index":907,"title":{},"body":{"controllers/CriterionController.html":{}}}],["getcriterionbyrecopilation",{"_index":895,"title":{},"body":{"controllers/CriterionController.html":{}}}],["getcriterionbyrecopilation(recopilationid",{"_index":909,"title":{},"body":{"controllers/CriterionController.html":{}}}],["getdepartmentanswer",{"_index":1535,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"injectables/RecopilationsService.html":{}}}],["getdepartmentanswer(recopilationid",{"_index":1544,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"injectables/RecopilationsService.html":{}}}],["getdepartmentsbyrecopilationid",{"_index":993,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["getdepartmentsbyrecopilationid(recopilationid",{"_index":996,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["getindicator",{"_index":1395,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["getindicator(@param('id",{"_index":1420,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["getindicator(id",{"_index":1406,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["getindicatorsbyrecopilation",{"_index":1396,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["getindicatorsbyrecopilation(recopilationid",{"_index":1408,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["getone",{"_index":1722,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["getone(@param('id",{"_index":1751,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getone(id",{"_index":1731,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["getonecategory",{"_index":393,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["getonecategory(id",{"_index":410,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["getonecriterion",{"_index":896,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{}}}],["getonecriterion(@param('id",{"_index":925,"title":{},"body":{"controllers/CriterionController.html":{}}}],["getonecriterion(id",{"_index":911,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{}}}],["getoneindicator",{"_index":1473,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["getoneindicator(index",{"_index":1482,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["getown",{"_index":1723,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getown(@req",{"_index":1747,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getown(request",{"_index":1733,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getownunseen",{"_index":1724,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getownunseen(@req",{"_index":1750,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getownunseen(request",{"_index":1736,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getting",{"_index":2646,"title":{"index.html":{}},"body":{}}],["global",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["greater_or_equal",{"_index":2734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["green",{"_index":1684,"title":{},"body":{"modules/MailsModule.html":{}}}],["greenmetric",{"_index":2526,"title":{},"body":{"injectables/WordService.html":{}}}],["grow",{"_index":2681,"title":{},"body":{"index.html":{}}}],["guard",{"_index":166,"title":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":168,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["guayana",{"_index":2392,"title":{},"body":{"controllers/WordController.html":{},"injectables/WordService.html":{}}}],["handle",{"_index":2171,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["handlebars",{"_index":2605,"title":{},"body":{"dependencies.html":{}}}],["haserror",{"_index":2095,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["hasnextpage",{"_index":1839,"title":{},"body":{"classes/PaginatedItems.html":{}}}],["haspreviouspage",{"_index":1840,"title":{},"body":{"classes/PaginatedItems.html":{}}}],["hbs",{"_index":2607,"title":{},"body":{"dependencies.html":{}}}],["header",{"_index":2427,"title":{},"body":{"injectables/WordService.html":{}}}],["headers",{"_index":2403,"title":{},"body":{"controllers/WordController.html":{},"injectables/WordService.html":{}}}],["height",{"_index":2487,"title":{},"body":{"injectables/WordService.html":{}}}],["helptext",{"_index":437,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateIndicatorDto.html":{},"entities/Criteria.html":{},"entities/Indicator.html":{},"injectables/IndicatorsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateIndicatorDto.html":{},"miscellaneous/variables.html":{}}}],["here",{"_index":2691,"title":{},"body":{"index.html":{}}}],["horizontalposition",{"_index":2505,"title":{},"body":{"injectables/WordService.html":{}}}],["horizontalpositionalign",{"_index":2422,"title":{},"body":{"injectables/WordService.html":{}}}],["horizontalpositionalign.left",{"_index":2509,"title":{},"body":{"injectables/WordService.html":{}}}],["horizontalpositionalign.right",{"_index":2516,"title":{},"body":{"injectables/WordService.html":{}}}],["horizontalpositionrelativefrom",{"_index":2424,"title":{},"body":{"injectables/WordService.html":{}}}],["horizontalpositionrelativefrom.margin",{"_index":2507,"title":{},"body":{"injectables/WordService.html":{}}}],["host",{"_index":639,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"modules/MailsModule.html":{},"classes/TypeORMExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":650,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeORMExceptionFilter.html":{}}}],["html",{"_index":1702,"title":{},"body":{"injectables/MailsService.html":{}}}],["http",{"_index":646,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"classes/TypeORMExceptionFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["http://guayanaweb.ucab.edu.ve",{"_index":2534,"title":{},"body":{"injectables/WordService.html":{}}}],["httpcode",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":355,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":364,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1332,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1330,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpresponse",{"_index":2166,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["https://github.com/alejandrojrosas/green",{"_index":1309,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["https://nestjs.com",{"_index":2698,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"controllers/CriterionController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"classes/TypeORMExceptionFilter.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["httpstatus.bad_request",{"_index":654,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{}}}],["httpstatus.conflict",{"_index":2218,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":2235,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["httpstatus.not_found",{"_index":2212,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["httpstatus.unprocessable_entity",{"_index":2232,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["hyperlink",{"_index":2490,"title":{},"body":{"injectables/WordService.html":{}}}],["i.alias",{"_index":1507,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["i.categories",{"_index":2076,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["i.criterion",{"_index":2105,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["i.helptext",{"_index":1508,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["i.index",{"_index":1497,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["i.indicatorid",{"_index":2104,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["i.name",{"_index":1506,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["i.recopilationsperindicator[0].recopilation.categorizedcriterion.foreach",{"_index":1495,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["ic",{"_index":1598,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["ic.department",{"_index":1591,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["ic.evidences?.some((e",{"_index":2096,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["ic.isapproved",{"_index":2094,"title":{},"body":{"injectables/RecopilationsService.html":{},"injectables/WordService.html":{}}}],["id",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"entities/DepartmentPerRecopilation.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/FindOneParams.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/IndicatorPerRecopilation.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateRecopilationDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{},"miscellaneous/variables.html":{}}}],["idcrit",{"_index":2182,"title":{},"body":{"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["identifier",{"_index":2543,"title":{},"body":{"coverage.html":{}}}],["idrecop",{"_index":2179,"title":{},"body":{"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["idrecopilacion",{"_index":1465,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["image",{"_index":1203,"title":{"classes/Image.html":{}},"body":{"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"classes/Image.html":{},"injectables/ImagesService.html":{},"injectables/WordService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["image).externallink",{"_index":2482,"title":{},"body":{"injectables/WordService.html":{}}}],["image).filelink.split('uploads/')[1",{"_index":2480,"title":{},"body":{"injectables/WordService.html":{}}}],["image.controller",{"_index":1208,"title":{},"body":{"modules/EvidencesModule.html":{}}}],["image.service",{"_index":1209,"title":{},"body":{"modules/EvidencesModule.html":{},"controllers/ImagesController.html":{}}}],["imagerepository",{"_index":1219,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["imagerun",{"_index":2421,"title":{},"body":{"injectables/WordService.html":{}}}],["images",{"_index":1349,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["imagescontroller",{"_index":1199,"title":{"controllers/ImagesController.html":{}},"body":{"modules/EvidencesModule.html":{},"controllers/ImagesController.html":{},"coverage.html":{}}}],["imagesrepository",{"_index":1360,"title":{},"body":{"injectables/ImagesService.html":{}}}],["imagesservice",{"_index":1194,"title":{"injectables/ImagesService.html":{}},"body":{"modules/EvidencesModule.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"coverage.html":{},"overview.html":{}}}],["implements",{"_index":193,"title":{},"body":{"guards/AuthGuard.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"classes/TypeORMExceptionFilter.html":{}}}],["import",{"_index":7,"title":{},"body":{"classes/Admin.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/Coordinator.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{}}}],["in(categorizedcriterias.map((c",{"_index":965,"title":{},"body":{"injectables/CriterionService.html":{}}}],["in(departments.map((d",{"_index":2130,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["in(departmentsids",{"_index":1053,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["index",{"_index":117,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateRecopilationDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index(['email",{"_index":2277,"title":{},"body":{"entities/User.html":{}}}],["index(['fullname",{"_index":2278,"title":{},"body":{"entities/User.html":{}}}],["index(['name",{"_index":882,"title":{},"body":{"entities/Criteria.html":{}}}],["index(['subindex",{"_index":880,"title":{},"body":{"entities/Criteria.html":{}}}],["indicator",{"_index":380,"title":{"entities/Indicator.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"entities/Criteria.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"interfaces/RecopilationDto.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["indicator.categories",{"_index":584,"title":{},"body":{"entities/Category.html":{}}}],["indicator.categories.some((c",{"_index":2111,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["indicator.criterion",{"_index":873,"title":{},"body":{"entities/Criteria.html":{}}}],["indicator.criterion.some((c",{"_index":2108,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["indicator.dto",{"_index":1416,"title":{},"body":{"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{}}}],["indicator.dto.ts",{"_index":749,"title":{},"body":{"classes/CreateIndicatorDto.html":{},"classes/UpdateIndicatorDto.html":{},"coverage.html":{}}}],["indicator.dto.ts:13",{"_index":753,"title":{},"body":{"classes/CreateIndicatorDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["indicator.dto.ts:19",{"_index":754,"title":{},"body":{"classes/CreateIndicatorDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["indicator.dto.ts:25",{"_index":751,"title":{},"body":{"classes/CreateIndicatorDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["indicator.dto.ts:31",{"_index":752,"title":{},"body":{"classes/CreateIndicatorDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["indicator.index",{"_index":2063,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["indicator.recopilationsperindicator",{"_index":1383,"title":{},"body":{"entities/IndicatorPerRecopilation.html":{}}}],["indicatorid",{"_index":403,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CriteriaToRelate.html":{},"injectables/CriterionService.html":{},"classes/IndicatorToRelate.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{}}}],["indicatorindex",{"_index":299,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"classes/UpdateCategoryDto.html":{}}}],["indicatorname",{"_index":2495,"title":{},"body":{"injectables/WordService.html":{}}}],["indicatorperrecopilation",{"_index":524,"title":{"entities/IndicatorPerRecopilation.html":{}},"body":{"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"coverage.html":{}}}],["indicatorperrecopilationrepository",{"_index":531,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["indicatorporrecopilations",{"_index":1377,"title":{},"body":{"entities/Indicator.html":{}}}],["indicatorporrecopilations.indicator",{"_index":1378,"title":{},"body":{"entities/Indicator.html":{}}}],["indicatorrepository",{"_index":395,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CriterionService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{}}}],["indicators",{"_index":525,"title":{},"body":{"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/CriteriaToRelate.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsService.html":{},"classes/OrderByParamDto-5.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"coverage.html":{}}}],["indicators.constants",{"_index":1823,"title":{},"body":{"classes/OrderByParamDto-5.html":{}}}],["indicators.controller",{"_index":1432,"title":{},"body":{"modules/IndicatorsModule.html":{}}}],["indicators.map((i",{"_index":1494,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["indicators.service",{"_index":1415,"title":{},"body":{"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{}}}],["indicators/entities/indicator.entity",{"_index":381,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{}}}],["indicatorsbyrecopilation",{"_index":1474,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["indicatorsbyrecopilation(recopilationid",{"_index":1484,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["indicatorscontroller",{"_index":1390,"title":{"controllers/IndicatorsController.html":{}},"body":{"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"coverage.html":{}}}],["indicatorsmodule",{"_index":37,"title":{"modules/IndicatorsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IndicatorsModule.html":{},"modules.html":{},"overview.html":{}}}],["indicatorsperrecopilation",{"_index":547,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["indicatorsperrecopilation.some",{"_index":553,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["indicatorsperrecopilation[0].recopilation",{"_index":560,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["indicatorsperrecopilationrepository",{"_index":2031,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["indicatorsperrecopilations",{"_index":563,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"entities/Recopilation.html":{},"injectables/RecopilationsService.html":{}}}],["indicatorsperrecopilations.indicator",{"_index":1470,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/RecopilationsService.html":{}}}],["indicatorsperrecopilations.recopilation",{"_index":1469,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{},"entities/Recopilation.html":{}}}],["indicatorsperrecopilationscontroller",{"_index":1435,"title":{"controllers/IndicatorsPerRecopilationsController.html":{}},"body":{"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"coverage.html":{}}}],["indicatorsperrecopilationsmodule",{"_index":38,"title":{"modules/IndicatorsPerRecopilationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules.html":{},"overview.html":{}}}],["indicatorsperrecopilationsrepository",{"_index":1457,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["indicatorsperrecopilationsservice",{"_index":1445,"title":{"injectables/IndicatorsPerRecopilationsService.html":{}},"body":{"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"coverage.html":{},"overview.html":{}}}],["indicatorsperrecopilationstoinsert",{"_index":2102,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["indicatorsperrecopilationstoinsert.push(indicatorperrecopilation",{"_index":2115,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["indicatorsrepository",{"_index":2030,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["indicatorsservice",{"_index":1414,"title":{"injectables/IndicatorsService.html":{}},"body":{"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"injectables/IndicatorsService.html":{},"coverage.html":{},"overview.html":{}}}],["indicatortorelate",{"_index":888,"title":{"classes/IndicatorToRelate.html":{}},"body":{"classes/CriteriaToRelate.html":{},"classes/IndicatorToRelate.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"coverage.html":{}}}],["indiceindicador",{"_index":1466,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["infcol.department.fullname",{"_index":2447,"title":{},"body":{"injectables/WordService.html":{}}}],["infcol.id",{"_index":2450,"title":{},"body":{"injectables/WordService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Admin.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/Coordinator.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"classes/WrongPasswordException.html":{}}}],["info.id",{"_index":2449,"title":{},"body":{"injectables/WordService.html":{}}}],["inforcollec.evidences",{"_index":2464,"title":{},"body":{"injectables/WordService.html":{}}}],["inforcollec.evidences.foreach((evid",{"_index":2459,"title":{},"body":{"injectables/WordService.html":{}}}],["inforcollec.evidences.foreach((evidence",{"_index":2456,"title":{},"body":{"injectables/WordService.html":{}}}],["información",{"_index":1287,"title":{},"body":{"injectables/EvidencesService.html":{},"classes/TypeORMExceptionFilter.html":{},"injectables/WordService.html":{}}}],["information",{"_index":762,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"classes/OrderByParamDto-6.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/UpdateInformationCollectionDto.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["information.controller",{"_index":2193,"title":{},"body":{"modules/SummaryInformationModule.html":{}}}],["information.controller.ts",{"_index":2176,"title":{},"body":{"controllers/SummaryInformationController.html":{},"coverage.html":{}}}],["information.controller.ts:16",{"_index":2181,"title":{},"body":{"controllers/SummaryInformationController.html":{}}}],["information.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["information.module.ts",{"_index":2192,"title":{},"body":{"modules/SummaryInformationModule.html":{}}}],["information.service",{"_index":2184,"title":{},"body":{"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{}}}],["information.service.ts",{"_index":2194,"title":{},"body":{"injectables/SummaryInformationService.html":{},"coverage.html":{}}}],["information.service.ts:10",{"_index":2196,"title":{},"body":{"injectables/SummaryInformationService.html":{}}}],["information.service.ts:22",{"_index":2197,"title":{},"body":{"injectables/SummaryInformationService.html":{}}}],["information/summary",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"coverage.html":{}}}],["information_collection_creation",{"_index":2748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["information_collection_edition",{"_index":2749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["informationcollection",{"_index":586,"title":{"entities/InformationCollection.html":{}},"body":{"entities/Category.html":{},"classes/Department.html":{},"entities/Evidence.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["informationcollection.category",{"_index":587,"title":{},"body":{"entities/Category.html":{}}}],["informationcollection.department",{"_index":969,"title":{},"body":{"classes/Department.html":{}}}],["informationcollection.department.fullname",{"_index":2445,"title":{},"body":{"injectables/WordService.html":{}}}],["informationcollection.recopilation",{"_index":1931,"title":{},"body":{"entities/Recopilation.html":{}}}],["informationcollectionrepository",{"_index":1221,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/LinksService.html":{}}}],["informationcollections",{"_index":572,"title":{},"body":{"entities/Category.html":{},"classes/Department.html":{},"injectables/InformationCollectionsService.html":{},"entities/Recopilation.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["informationcollections.every((ic",{"_index":2093,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["informationcollections.foreach((ic",{"_index":1590,"title":{},"body":{"injectables/InformationCollectionsService.html":{},"injectables/RecopilationsService.html":{}}}],["informationcollections.foreach((info",{"_index":2448,"title":{},"body":{"injectables/WordService.html":{}}}],["informationcollections.foreach((inforcollec",{"_index":2455,"title":{},"body":{"injectables/WordService.html":{}}}],["informationcollections.length",{"_index":2092,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["informationcollections.push(infcol",{"_index":2451,"title":{},"body":{"injectables/WordService.html":{}}}],["informationcollections.push(informationcollection",{"_index":2444,"title":{},"body":{"injectables/WordService.html":{}}}],["informationcollectionscontroller",{"_index":1531,"title":{"controllers/InformationCollectionsController.html":{}},"body":{"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"coverage.html":{}}}],["informationcollectionsmodule",{"_index":39,"title":{"modules/InformationCollectionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InformationCollectionsModule.html":{},"modules.html":{},"overview.html":{}}}],["informationcollectionsrepository",{"_index":1578,"title":{},"body":{"injectables/InformationCollectionsService.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["informationcollectionsservice",{"_index":1552,"title":{"injectables/InformationCollectionsService.html":{}},"body":{"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"coverage.html":{},"overview.html":{}}}],["ingresando",{"_index":2228,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["iniciar",{"_index":1700,"title":{},"body":{"injectables/MailsService.html":{}}}],["inject",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailsModule.html":{}}}],["injectable",{"_index":188,"title":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/MailsService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"injectables/SummaryInformationService.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/MailsService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"injectables/SummaryInformationService.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["injectables",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/MailsService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"injectables/SummaryInformationService.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{},"overview.html":{}}}],["injectrepository",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{}}}],["injectrepository(admin",{"_index":2339,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(categorizedcriteria",{"_index":420,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["injectrepository(category",{"_index":417,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{}}}],["injectrepository(coordinator",{"_index":2340,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(criteria",{"_index":539,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["injectrepository(department",{"_index":1048,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(departmentperrecopilation",{"_index":1047,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{}}}],["injectrepository(document",{"_index":1116,"title":{},"body":{"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{}}}],["injectrepository(evidence",{"_index":1231,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["injectrepository(image",{"_index":1232,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{}}}],["injectrepository(indicator",{"_index":418,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CriterionService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"injectables/RecopilationsService.html":{}}}],["injectrepository(indicatorperrecopilation",{"_index":540,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/RecopilationsService.html":{}}}],["injectrepository(informationcollection",{"_index":1234,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["injectrepository(link",{"_index":1233,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/LinksService.html":{}}}],["injectrepository(notification",{"_index":1780,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["injectrepository(recommendation",{"_index":1902,"title":{},"body":{"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{}}}],["injectrepository(recopilation",{"_index":419,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["injectrepository(user",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationsService.html":{},"injectables/UsersService.html":{}}}],["innerjoin('cc.category",{"_index":454,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["installation",{"_index":2658,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":2661,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["intenta",{"_index":2227,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["intercept",{"_index":2157,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["intercept(context",{"_index":2158,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["interface",{"_index":1295,"title":{"interfaces/Filter.html":{},"interfaces/RecopilationDto.html":{}},"body":{"interfaces/Filter.html":{},"interfaces/RecopilationDto.html":{},"coverage.html":{}}}],["interfaces",{"_index":1297,"title":{},"body":{"interfaces/Filter.html":{},"interfaces/RecopilationDto.html":{},"overview.html":{}}}],["internal",{"_index":2233,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["inválida",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["ipr",{"_index":554,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"injectables/RecopilationsService.html":{}}}],["ipr.indicator.index",{"_index":555,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["is_public_key",{"_index":192,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isafter",{"_index":816,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["isafter(parseiso(o.departmentenddate",{"_index":833,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["isafter(parseiso(o.enddate",{"_index":839,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["isafter(parseiso(this.departmentenddate",{"_index":843,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["isafter(parseiso(this.enddate",{"_index":846,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["isanswered",{"_index":2091,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["isapproved",{"_index":1514,"title":{},"body":{"entities/InformationCollection.html":{},"injectables/RecopilationsService.html":{},"classes/UpdateInformationCollectionDto.html":{}}}],["isarray",{"_index":613,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CriteriaToRelate.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/IndicatorToRelate.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{}}}],["isboolean",{"_index":703,"title":{},"body":{"classes/CreateCriteriaDto.html":{},"classes/UpdateInformationCollectionDto.html":{}}}],["isboolean()@isoptional",{"_index":700,"title":{},"body":{"classes/CreateCriteriaDto.html":{},"classes/UpdateInformationCollectionDto.html":{}}}],["isdatestring",{"_index":814,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["isemail",{"_index":860,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{}}}],["isemail()@isnotempty",{"_index":1666,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["isemail()@isnotempty()@minlength(values.namealiasminamount)@maxlength(values.departmentemailamount",{"_index":851,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":740,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{}}}],["isenum(evidencetype",{"_index":745,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["isenum(evidencetype)@isnotempty",{"_index":738,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["isenum(notification_types",{"_index":789,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["isenum(sortable_fields",{"_index":1808,"title":{},"body":{"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{}}}],["isenum(user_types",{"_index":865,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(user_types)@isnotempty",{"_index":858,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isint",{"_index":2244,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateRecopilationDto.html":{}}}],["isint()@isoptional",{"_index":2241,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateRecopilationDto.html":{}}}],["isnotempty",{"_index":614,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"classes/CriteriaToRelate.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/IndicatorToRelate.html":{},"classes/LoginAuthDto.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{}}}],["isnotempty()@isdatestring",{"_index":809,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["isnotempty()@isdatestring()@validateif(o",{"_index":802,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["isnotempty()@isenum(notification_types",{"_index":783,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["isnotempty()@isnumber",{"_index":758,"title":{},"body":{"classes/CreateIndicatorPerRecopilationDto.html":{}}}],["isnotempty()@isnumberstring",{"_index":727,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["isnotempty()@isobject",{"_index":780,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["isnotempty()@isstring()@minlength(values.descriptionminamount)@maxlength(values.descriptionmaxamount",{"_index":804,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["isnotempty()@isstring()@minlength(values.helptextminamount)@maxlength(values.helptextmaxamount",{"_index":673,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["isnotempty()@isstring()@minlength(values.namealiasminamount)@maxlength(values.categorynamemaxamount",{"_index":676,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["isnotempty()@isstring()@minlength(values.namealiasminamount)@maxlength(values.recopilationsnamemaxamount",{"_index":807,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["isnumber",{"_index":615,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CriteriaToRelate.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/IndicatorToRelate.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["isnumber()@isnotempty",{"_index":610,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CriteriaToRelate.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/IndicatorToRelate.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{}}}],["isnumber()@isoptional",{"_index":695,"title":{},"body":{"classes/CreateCriteriaDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["isnumberstring",{"_index":741,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"classes/FindOneParams.html":{}}}],["isobject",{"_index":786,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["isoptional",{"_index":704,"title":{},"body":{"classes/CreateCriteriaDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateUserDto.html":{},"classes/FiltersSegmentDto.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginationParams.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateRecopilationDto.html":{}}}],["isoptional()@isstring",{"_index":735,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["isoptional()@isstring()@maxlength(values.evidenceslinkmaxamount",{"_index":733,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["ispublic",{"_index":194,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isready",{"_index":1923,"title":{},"body":{"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"injectables/RecopilationsService.html":{}}}],["isrecommended",{"_index":2085,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["isstring",{"_index":678,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginAuthDto.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["isstring()@isnotempty",{"_index":1668,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["isstring()@isnotempty()@maxlength(255)@minlength(values.namealiasminamount)@maxlength(values.criterionnamealiasmaxamount",{"_index":697,"title":{},"body":{"classes/CreateCriteriaDto.html":{}}}],["isstring()@isnotempty()@minlength(values.departmentfullnameminamount)@maxlength(values.departmentfullnamemaxamount",{"_index":853,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(values.descriptionminamount)@maxlength(values.descriptionmaxamount",{"_index":729,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["isstring()@isnotempty()@minlength(values.helptextminamount)@maxlength(values.helptextmaxamount",{"_index":693,"title":{},"body":{"classes/CreateCriteriaDto.html":{},"classes/CreateIndicatorDto.html":{}}}],["isstring()@isnotempty()@minlength(values.namealiasminamount)@maxlength(values.criterionnamealiasmaxamount",{"_index":691,"title":{},"body":{"classes/CreateCriteriaDto.html":{}}}],["isstring()@isnotempty()@minlength(values.namealiasminamount)@maxlength(values.indicatornamealiasmaxamount",{"_index":750,"title":{},"body":{"classes/CreateIndicatorDto.html":{}}}],["isstring()@isoptional",{"_index":731,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"classes/UpdateCategoryDto.html":{}}}],["isstring()@isoptional()@maxlength(values.departmentpasswordamount",{"_index":855,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(values.helptextminamount)@maxlength(values.helptextmaxamount",{"_index":2254,"title":{},"body":{"classes/UpdateIndicatorDto.html":{}}}],["isstring()@isoptional()@minlength(values.namealiasminamount)@maxlength(values.indicatornamealiasmaxamount",{"_index":2253,"title":{},"body":{"classes/UpdateIndicatorDto.html":{}}}],["items",{"_index":326,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"classes/PaginatedItems.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["items.dto.ts",{"_index":1837,"title":{},"body":{"classes/PaginatedItems.html":{},"coverage.html":{}}}],["items.dto.ts:2",{"_index":1843,"title":{},"body":{"classes/PaginatedItems.html":{}}}],["items.dto.ts:3",{"_index":1848,"title":{},"body":{"classes/PaginatedItems.html":{}}}],["items.dto.ts:4",{"_index":1844,"title":{},"body":{"classes/PaginatedItems.html":{}}}],["items.dto.ts:5",{"_index":1845,"title":{},"body":{"classes/PaginatedItems.html":{}}}],["items.dto.ts:6",{"_index":1850,"title":{},"body":{"classes/PaginatedItems.html":{}}}],["items.dto.ts:7",{"_index":1849,"title":{},"body":{"classes/PaginatedItems.html":{}}}],["items.dto.ts:8",{"_index":1847,"title":{},"body":{"classes/PaginatedItems.html":{}}}],["itemsperpage",{"_index":341,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["join",{"_index":2688,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["json",{"_index":653,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"entities/Notification.html":{}}}],["json(constructhttpresponse(statuscode",{"_index":1343,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["json.parse(data",{"_index":1718,"title":{},"body":{"entities/Notification.html":{}}}],["json.stringify(data",{"_index":1717,"title":{},"body":{"entities/Notification.html":{}}}],["jwt",{"_index":201,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["jwt.jwt_secret",{"_index":206,"title":{},"body":{"guards/AuthGuard.html":{}}}],["jwt_config",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_config.secret",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["kamil",{"_index":2695,"title":{},"body":{"index.html":{}}}],["key",{"_index":2215,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["la",{"_index":828,"title":{},"body":{"classes/CreateRecopilationDto.html":{},"injectables/EvidencesService.html":{},"injectables/RecommendationsService.html":{}}}],["las",{"_index":2439,"title":{},"body":{"injectables/WordService.html":{}}}],["legend",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{},"overview.html":{}}}],["length",{"_index":590,"title":{},"body":{"entities/Category.html":{},"entities/Indicator.html":{},"entities/Recopilation.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{}}}],["less",{"_index":2736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["less_or_equal",{"_index":2735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lessthanorequal",{"_index":2049,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["lessthanorequal(currentdate",{"_index":2137,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["license",{"_index":2701,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":2678,"title":{},"body":{"index.html":{}}}],["limits",{"_index":1174,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["line",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsService.html":{},"injectables/UsersService.html":{}}}],["link",{"_index":1205,"title":{"classes/Link.html":{}},"body":{"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"classes/Link.html":{},"injectables/LinksService.html":{},"injectables/WordService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["link).externallink",{"_index":2492,"title":{},"body":{"injectables/WordService.html":{}}}],["link.controller",{"_index":1210,"title":{},"body":{"modules/EvidencesModule.html":{}}}],["link.service",{"_index":1211,"title":{},"body":{"modules/EvidencesModule.html":{},"controllers/LinksController.html":{}}}],["linkrepository",{"_index":1220,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/LinksService.html":{}}}],["links",{"_index":1635,"title":{},"body":{"controllers/LinksController.html":{},"injectables/LinksService.html":{}}}],["linkscontroller",{"_index":1200,"title":{"controllers/LinksController.html":{}},"body":{"modules/EvidencesModule.html":{},"controllers/LinksController.html":{},"coverage.html":{}}}],["linksservice",{"_index":1195,"title":{"injectables/LinksService.html":{}},"body":{"modules/EvidencesModule.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"coverage.html":{},"overview.html":{}}}],["literal",{"_index":1941,"title":{},"body":{"interfaces/RecopilationDto.html":{},"miscellaneous/typealiases.html":{}}}],["lodash",{"_index":2609,"title":{},"body":{"dependencies.html":{}}}],["logic",{"_index":841,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["login",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailsService.html":{}}}],["login(@body",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginauthdto",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginauthdto",{"_index":122,"title":{"classes/LoginAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["loginauthdto.email",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginauthdto.password",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginresult",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["lts.1",{"_index":2612,"title":{},"body":{"dependencies.html":{}}}],["luego",{"_index":825,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["lógica",{"_index":829,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["mail",{"_index":1696,"title":{},"body":{"injectables/MailsService.html":{}}}],["mail.ts",{"_index":2566,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["mailermodule",{"_index":1674,"title":{},"body":{"modules/MailsModule.html":{}}}],["mailermodule.forrootasync",{"_index":1676,"title":{},"body":{"modules/MailsModule.html":{}}}],["mailerservice",{"_index":1689,"title":{},"body":{"injectables/MailsService.html":{}}}],["mails.service",{"_index":1673,"title":{},"body":{"modules/MailsModule.html":{}}}],["mails/mails.module",{"_index":2320,"title":{},"body":{"modules/UsersModule.html":{}}}],["mails/mails.service",{"_index":1215,"title":{},"body":{"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["mailsmodule",{"_index":40,"title":{"modules/MailsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mailsservice",{"_index":1196,"title":{"injectables/MailsService.html":{}},"body":{"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["manytoone",{"_index":476,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Evidence.html":{},"entities/IndicatorPerRecopilation.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{},"entities/Recommendation.html":{}}}],["manytoone(undefined",{"_index":464,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Evidence.html":{},"entities/IndicatorPerRecopilation.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{},"entities/Recommendation.html":{}}}],["map",{"_index":2163,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{},"classes/TypeORMExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["map((cc",{"_index":2064,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["map((i",{"_index":2075,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["matchdelimiterregexp",{"_index":2578,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["matchfirstdelimiter",{"_index":2582,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matchfirstdelimiter(str",{"_index":2642,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matchfirstoperator",{"_index":2583,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matchfirstoperator(str",{"_index":2644,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matching",{"_index":19,"title":{},"body":{"classes/Admin.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/Coordinator.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"classes/WrongPasswordException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchoperatorregexp",{"_index":2579,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":2745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":679,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["maxlength(100",{"_index":774,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{}}}],["maxlength(100)@isstring()@isnotempty",{"_index":767,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{}}}],["maxlength(255",{"_index":705,"title":{},"body":{"classes/CreateCriteriaDto.html":{}}}],["maxlength(280",{"_index":772,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{}}}],["maxlength(280)@isstring()@isnotempty()@minlength(values.namealiasminamount)@maxlength(values.informationcollectionssummary",{"_index":770,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{}}}],["maxlength(values.categorynamemaxamount",{"_index":682,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["maxlength(values.criterionnamealiasmaxamount",{"_index":706,"title":{},"body":{"classes/CreateCriteriaDto.html":{}}}],["maxlength(values.departmentemailamount",{"_index":863,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(values.departmentfullnamemaxamount",{"_index":862,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(values.departmentpasswordamount",{"_index":864,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(values.descriptionmaxamount",{"_index":744,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"classes/CreateRecopilationDto.html":{}}}],["maxlength(values.evidenceslinkmaxamount",{"_index":746,"title":{},"body":{"classes/CreateEvidenceDto.html":{}}}],["maxlength(values.helptextmaxamount",{"_index":684,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["maxlength(values.indicatornamealiasmaxamount",{"_index":755,"title":{},"body":{"classes/CreateIndicatorDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["maxlength(values.informationcollectionssummary",{"_index":773,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{}}}],["maxlength(values.recopilationsnamemaxamount",{"_index":819,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["message",{"_index":718,"title":{},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeORMExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["metadata",{"_index":2621,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/CreateRecopilationDto.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"injectables/MailsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{}}}],["min",{"_index":1854,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(1",{"_index":1855,"title":{},"body":{"classes/PaginationParams.html":{}}}],["minlength",{"_index":680,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["minlength(values.departmentfullnameminamount",{"_index":861,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(values.descriptionminamount",{"_index":743,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"classes/CreateRecopilationDto.html":{}}}],["minlength(values.helptextminamount",{"_index":683,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["minlength(values.namealiasminamount",{"_index":681,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["miscellaneous",{"_index":2628,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2677,"title":{},"body":{"index.html":{}}}],["mode",{"_index":2667,"title":{},"body":{"index.html":{}}}],["module",{"_index":20,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{},"overview.html":{}}}],["modules",{"_index":22,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":1675,"title":{},"body":{"modules/MailsModule.html":{},"injectables/MailsService.html":{},"dependencies.html":{}}}],["more",{"_index":1308,"title":{},"body":{"classes/FiltersSegmentDto.html":{},"index.html":{}}}],["morethan",{"_index":2050,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["morethan(currentdate",{"_index":2138,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["multer",{"_index":1161,"title":{},"body":{"controllers/EvidencesController.html":{},"dependencies.html":{}}}],["myśliwiec",{"_index":2696,"title":{},"body":{"index.html":{}}}],["name",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateRecopilationDto.html":{},"entities/Criteria.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateIndicatorDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name.url_back}/uploads/${filelink.filename",{"_index":1183,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["nest",{"_index":2656,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":2700,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":2162,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["nestjs",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"controllers/EvidencesController.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":189,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":190,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2247,"title":{},"body":{"classes/UpdateCriteriaDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1159,"title":{},"body":{"controllers/EvidencesController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"classes/FiltersSegmentDto.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginationParams.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"dependencies.html":{}}}],["new",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/CreateRecopilationDto.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"injectables/IndicatorsService.html":{},"injectables/LinksService.html":{},"injectables/RecopilationsService.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["newcategory",{"_index":282,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["newcollection",{"_index":1563,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["newevidence",{"_index":1184,"title":{},"body":{"controllers/EvidencesController.html":{},"controllers/LinksController.html":{}}}],["newindicador",{"_index":1400,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["next",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsService.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"injectables/UsersService.html":{}}}],["node.js",{"_index":2649,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":2614,"title":{},"body":{"dependencies.html":{}}}],["not(in(departmentsids",{"_index":1058,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["not_equal",{"_index":2733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nota",{"_index":820,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["notfoundexception",{"_index":413,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EvidencesService.html":{},"injectables/IndicatorsService.html":{},"injectables/LinksService.html":{}}}],["notfoundexception('collection",{"_index":1239,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/LinksService.html":{}}}],["notfoundexception(`category",{"_index":432,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["notfoundexception(`indicador",{"_index":1512,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["notificación",{"_index":1704,"title":{},"body":{"injectables/MailsService.html":{}}}],["notification",{"_index":1213,"title":{"entities/Notification.html":{}},"body":{"modules/EvidencesModule.html":{},"modules/InformationCollectionsModule.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"modules/RecommendationsModule.html":{},"entities/User.html":{},"coverage.html":{}}}],["notification.dto",{"_index":1741,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/UpdateNotificationDto.html":{}}}],["notification.dto.ts",{"_index":777,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["notification.dto.ts:10",{"_index":781,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:14",{"_index":784,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:18",{"_index":785,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification_types",{"_index":787,"title":{},"body":{"classes/CreateNotificationDto.html":{},"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{},"entities/Notification.html":{},"injectables/RecommendationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["notification_types.evidence_creation",{"_index":1263,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["notification_types.evidence_edition",{"_index":1275,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["notification_types.evidence_error",{"_index":1282,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["notification_types.information_collection_creation",{"_index":1605,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["notification_types.information_collection_edition",{"_index":1629,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["notification_types.recommendation",{"_index":1909,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["notificationcategory",{"_index":1906,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["notificationcategory.id",{"_index":1907,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["notificationcategory.name",{"_index":1908,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["notificationdto",{"_index":1262,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/RecommendationsService.html":{}}}],["notificationrepository",{"_index":1769,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notifications",{"_index":1715,"title":{},"body":{"entities/Notification.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto-8.html":{},"entities/User.html":{},"coverage.html":{}}}],["notifications.constants",{"_index":788,"title":{},"body":{"classes/CreateNotificationDto.html":{},"entities/Notification.html":{},"classes/OrderByParamDto-8.html":{}}}],["notifications.controller",{"_index":1760,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notifications.service",{"_index":1740,"title":{},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{}}}],["notifications.user",{"_index":2272,"title":{},"body":{"entities/User.html":{}}}],["notifications/entities/notification.entity",{"_index":1214,"title":{},"body":{"modules/EvidencesModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/RecommendationsModule.html":{}}}],["notifications/notifications.constants",{"_index":1230,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/RecommendationsService.html":{}}}],["notifications/notifications.service",{"_index":1212,"title":{},"body":{"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{}}}],["notificationscontroller",{"_index":1719,"title":{"controllers/NotificationsController.html":{}},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"coverage.html":{}}}],["notificationsmodule",{"_index":41,"title":{"modules/NotificationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationsservice",{"_index":1197,"title":{"injectables/NotificationsService.html":{}},"body":{"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationtype",{"_index":782,"title":{},"body":{"classes/CreateNotificationDto.html":{},"entities/Notification.html":{},"miscellaneous/typealiases.html":{}}}],["notifycoordinators",{"_index":1565,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{}}}],["null",{"_index":881,"title":{},"body":{"entities/Criteria.html":{},"injectables/EvidencesService.html":{},"injectables/RecopilationsService.html":{},"entities/User.html":{},"injectables/WordService.html":{}}}],["nullable",{"_index":581,"title":{},"body":{"entities/Category.html":{},"entities/Criteria.html":{},"entities/Evidence.html":{},"classes/Image.html":{},"entities/Indicator.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{},"entities/Recopilation.html":{},"entities/User.html":{}}}],["number",{"_index":401,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"injectables/CriterionService.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/FindOneParams.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"entities/Notification.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateRecopilationDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{},"miscellaneous/functions.html":{}}}],["number(id",{"_index":362,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{},"controllers/IndicatorsController.html":{}}}],["number(indicatorindex",{"_index":370,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{}}}],["number(itemsperpage",{"_index":542,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{}}}],["number(page",{"_index":543,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{}}}],["number(recopilationid",{"_index":374,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{}}}],["numbers",{"_index":2365,"title":{},"body":{"injectables/UsersService.html":{}}}],["object",{"_index":779,"title":{},"body":{"classes/CreateNotificationDto.html":{},"controllers/EvidencesController.html":{}}}],["object.values(e.constraints).join",{"_index":662,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{}}}],["object.values(notification_types",{"_index":1716,"title":{},"body":{"entities/Notification.html":{}}}],["object.values(user_types",{"_index":2279,"title":{},"body":{"entities/User.html":{}}}],["observable",{"_index":2161,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["occurred",{"_index":1339,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["oldrecommendations",{"_index":2128,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["ondelete",{"_index":472,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Evidence.html":{},"entities/IndicatorPerRecopilation.html":{},"entities/Recommendation.html":{}}}],["one",{"_index":1327,"title":{},"body":{"classes/FindOneParams.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["onetomany",{"_index":601,"title":{},"body":{"entities/Category.html":{},"entities/Criteria.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Indicator.html":{},"entities/InformationCollection.html":{},"entities/Recopilation.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":574,"title":{},"body":{"entities/Category.html":{},"entities/Criteria.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Indicator.html":{},"entities/InformationCollection.html":{},"entities/Recopilation.html":{},"entities/User.html":{}}}],["onupdate",{"_index":474,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/IndicatorPerRecopilation.html":{}}}],["open",{"_index":2679,"title":{},"body":{"index.html":{}}}],["operator",{"_index":1301,"title":{},"body":{"interfaces/Filter.html":{},"miscellaneous/typealiases.html":{}}}],["operators",{"_index":2580,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateEvidenceDto.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"injectables/MailsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateIndicatorDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{},"miscellaneous/functions.html":{}}}],["ordenar",{"_index":2438,"title":{},"body":{"injectables/WordService.html":{}}}],["order",{"_index":429,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{}}}],["order.foreach((info",{"_index":2461,"title":{},"body":{"injectables/WordService.html":{}}}],["order.push(evid",{"_index":2463,"title":{},"body":{"injectables/WordService.html":{}}}],["order.push(evidence",{"_index":2457,"title":{},"body":{"injectables/WordService.html":{}}}],["orderby",{"_index":343,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["orderbyparamdto",{"_index":288,"title":{"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["ordertype",{"_index":344,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/OrderTypeParamDto.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ordertypeparamdto",{"_index":289,"title":{"classes/OrderTypeParamDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/OrderTypeParamDto.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["orm",{"_index":416,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"classes/TypeORMExceptionFilter.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["orm.ts",{"_index":2584,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{},"overview.html":{}}}],["overview",{"_index":2705,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":2588,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packer",{"_index":2418,"title":{},"body":{"injectables/WordService.html":{}}}],["packer.tobuffer(doc",{"_index":2536,"title":{},"body":{"injectables/WordService.html":{}}}],["page",{"_index":339,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationParams.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["paginated",{"_index":325,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["paginateditems",{"_index":349,"title":{"classes/PaginatedItems.html":{}},"body":{"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"classes/PaginatedItems.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["paginationparams",{"_index":287,"title":{"classes/PaginationParams.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationParams.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["para",{"_index":823,"title":{},"body":{"classes/CreateRecopilationDto.html":{},"injectables/MailsService.html":{},"injectables/WordService.html":{}}}],["parag",{"_index":2468,"title":{},"body":{"injectables/WordService.html":{}}}],["parag.push",{"_index":2471,"title":{},"body":{"injectables/WordService.html":{}}}],["paragraph",{"_index":2414,"title":{},"body":{"injectables/WordService.html":{}}}],["param",{"_index":313,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{}}}],["param('categoryid",{"_index":1559,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["param('criterionid",{"_index":2379,"title":{},"body":{"controllers/WordController.html":{}}}],["param('departmentid",{"_index":1561,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["param('id",{"_index":360,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/RecopilationsController.html":{}}}],["param('idcrit",{"_index":2187,"title":{},"body":{"controllers/SummaryInformationController.html":{}}}],["param('idrecop",{"_index":2188,"title":{},"body":{"controllers/SummaryInformationController.html":{}}}],["param('indicatorindex",{"_index":368,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{}}}],["param('recopilationid",{"_index":372,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/IndicatorsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/WordController.html":{}}}],["param.dto",{"_index":331,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":1800,"title":{},"body":{"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:11",{"_index":1804,"title":{},"body":{"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{}}}],["param.dto.ts:14",{"_index":1810,"title":{},"body":{"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-6.html":{}}}],["param.dto.ts:9",{"_index":1835,"title":{},"body":{"classes/OrderTypeParamDto.html":{}}}],["parameters",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"injectables/MailsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{},"miscellaneous/functions.html":{}}}],["params.dto",{"_index":322,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params.dto.ts",{"_index":1328,"title":{},"body":{"classes/FindOneParams.html":{},"classes/PaginationParams.html":{},"coverage.html":{}}}],["params.dto.ts:11",{"_index":1852,"title":{},"body":{"classes/PaginationParams.html":{}}}],["params.dto.ts:18",{"_index":1853,"title":{},"body":{"classes/PaginationParams.html":{}}}],["params.dto.ts:5",{"_index":1329,"title":{},"body":{"classes/FindOneParams.html":{}}}],["parece",{"_index":2220,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["parse",{"_index":1316,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["parseamos",{"_index":826,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["parsefilepipebuilder",{"_index":1152,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["parsefilepipebuilder().build",{"_index":1186,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["parsefilterssegment",{"_index":1315,"title":{},"body":{"classes/FiltersSegmentDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["parsefilterssegment(segment",{"_index":2645,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parsefilterssegment(segment.value",{"_index":1324,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["parsefilterstotypeorm",{"_index":414,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["parsefilterstotypeorm(filters",{"_index":430,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parseiso",{"_index":817,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["parseiso(o.startdate",{"_index":842,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["parseiso(this.startdate",{"_index":844,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["partial",{"_index":2753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partialtype",{"_index":2238,"title":{},"body":{"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcriteriadto",{"_index":2246,"title":{},"body":{"classes/UpdateCriteriaDto.html":{}}}],["partialtype(createevidencedto",{"_index":2251,"title":{},"body":{"classes/UpdateEvidenceDto.html":{}}}],["partialtype(createnotificationdto",{"_index":2259,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["partialtype(createrecopilationdto",{"_index":2261,"title":{},"body":{"classes/UpdateRecopilationDto.html":{}}}],["partialtype(createuserdto",{"_index":2265,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":1681,"title":{},"body":{"modules/MailsModule.html":{},"injectables/UsersService.html":{}}}],["passport",{"_index":2616,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/DepartmentsService.html":{},"classes/LoginAuthDto.html":{},"injectables/MailsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["password.exception",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["password.exception.ts",{"_index":2538,"title":{},"body":{"classes/WrongPasswordException.html":{},"coverage.html":{}}}],["password.exception.ts:1",{"_index":2539,"title":{},"body":{"classes/WrongPasswordException.html":{}}}],["passwordchange",{"_index":2282,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["passwordchange(@param",{"_index":2309,"title":{},"body":{"controllers/UsersController.html":{}}}],["passwordchange(id",{"_index":2333,"title":{},"body":{"injectables/UsersService.html":{}}}],["passwordchange(undefined",{"_index":2288,"title":{},"body":{"controllers/UsersController.html":{}}}],["passwordtouse",{"_index":2344,"title":{},"body":{"injectables/UsersService.html":{}}}],["patch",{"_index":314,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id",{"_index":359,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/IndicatorsController.html":{},"controllers/NotificationsController.html":{}}}],["patch(':id",{"_index":503,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1148,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["patch(':id/set",{"_index":2016,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["patch('password",{"_index":2289,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["path.join(__dirname",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":203,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["per",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"classes/OrderByParamDto-3.html":{},"entities/Recommendation.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["pg",{"_index":2618,"title":{},"body":{"dependencies.html":{}}}],["pipe(map((data",{"_index":2172,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["please",{"_index":2689,"title":{},"body":{"index.html":{}}}],["pnpm",{"_index":2660,"title":{},"body":{"index.html":{}}}],["por",{"_index":2441,"title":{},"body":{"injectables/WordService.html":{}}}],["post",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@httpcode(httpstatus.created",{"_index":899,"title":{},"body":{"controllers/CriterionController.html":{},"controllers/IndicatorsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/UsersController.html":{}}}],["post()@httpcode(httpstatus.created)@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1141,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["posterior",{"_index":837,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["postgres",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_unique_constraint_violation_code",{"_index":2208,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{}}}],["prevdepartment",{"_index":2465,"title":{},"body":{"injectables/WordService.html":{}}}],["primarycolumn",{"_index":1374,"title":{},"body":{"entities/Indicator.html":{}}}],["primarygeneratedcolumn",{"_index":469,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Evidence.html":{},"entities/IndicatorPerRecopilation.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{},"entities/Recommendation.html":{},"entities/Recopilation.html":{},"entities/User.html":{}}}],["private",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{}}}],["production",{"_index":2669,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":2648,"title":{},"body":{"index.html":{}}}],["project",{"_index":2680,"title":{},"body":{"index.html":{}}}],["promise",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/EvidencesService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{}}}],["promise.all",{"_index":548,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["properties",{"_index":462,"title":{"properties.html":{}},"body":{"entities/CategorizedCriteria.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/Document.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/Image.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"entities/InformationCollection.html":{},"classes/Link.html":{},"classes/LoginAuthDto.html":{},"entities/Notification.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateRecopilationDto.html":{},"entities/User.html":{},"injectables/WordService.html":{},"properties.html":{}}}],["provide",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{},"overview.html":{}}}],["prueba",{"_index":2380,"title":{},"body":{"controllers/WordController.html":{}}}],["public",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeORMExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('login')@httpcode(httpstatus.ok",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["put",{"_index":1011,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/RecopilationsController.html":{}}}],["put('recommend",{"_index":2014,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["put('relate",{"_index":2012,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["que",{"_index":2221,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["query",{"_index":315,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"classes/TypeORMExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["queryfailederror",{"_index":2206,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["questionnaire",{"_index":2527,"title":{},"body":{"injectables/WordService.html":{}}}],["r",{"_index":2087,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["r.category",{"_index":2060,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["r.category.id",{"_index":2088,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["randomname",{"_index":2742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":2690,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{}}}],["ready",{"_index":1978,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["recomend",{"_index":1912,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["recommend",{"_index":1919,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["recommendation",{"_index":592,"title":{"entities/Recommendation.html":{}},"body":{"entities/Category.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Recommendation.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recommendation.category",{"_index":593,"title":{},"body":{"entities/Category.html":{}}}],["recommendation.departmentperrecopilation",{"_index":981,"title":{},"body":{"entities/DepartmentPerRecopilation.html":{}}}],["recommendation.dto",{"_index":1877,"title":{},"body":{"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{}}}],["recommendation.dto.ts",{"_index":792,"title":{},"body":{"classes/CreateRecommendationDto.html":{},"coverage.html":{}}}],["recommendation.dto.ts:10",{"_index":794,"title":{},"body":{"classes/CreateRecommendationDto.html":{}}}],["recommendation.dto.ts:14",{"_index":793,"title":{},"body":{"classes/CreateRecommendationDto.html":{}}}],["recommendation.dto.ts:6",{"_index":795,"title":{},"body":{"classes/CreateRecommendationDto.html":{}}}],["recommendationrepository",{"_index":2032,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["recommendations",{"_index":573,"title":{},"body":{"entities/Category.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/OrderByParamDto-9.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"coverage.html":{}}}],["recommendations.constants",{"_index":1833,"title":{},"body":{"classes/OrderByParamDto-9.html":{}}}],["recommendations.controller",{"_index":1888,"title":{},"body":{"modules/RecommendationsModule.html":{}}}],["recommendations.push",{"_index":2126,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["recommendations.service",{"_index":1876,"title":{},"body":{"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{}}}],["recommendations/entities/recommendation.entity",{"_index":2024,"title":{},"body":{"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{}}}],["recommendationscontroller",{"_index":1867,"title":{"controllers/RecommendationsController.html":{}},"body":{"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"coverage.html":{}}}],["recommendationsmodule",{"_index":42,"title":{"modules/RecommendationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecommendationsModule.html":{},"modules.html":{},"overview.html":{}}}],["recommendationsrepository",{"_index":1896,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["recommendationsservice",{"_index":1875,"title":{"injectables/RecommendationsService.html":{}},"body":{"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"coverage.html":{},"overview.html":{}}}],["recommendcategories",{"_index":2027,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["recommendcategories(recommendcategoriesdto",{"_index":2042,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["recommendcategoriesdto",{"_index":619,"title":{"classes/RecommendCategoriesDto.html":{}},"body":{"classes/CategoryToRecommend.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/RecommendCategoriesDto.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"coverage.html":{}}}],["recommendcategoriestodepartments",{"_index":1948,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["recommendcategoriestodepartments(recommendcategoriesdto",{"_index":1968,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["recommendedcategories",{"_index":1942,"title":{},"body":{"interfaces/RecopilationDto.html":{},"injectables/RecopilationsService.html":{}}}],["recommendservice",{"_index":1880,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["recopilación",{"_index":1288,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["recopilatio.entity",{"_index":527,"title":{},"body":{"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Indicator.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{}}}],["recopilatio.entity.ts",{"_index":1381,"title":{},"body":{"entities/IndicatorPerRecopilation.html":{},"coverage.html":{}}}],["recopilatio.entity.ts:19",{"_index":1386,"title":{},"body":{"entities/IndicatorPerRecopilation.html":{}}}],["recopilatio.entity.ts:29",{"_index":1384,"title":{},"body":{"entities/IndicatorPerRecopilation.html":{}}}],["recopilatio.entity.ts:9",{"_index":1382,"title":{},"body":{"entities/IndicatorPerRecopilation.html":{}}}],["recopilation",{"_index":382,"title":{"entities/Recopilation.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"entities/DepartmentPerRecopilation.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/EvidencesService.html":{},"entities/IndicatorPerRecopilation.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"coverage.html":{}}}],["recopilation.categorizedcriterion",{"_index":471,"title":{},"body":{"entities/CategorizedCriteria.html":{},"injectables/RecopilationsService.html":{}}}],["recopilation.departmentenddate",{"_index":2069,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["recopilation.departmentsperrecopilation",{"_index":983,"title":{},"body":{"entities/DepartmentPerRecopilation.html":{}}}],["recopilation.departmentsperrecopilation.map",{"_index":2057,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["recopilation.departmentsperrecopilation.map(async",{"_index":2082,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["recopilation.description",{"_index":2066,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["recopilation.dto",{"_index":1021,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateRecopilationDto.html":{}}}],["recopilation.dto.ts",{"_index":711,"title":{},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CriteriaToRelate.html":{},"classes/IndicatorToRelate.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateRecopilationDto.html":{},"coverage.html":{}}}],["recopilation.dto.ts:10",{"_index":759,"title":{},"body":{"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{}}}],["recopilation.dto.ts:12",{"_index":716,"title":{},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{}}}],["recopilation.dto.ts:13",{"_index":2141,"title":{},"body":{"classes/RelateIndicatorsToRecopilationDto.html":{}}}],["recopilation.dto.ts:17",{"_index":808,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["recopilation.dto.ts:20",{"_index":2140,"title":{},"body":{"classes/RelateIndicatorsToRecopilationDto.html":{}}}],["recopilation.dto.ts:23",{"_index":805,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["recopilation.dto.ts:26",{"_index":1389,"title":{},"body":{"classes/IndicatorToRelate.html":{}}}],["recopilation.dto.ts:27",{"_index":810,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["recopilation.dto.ts:33",{"_index":1388,"title":{},"body":{"classes/IndicatorToRelate.html":{}}}],["recopilation.dto.ts:34",{"_index":803,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["recopilation.dto.ts:39",{"_index":886,"title":{},"body":{"classes/CriteriaToRelate.html":{}}}],["recopilation.dto.ts:41",{"_index":806,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["recopilation.dto.ts:43",{"_index":885,"title":{},"body":{"classes/CriteriaToRelate.html":{}}}],["recopilation.dto.ts:50",{"_index":812,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["recopilation.dto.ts:6",{"_index":717,"title":{},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{}}}],["recopilation.dto.ts:8",{"_index":2262,"title":{},"body":{"classes/UpdateRecopilationDto.html":{}}}],["recopilation.enddate",{"_index":2068,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["recopilation.entity",{"_index":975,"title":{},"body":{"classes/Department.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"entities/Recommendation.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/UsersModule.html":{}}}],["recopilation.entity.ts",{"_index":977,"title":{},"body":{"entities/DepartmentPerRecopilation.html":{},"coverage.html":{}}}],["recopilation.entity.ts:16",{"_index":980,"title":{},"body":{"entities/DepartmentPerRecopilation.html":{}}}],["recopilation.entity.ts:22",{"_index":982,"title":{},"body":{"entities/DepartmentPerRecopilation.html":{}}}],["recopilation.entity.ts:29",{"_index":984,"title":{},"body":{"entities/DepartmentPerRecopilation.html":{}}}],["recopilation.entity.ts:35",{"_index":979,"title":{},"body":{"entities/DepartmentPerRecopilation.html":{}}}],["recopilation.id",{"_index":1602,"title":{},"body":{"injectables/InformationCollectionsService.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["recopilation.indicatorsperrecopilations",{"_index":1385,"title":{},"body":{"entities/IndicatorPerRecopilation.html":{},"injectables/RecopilationsService.html":{}}}],["recopilation.indicatorsperrecopilations.map((ipr",{"_index":2061,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["recopilation.indicatorsperrecopilations.some",{"_index":564,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["recopilation.informationcollections",{"_index":1526,"title":{},"body":{"entities/InformationCollection.html":{}}}],["recopilation.isready",{"_index":2019,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["recopilation.name",{"_index":1603,"title":{},"body":{"injectables/InformationCollectionsService.html":{},"injectables/RecopilationsService.html":{}}}],["recopilation.startdate",{"_index":2067,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["recopilationdata",{"_index":1954,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["recopilationdata.id",{"_index":2009,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["recopilationdto",{"_index":1939,"title":{"interfaces/RecopilationDto.html":{}},"body":{"interfaces/RecopilationDto.html":{},"injectables/RecopilationsService.html":{},"coverage.html":{}}}],["recopilationid",{"_index":303,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/CategoryToRecommend.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/EvidencesService.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"classes/RecommendCategoriesDto.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"controllers/WordController.html":{}}}],["recopilationname",{"_index":1257,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{}}}],["recopilationrepository",{"_index":396,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["recopilations",{"_index":1009,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-7.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"coverage.html":{}}}],["recopilations.constants",{"_index":1818,"title":{},"body":{"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-7.html":{}}}],["recopilations.constants.ts",{"_index":2561,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["recopilations.controller",{"_index":1031,"title":{},"body":{"modules/DepartmentsPerRecopilationsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/RecopilationsModule.html":{}}}],["recopilations.controller.ts",{"_index":1008,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"coverage.html":{}}}],["recopilations.controller.ts:29",{"_index":1439,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{}}}],["recopilations.controller.ts:32",{"_index":1013,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{}}}],["recopilations.controller.ts:45",{"_index":1440,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{}}}],["recopilations.controller.ts:50",{"_index":1437,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{}}}],["recopilations.controller.ts:56",{"_index":1014,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{}}}],["recopilations.controller.ts:60",{"_index":1444,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{}}}],["recopilations.controller.ts:61",{"_index":1012,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{}}}],["recopilations.controller.ts:71",{"_index":1018,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{}}}],["recopilations.controller.ts:72",{"_index":1441,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{}}}],["recopilations.controller.ts:83",{"_index":1015,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{}}}],["recopilations.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["recopilations.module.ts",{"_index":1030,"title":{},"body":{"modules/DepartmentsPerRecopilationsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{}}}],["recopilations.service",{"_index":1020,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{}}}],["recopilations.service.ts",{"_index":1034,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"coverage.html":{}}}],["recopilations.service.ts:100",{"_index":1461,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["recopilations.service.ts:12",{"_index":1456,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["recopilations.service.ts:131",{"_index":1042,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["recopilations.service.ts:16",{"_index":1038,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["recopilations.service.ts:22",{"_index":1459,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["recopilations.service.ts:26",{"_index":1040,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["recopilations.service.ts:36",{"_index":1460,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["recopilations.service.ts:43",{"_index":1458,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["recopilations.service.ts:48",{"_index":1041,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["recopilations.service.ts:55",{"_index":1044,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["recopilations.service.ts:67",{"_index":1462,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["recopilations.service.ts:98",{"_index":1045,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["recopilations/departments",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["recopilations/dto/create",{"_index":709,"title":{},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"coverage.html":{}}}],["recopilations/dto/order",{"_index":1817,"title":{},"body":{"classes/OrderByParamDto-3.html":{},"coverage.html":{}}}],["recopilations/dto/update",{"_index":2249,"title":{},"body":{"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"coverage.html":{}}}],["recopilations/entities/departments",{"_index":974,"title":{},"body":{"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"injectables/DepartmentsService.html":{},"entities/Recommendation.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["recopilations/entities/indicator",{"_index":526,"title":{},"body":{"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"entities/Recopilation.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"coverage.html":{}}}],["recopilations/entities/recopilation.entity",{"_index":383,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{}}}],["recopilations/indicators",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"coverage.html":{}}}],["recopilationscontroller",{"_index":1943,"title":{"controllers/RecopilationsController.html":{}},"body":{"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"coverage.html":{}}}],["recopilationsmodule",{"_index":43,"title":{"modules/RecopilationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecopilationsModule.html":{},"modules.html":{},"overview.html":{}}}],["recopilationsperdepartment",{"_index":968,"title":{},"body":{"classes/Department.html":{}}}],["recopilationsperindicator",{"_index":1366,"title":{},"body":{"entities/Indicator.html":{},"injectables/IndicatorsService.html":{}}}],["recopilationsrepository",{"_index":1893,"title":{},"body":{"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["recopilationsservice",{"_index":1986,"title":{"injectables/RecopilationsService.html":{}},"body":{"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"coverage.html":{},"overview.html":{}}}],["record",{"_index":1611,"title":{},"body":{"injectables/InformationCollectionsService.html":{},"entities/Notification.html":{}}}],["reflect",{"_index":2620,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{},"guards/RolesGuard.html":{}}}],["related",{"_index":558,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["relateindicatorstorecopilation",{"_index":1949,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["relateindicatorstorecopilation(relateindicatorstorecopilationdto",{"_index":1971,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["relateindicatorstorecopilationdto",{"_index":887,"title":{"classes/RelateIndicatorsToRecopilationDto.html":{}},"body":{"classes/CriteriaToRelate.html":{},"classes/IndicatorToRelate.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"coverage.html":{}}}],["relatetoindicators",{"_index":2028,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["relatetoindicators(relateindicatorstorecopilationdto",{"_index":2044,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["relations",{"_index":426,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["relative",{"_index":2506,"title":{},"body":{"injectables/WordService.html":{}}}],["remove",{"_index":487,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param",{"_index":2307,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(@param('id",{"_index":515,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{}}}],["remove(id",{"_index":497,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"injectables/UsersService.html":{}}}],["remove(undefined",{"_index":2292,"title":{},"body":{"controllers/UsersController.html":{}}}],["renamefile",{"_index":1162,"title":{},"body":{"controllers/EvidencesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{},"index.html":{}}}],["req",{"_index":1551,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"controllers/NotificationsController.html":{},"controllers/RecopilationsController.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":184,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/InformationCollectionsController.html":{},"controllers/NotificationsController.html":{},"controllers/RecopilationsController.html":{},"dependencies.html":{}}}],["request.headers.authorization?.split",{"_index":208,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request['user",{"_index":207,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request['user'].id",{"_index":1749,"title":{},"body":{"controllers/NotificationsController.html":{},"controllers/RecopilationsController.html":{}}}],["request['user'].type",{"_index":1566,"title":{},"body":{"controllers/InformationCollectionsController.html":{},"controllers/RecopilationsController.html":{}}}],["required",{"_index":1306,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["requiredroles",{"_index":2149,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":2151,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiresevidence",{"_index":689,"title":{},"body":{"classes/CreateCriteriaDto.html":{},"entities/Criteria.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":2371,"title":{},"body":{"controllers/WordController.html":{}}}],["res.send(buffer.buffer",{"_index":2404,"title":{},"body":{"controllers/WordController.html":{}}}],["res.send(prueba",{"_index":2382,"title":{},"body":{"controllers/WordController.html":{}}}],["res.set",{"_index":2385,"title":{},"body":{"controllers/WordController.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{},"overview.html":{}}}],["response",{"_index":643,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"classes/TypeORMExceptionFilter.html":{},"coverage.html":{}}}],["response.status(statuscode).json",{"_index":2236,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["response.statuscode",{"_index":2170,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["response.ts",{"_index":2574,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["response.type",{"_index":2168,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}}}],["response.type.ts",{"_index":2717,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["result",{"_index":439,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/IndicatorsService.html":{},"controllers/RecommendationsController.html":{}}}],["result.affected",{"_index":441,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/IndicatorsService.html":{}}}],["results",{"_index":18,"title":{},"body":{"classes/Admin.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/Coordinator.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"classes/WrongPasswordException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/FiltersSegmentDto.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/CreateRecopilationDto.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"injectables/MailsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{},"miscellaneous/functions.html":{}}}],["role",{"_index":335,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"guards/RolesGuard.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":296,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{}}}],["role.admin)@delete('/:id')@httpcode(httpstatus.no_content",{"_index":284,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["role.admin)@delete(':id')@httpcode(httpstatus.no_content",{"_index":1974,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["role.admin)@get",{"_index":293,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["role.admin)@patch('/:id",{"_index":310,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["role.admin)@patch(':id",{"_index":1981,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["role.admin)@patch(':id/set",{"_index":1977,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["role.admin)@post()@httpcode(httpstatus.created",{"_index":280,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/RecopilationsController.html":{}}}],["role.admin)@put",{"_index":1984,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["role.admin)@put('recommend",{"_index":1969,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["role.admin)@put('relate",{"_index":1972,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["role.coordinator",{"_index":292,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["role.department",{"_index":350,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EvidencesController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecopilationsController.html":{}}}],["role.department)@get",{"_index":1958,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["role.department)@get('/:id",{"_index":305,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["role.department)@get('/indicator/:indicatorindex",{"_index":297,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["role.department)@get('/recopilation/:recopilationid",{"_index":301,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["role.department)@get(':id",{"_index":1960,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["role.department)@get(':id/detailed",{"_index":1963,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["role.department)@get(':id/matrix",{"_index":1966,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["role.department)@get('active",{"_index":1956,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["role.enum",{"_index":2146,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":333,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.coordinator",{"_index":279,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/EvidencesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"controllers/UsersController.html":{},"controllers/WordController.html":{}}}],["roles(role.department",{"_index":291,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["roles.decorator",{"_index":2148,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles.guard",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["roles_key",{"_index":2147,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":218,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AuthModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":2664,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2164,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{},"dependencies.html":{}}}],["saver",{"_index":2602,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":2653,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1178,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["se",{"_index":1910,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["secret",{"_index":205,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["sections",{"_index":2518,"title":{},"body":{"injectables/WordService.html":{}}}],["sectiontype",{"_index":2419,"title":{},"body":{"injectables/WordService.html":{}}}],["sectiontype.continuous",{"_index":2519,"title":{},"body":{"injectables/WordService.html":{}}}],["secure",{"_index":1679,"title":{},"body":{"modules/MailsModule.html":{}}}],["seen",{"_index":1706,"title":{},"body":{"entities/Notification.html":{},"injectables/NotificationsService.html":{},"miscellaneous/variables.html":{}}}],["segment",{"_index":1317,"title":{},"body":{"classes/FiltersSegmentDto.html":{},"miscellaneous/functions.html":{}}}],["segment.dto",{"_index":329,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["segment.dto.ts",{"_index":1304,"title":{},"body":{"classes/FiltersSegmentDto.html":{},"coverage.html":{}}}],["segment.dto.ts:25",{"_index":1313,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["segment.ts",{"_index":2581,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["select",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DepartmentsService.html":{},"entities/User.html":{}}}],["select('c.id",{"_index":447,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["sendmail",{"_index":1686,"title":{},"body":{"injectables/MailsService.html":{}}}],["sendmail(user",{"_index":1691,"title":{},"body":{"injectables/MailsService.html":{}}}],["sendnotification",{"_index":1687,"title":{},"body":{"injectables/MailsService.html":{}}}],["sendnotification(user",{"_index":1693,"title":{},"body":{"injectables/MailsService.html":{}}}],["ser",{"_index":836,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["server",{"_index":2234,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{},"index.html":{}}}],["servestaticmodule",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["sesión",{"_index":1701,"title":{},"body":{"injectables/MailsService.html":{}}}],["set",{"_index":1035,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["set(createdepartmentsperrecopilationdto",{"_index":1043,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["setasready",{"_index":1950,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["setasready(@param('id",{"_index":2017,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["setasready(id",{"_index":1976,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["setmetadata(is_public_key",{"_index":2747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":2754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shared",{"_index":2625,"title":{},"body":{"dependencies.html":{}}}],["shared/validations",{"_index":603,"title":{},"body":{"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["side",{"_index":2654,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["sistema",{"_index":2226,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["size",{"_index":2473,"title":{},"body":{"injectables/WordService.html":{}}}],["skip",{"_index":428,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"injectables/UsersService.html":{}}}],["soft",{"_index":606,"title":{},"body":{"entities/Category.html":{},"entities/Criteria.html":{}}}],["sort((a",{"_index":2078,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["sortable_fields",{"_index":1806,"title":{},"body":{"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sortable_fields})@apipropertyoptional()@isenum(sortable_fields)@isstring()@isoptional",{"_index":1803,"title":{},"body":{"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{}}}],["sortablefield",{"_index":1801,"title":{},"body":{"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"miscellaneous/typealiases.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Admin.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/Coordinator.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"modules/CriterionModule.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"modules/EvidencesModule.html":{},"injectables/EvidencesService.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"modules/IndicatorsModule.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateCriteriaDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateEvidenceDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateRecopilationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"classes/WrongPasswordException.html":{},"index.html":{}}}],["sponsors",{"_index":2683,"title":{},"body":{"index.html":{}}}],["src/.../categories.constants.ts",{"_index":2721,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../categorized",{"_index":2720,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../class",{"_index":2637,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":2715,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../construct",{"_index":2635,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../criterion.constants.ts",{"_index":2719,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../departments",{"_index":2722,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../evidences.constants.ts",{"_index":2630,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../file",{"_index":2729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../http",{"_index":2716,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../indicators.constants.ts",{"_index":2723,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../information",{"_index":2724,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../login",{"_index":2636,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":2634,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../notifications.constants.ts",{"_index":2718,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../parse",{"_index":2638,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":2730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../recommendations.constants.ts",{"_index":2726,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../recopilations.constants.ts",{"_index":2725,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":2631,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../type",{"_index":2731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../users.constants.ts",{"_index":2727,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["src/core/auth/auth.controller.ts",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/core/auth/auth.controller.ts:23",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/core/auth/auth.guard.ts",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/core/auth/auth.guard.ts:14",{"_index":177,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/core/auth/auth.guard.ts:21",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/core/auth/auth.guard.ts:48",{"_index":185,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/core/auth/auth.module.ts",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/core/auth/auth.service.ts",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/core/auth/auth.service.ts:11",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/core/auth/auth.service.ts:18",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/core/auth/dto/login",{"_index":1664,"title":{},"body":{"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["src/core/auth/errors/wrong",{"_index":2537,"title":{},"body":{"classes/WrongPasswordException.html":{},"coverage.html":{}}}],["src/core/auth/public.decorator.ts",{"_index":2548,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/auth/role.enum.ts",{"_index":2632,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/auth/roles.decorator.ts",{"_index":2551,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/auth/roles.guard.ts",{"_index":2142,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/auth/roles.guard.ts:10",{"_index":2145,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/auth/roles.guard.ts:7",{"_index":2144,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/categories/categories.constants.ts",{"_index":2552,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/categories/categories.controller.ts",{"_index":268,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/core/categories/categories.controller.ts:105",{"_index":302,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/core/categories/categories.controller.ts:32",{"_index":294,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/core/categories/categories.controller.ts:59",{"_index":306,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/core/categories/categories.controller.ts:67",{"_index":281,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/core/categories/categories.controller.ts:74",{"_index":311,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/core/categories/categories.controller.ts:88",{"_index":285,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/core/categories/categories.controller.ts:94",{"_index":298,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/core/categories/categories.module.ts",{"_index":377,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/core/categories/categories.service.ts",{"_index":389,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/core/categories/categories.service.ts:105",{"_index":408,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/core/categories/categories.service.ts:112",{"_index":402,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/core/categories/categories.service.ts:124",{"_index":405,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/core/categories/categories.service.ts:17",{"_index":398,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/core/categories/categories.service.ts:29",{"_index":407,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/core/categories/categories.service.ts:42",{"_index":409,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/core/categories/categories.service.ts:63",{"_index":411,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/core/categories/categories.service.ts:74",{"_index":412,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/core/categories/dto/create",{"_index":671,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/core/categories/dto/order",{"_index":1814,"title":{},"body":{"classes/OrderByParamDto-2.html":{},"coverage.html":{}}}],["src/core/categories/dto/update",{"_index":2239,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/core/categories/entities/category.entity",{"_index":480,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/Indicator.html":{},"entities/InformationCollection.html":{},"entities/Recommendation.html":{},"injectables/RecommendationsService.html":{},"interfaces/RecopilationDto.html":{}}}],["src/core/categories/entities/category.entity.ts",{"_index":569,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/core/categories/entities/category.entity.ts:18",{"_index":583,"title":{},"body":{"entities/Category.html":{}}}],["src/core/categories/entities/category.entity.ts:25",{"_index":591,"title":{},"body":{"entities/Category.html":{}}}],["src/core/categories/entities/category.entity.ts:28",{"_index":582,"title":{},"body":{"entities/Category.html":{}}}],["src/core/categories/entities/category.entity.ts:35",{"_index":585,"title":{},"body":{"entities/Category.html":{}}}],["src/core/categories/entities/category.entity.ts:38",{"_index":594,"title":{},"body":{"entities/Category.html":{}}}],["src/core/categories/entities/category.entity.ts:44",{"_index":588,"title":{},"body":{"entities/Category.html":{}}}],["src/core/categories/entities/category.entity.ts:50",{"_index":575,"title":{},"body":{"entities/Category.html":{}}}],["src/core/categories/entities/category.entity.ts:53",{"_index":578,"title":{},"body":{"entities/Category.html":{}}}],["src/core/categorized",{"_index":460,"title":{},"body":{"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"modules/CategorizedCriteriaModule.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"entities/Criteria.html":{},"classes/OrderByParamDto-1.html":{},"entities/Recopilation.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/criterion/criterion.constants.ts",{"_index":2559,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/criterion/criterion.controller.ts",{"_index":890,"title":{},"body":{"controllers/CriterionController.html":{},"coverage.html":{}}}],["src/core/criterion/criterion.controller.ts:106",{"_index":910,"title":{},"body":{"controllers/CriterionController.html":{}}}],["src/core/criterion/criterion.controller.ts:33",{"_index":900,"title":{},"body":{"controllers/CriterionController.html":{}}}],["src/core/criterion/criterion.controller.ts:45",{"_index":906,"title":{},"body":{"controllers/CriterionController.html":{}}}],["src/core/criterion/criterion.controller.ts:69",{"_index":912,"title":{},"body":{"controllers/CriterionController.html":{}}}],["src/core/criterion/criterion.controller.ts:75",{"_index":915,"title":{},"body":{"controllers/CriterionController.html":{}}}],["src/core/criterion/criterion.controller.ts:88",{"_index":904,"title":{},"body":{"controllers/CriterionController.html":{}}}],["src/core/criterion/criterion.controller.ts:93",{"_index":908,"title":{},"body":{"controllers/CriterionController.html":{}}}],["src/core/criterion/criterion.module.ts",{"_index":934,"title":{},"body":{"modules/CriterionModule.html":{}}}],["src/core/criterion/criterion.service.ts",{"_index":938,"title":{},"body":{"injectables/CriterionService.html":{},"coverage.html":{}}}],["src/core/criterion/criterion.service.ts:101",{"_index":945,"title":{},"body":{"injectables/CriterionService.html":{}}}],["src/core/criterion/criterion.service.ts:117",{"_index":947,"title":{},"body":{"injectables/CriterionService.html":{}}}],["src/core/criterion/criterion.service.ts:16",{"_index":942,"title":{},"body":{"injectables/CriterionService.html":{}}}],["src/core/criterion/criterion.service.ts:26",{"_index":943,"title":{},"body":{"injectables/CriterionService.html":{}}}],["src/core/criterion/criterion.service.ts:41",{"_index":949,"title":{},"body":{"injectables/CriterionService.html":{}}}],["src/core/criterion/criterion.service.ts:62",{"_index":950,"title":{},"body":{"injectables/CriterionService.html":{}}}],["src/core/criterion/criterion.service.ts:70",{"_index":951,"title":{},"body":{"injectables/CriterionService.html":{}}}],["src/core/criterion/criterion.service.ts:91",{"_index":948,"title":{},"body":{"injectables/CriterionService.html":{}}}],["src/core/criterion/dto/create",{"_index":686,"title":{},"body":{"classes/CreateCriteriaDto.html":{},"coverage.html":{}}}],["src/core/criterion/dto/order",{"_index":1799,"title":{},"body":{"classes/OrderByParamDto.html":{},"coverage.html":{}}}],["src/core/criterion/dto/update",{"_index":2245,"title":{},"body":{"classes/UpdateCriteriaDto.html":{},"coverage.html":{}}}],["src/core/criterion/entities/criteria.entity",{"_index":479,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/Indicator.html":{},"interfaces/RecopilationDto.html":{}}}],["src/core/criterion/entities/criteria.entity.ts",{"_index":866,"title":{},"body":{"entities/Criteria.html":{},"coverage.html":{}}}],["src/core/criterion/entities/criteria.entity.ts:24",{"_index":872,"title":{},"body":{"entities/Criteria.html":{}}}],["src/core/criterion/entities/criteria.entity.ts:27",{"_index":878,"title":{},"body":{"entities/Criteria.html":{}}}],["src/core/criterion/entities/criteria.entity.ts:30",{"_index":875,"title":{},"body":{"entities/Criteria.html":{}}}],["src/core/criterion/entities/criteria.entity.ts:33",{"_index":868,"title":{},"body":{"entities/Criteria.html":{}}}],["src/core/criterion/entities/criteria.entity.ts:36",{"_index":871,"title":{},"body":{"entities/Criteria.html":{}}}],["src/core/criterion/entities/criteria.entity.ts:39",{"_index":877,"title":{},"body":{"entities/Criteria.html":{}}}],["src/core/criterion/entities/criteria.entity.ts:46",{"_index":874,"title":{},"body":{"entities/Criteria.html":{}}}],["src/core/criterion/entities/criteria.entity.ts:52",{"_index":869,"title":{},"body":{"entities/Criteria.html":{}}}],["src/core/criterion/entities/criteria.entity.ts:55",{"_index":870,"title":{},"body":{"entities/Criteria.html":{}}}],["src/core/departments",{"_index":708,"title":{},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"classes/OrderByParamDto-3.html":{},"entities/Recommendation.html":{},"entities/Recopilation.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/evidences/document.controller.ts",{"_index":1097,"title":{},"body":{"controllers/DocumentsController.html":{},"coverage.html":{}}}],["src/core/evidences/document.controller.ts:16",{"_index":1099,"title":{},"body":{"controllers/DocumentsController.html":{}}}],["src/core/evidences/document.controller.ts:34",{"_index":1100,"title":{},"body":{"controllers/DocumentsController.html":{}}}],["src/core/evidences/document.service.ts",{"_index":1109,"title":{},"body":{"injectables/DocumentsService.html":{},"coverage.html":{}}}],["src/core/evidences/document.service.ts:12",{"_index":1111,"title":{},"body":{"injectables/DocumentsService.html":{}}}],["src/core/evidences/document.service.ts:18",{"_index":1113,"title":{},"body":{"injectables/DocumentsService.html":{}}}],["src/core/evidences/document.service.ts:39",{"_index":1114,"title":{},"body":{"injectables/DocumentsService.html":{}}}],["src/core/evidences/dto/create",{"_index":721,"title":{},"body":{"classes/CreateEvidenceDto.html":{},"coverage.html":{}}}],["src/core/evidences/dto/order",{"_index":1820,"title":{},"body":{"classes/OrderByParamDto-4.html":{},"coverage.html":{}}}],["src/core/evidences/dto/update",{"_index":2250,"title":{},"body":{"classes/UpdateEvidenceDto.html":{},"coverage.html":{}}}],["src/core/evidences/entities/document.entity.ts",{"_index":1091,"title":{},"body":{"classes/Document.html":{},"coverage.html":{}}}],["src/core/evidences/entities/document.entity.ts:8",{"_index":1092,"title":{},"body":{"classes/Document.html":{}}}],["src/core/evidences/entities/evidence.entity",{"_index":1529,"title":{},"body":{"entities/InformationCollection.html":{}}}],["src/core/evidences/entities/evidence.entity.ts",{"_index":1120,"title":{},"body":{"entities/Evidence.html":{},"coverage.html":{}}}],["src/core/evidences/entities/evidence.entity.ts:18",{"_index":1130,"title":{},"body":{"entities/Evidence.html":{}}}],["src/core/evidences/entities/evidence.entity.ts:25",{"_index":1127,"title":{},"body":{"entities/Evidence.html":{}}}],["src/core/evidences/entities/evidence.entity.ts:28",{"_index":1128,"title":{},"body":{"entities/Evidence.html":{}}}],["src/core/evidences/entities/evidence.entity.ts:31",{"_index":1129,"title":{},"body":{"entities/Evidence.html":{}}}],["src/core/evidences/entities/evidence.entity.ts:38",{"_index":1132,"title":{},"body":{"entities/Evidence.html":{}}}],["src/core/evidences/entities/evidence.entity.ts:45",{"_index":1123,"title":{},"body":{"entities/Evidence.html":{}}}],["src/core/evidences/entities/image.entity.ts",{"_index":1344,"title":{},"body":{"classes/Image.html":{},"coverage.html":{}}}],["src/core/evidences/entities/image.entity.ts:11",{"_index":1345,"title":{},"body":{"classes/Image.html":{}}}],["src/core/evidences/entities/image.entity.ts:8",{"_index":1346,"title":{},"body":{"classes/Image.html":{}}}],["src/core/evidences/entities/link.entity.ts",{"_index":1631,"title":{},"body":{"classes/Link.html":{},"coverage.html":{}}}],["src/core/evidences/entities/link.entity.ts:8",{"_index":1632,"title":{},"body":{"classes/Link.html":{}}}],["src/core/evidences/evidences.constants.ts",{"_index":2562,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/evidences/evidences.controller.ts",{"_index":1138,"title":{},"body":{"controllers/EvidencesController.html":{},"coverage.html":{}}}],["src/core/evidences/evidences.controller.ts:110",{"_index":1143,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["src/core/evidences/evidences.controller.ts:154",{"_index":1149,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["src/core/evidences/evidences.controller.ts:178",{"_index":1146,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["src/core/evidences/evidences.controller.ts:42",{"_index":1144,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["src/core/evidences/evidences.controller.ts:66",{"_index":1145,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["src/core/evidences/evidences.module.ts",{"_index":1198,"title":{},"body":{"modules/EvidencesModule.html":{}}}],["src/core/evidences/evidences.service.ts",{"_index":1216,"title":{},"body":{"injectables/EvidencesService.html":{},"coverage.html":{}}}],["src/core/evidences/evidences.service.ts:142",{"_index":1229,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["src/core/evidences/evidences.service.ts:210",{"_index":1228,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["src/core/evidences/evidences.service.ts:22",{"_index":1222,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["src/core/evidences/evidences.service.ts:38",{"_index":1226,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["src/core/evidences/evidences.service.ts:59",{"_index":1227,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["src/core/evidences/evidences.service.ts:66",{"_index":1225,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["src/core/evidences/image.controller.ts",{"_index":1348,"title":{},"body":{"controllers/ImagesController.html":{},"coverage.html":{}}}],["src/core/evidences/image.controller.ts:16",{"_index":1350,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/core/evidences/image.controller.ts:34",{"_index":1351,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/core/evidences/image.service.ts",{"_index":1357,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{}}}],["src/core/evidences/image.service.ts:12",{"_index":1359,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/core/evidences/image.service.ts:18",{"_index":1361,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/core/evidences/image.service.ts:39",{"_index":1362,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/core/evidences/link.controller.ts",{"_index":1634,"title":{},"body":{"controllers/LinksController.html":{},"coverage.html":{}}}],["src/core/evidences/link.controller.ts:32",{"_index":1637,"title":{},"body":{"controllers/LinksController.html":{}}}],["src/core/evidences/link.controller.ts:56",{"_index":1638,"title":{},"body":{"controllers/LinksController.html":{}}}],["src/core/evidences/link.controller.ts:63",{"_index":1636,"title":{},"body":{"controllers/LinksController.html":{}}}],["src/core/evidences/link.controller.ts:69",{"_index":1640,"title":{},"body":{"controllers/LinksController.html":{}}}],["src/core/evidences/link.controller.ts:83",{"_index":1639,"title":{},"body":{"controllers/LinksController.html":{}}}],["src/core/evidences/link.service.ts",{"_index":1649,"title":{},"body":{"injectables/LinksService.html":{},"coverage.html":{}}}],["src/core/evidences/link.service.ts:15",{"_index":1651,"title":{},"body":{"injectables/LinksService.html":{}}}],["src/core/evidences/link.service.ts:23",{"_index":1653,"title":{},"body":{"injectables/LinksService.html":{}}}],["src/core/evidences/link.service.ts:44",{"_index":1654,"title":{},"body":{"injectables/LinksService.html":{}}}],["src/core/evidences/link.service.ts:51",{"_index":1652,"title":{},"body":{"injectables/LinksService.html":{}}}],["src/core/evidences/link.service.ts:68",{"_index":1656,"title":{},"body":{"injectables/LinksService.html":{}}}],["src/core/evidences/link.service.ts:76",{"_index":1655,"title":{},"body":{"injectables/LinksService.html":{}}}],["src/core/indicators",{"_index":757,"title":{},"body":{"classes/CreateIndicatorPerRecopilationDto.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"entities/Recopilation.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"coverage.html":{}}}],["src/core/indicators/dto/create",{"_index":748,"title":{},"body":{"classes/CreateIndicatorDto.html":{},"coverage.html":{}}}],["src/core/indicators/dto/order",{"_index":1822,"title":{},"body":{"classes/OrderByParamDto-5.html":{},"coverage.html":{}}}],["src/core/indicators/dto/update",{"_index":2252,"title":{},"body":{"classes/UpdateIndicatorDto.html":{},"coverage.html":{}}}],["src/core/indicators/entities/indicator.entity",{"_index":595,"title":{},"body":{"entities/Category.html":{},"entities/Criteria.html":{},"entities/IndicatorPerRecopilation.html":{},"interfaces/RecopilationDto.html":{}}}],["src/core/indicators/entities/indicator.entity.ts",{"_index":1365,"title":{},"body":{"entities/Indicator.html":{},"coverage.html":{}}}],["src/core/indicators/entities/indicator.entity.ts:12",{"_index":1376,"title":{},"body":{"entities/Indicator.html":{}}}],["src/core/indicators/entities/indicator.entity.ts:15",{"_index":1368,"title":{},"body":{"entities/Indicator.html":{}}}],["src/core/indicators/entities/indicator.entity.ts:18",{"_index":1373,"title":{},"body":{"entities/Indicator.html":{}}}],["src/core/indicators/entities/indicator.entity.ts:21",{"_index":1370,"title":{},"body":{"entities/Indicator.html":{}}}],["src/core/indicators/entities/indicator.entity.ts:24",{"_index":1372,"title":{},"body":{"entities/Indicator.html":{}}}],["src/core/indicators/entities/indicator.entity.ts:30",{"_index":1379,"title":{},"body":{"entities/Indicator.html":{}}}],["src/core/indicators/entities/indicator.entity.ts:9",{"_index":1375,"title":{},"body":{"entities/Indicator.html":{}}}],["src/core/indicators/indicators.constants.ts",{"_index":2563,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/indicators/indicators.controller.ts",{"_index":1391,"title":{},"body":{"controllers/IndicatorsController.html":{},"coverage.html":{}}}],["src/core/indicators/indicators.controller.ts:32",{"_index":1405,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["src/core/indicators/indicators.controller.ts:58",{"_index":1407,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["src/core/indicators/indicators.controller.ts:65",{"_index":1399,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["src/core/indicators/indicators.controller.ts:72",{"_index":1413,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["src/core/indicators/indicators.controller.ts:85",{"_index":1403,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["src/core/indicators/indicators.controller.ts:90",{"_index":1409,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["src/core/indicators/indicators.module.ts",{"_index":1431,"title":{},"body":{"modules/IndicatorsModule.html":{}}}],["src/core/indicators/indicators.service.ts",{"_index":1472,"title":{},"body":{"injectables/IndicatorsService.html":{},"coverage.html":{}}}],["src/core/indicators/indicators.service.ts:125",{"_index":1487,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["src/core/indicators/indicators.service.ts:136",{"_index":1480,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["src/core/indicators/indicators.service.ts:14",{"_index":1476,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["src/core/indicators/indicators.service.ts:20",{"_index":1478,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["src/core/indicators/indicators.service.ts:28",{"_index":1481,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["src/core/indicators/indicators.service.ts:48",{"_index":1483,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["src/core/indicators/indicators.service.ts:53",{"_index":1485,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["src/core/information",{"_index":596,"title":{},"body":{"entities/Category.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/Department.html":{},"entities/Evidence.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"classes/OrderByParamDto-6.html":{},"entities/Recopilation.html":{},"classes/UpdateInformationCollectionDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/mails/login",{"_index":2565,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/mails/mails.module.ts",{"_index":1672,"title":{},"body":{"modules/MailsModule.html":{}}}],["src/core/mails/mails.service.ts",{"_index":1685,"title":{},"body":{"injectables/MailsService.html":{},"coverage.html":{}}}],["src/core/mails/mails.service.ts:17",{"_index":1694,"title":{},"body":{"injectables/MailsService.html":{}}}],["src/core/mails/mails.service.ts:6",{"_index":1690,"title":{},"body":{"injectables/MailsService.html":{}}}],["src/core/mails/mails.service.ts:9",{"_index":1692,"title":{},"body":{"injectables/MailsService.html":{}}}],["src/core/notifications/dto/create",{"_index":776,"title":{},"body":{"classes/CreateNotificationDto.html":{},"coverage.html":{}}}],["src/core/notifications/dto/order",{"_index":1830,"title":{},"body":{"classes/OrderByParamDto-8.html":{},"coverage.html":{}}}],["src/core/notifications/dto/update",{"_index":2258,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["src/core/notifications/entities/notification.entity",{"_index":2276,"title":{},"body":{"entities/User.html":{}}}],["src/core/notifications/entities/notification.entity.ts",{"_index":1705,"title":{},"body":{"entities/Notification.html":{},"coverage.html":{}}}],["src/core/notifications/entities/notification.entity.ts:17",{"_index":1709,"title":{},"body":{"entities/Notification.html":{}}}],["src/core/notifications/entities/notification.entity.ts:20",{"_index":1710,"title":{},"body":{"entities/Notification.html":{}}}],["src/core/notifications/entities/notification.entity.ts:27",{"_index":1711,"title":{},"body":{"entities/Notification.html":{}}}],["src/core/notifications/entities/notification.entity.ts:37",{"_index":1708,"title":{},"body":{"entities/Notification.html":{}}}],["src/core/notifications/entities/notification.entity.ts:43",{"_index":1707,"title":{},"body":{"entities/Notification.html":{}}}],["src/core/notifications/entities/notification.entity.ts:46",{"_index":1713,"title":{},"body":{"entities/Notification.html":{}}}],["src/core/notifications/notifications.constants.ts",{"_index":2567,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/notifications/notifications.controller.ts",{"_index":1720,"title":{},"body":{"controllers/NotificationsController.html":{},"coverage.html":{}}}],["src/core/notifications/notifications.controller.ts:33",{"_index":1726,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/core/notifications/notifications.controller.ts:41",{"_index":1730,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/core/notifications/notifications.controller.ts:65",{"_index":1735,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/core/notifications/notifications.controller.ts:73",{"_index":1738,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/core/notifications/notifications.controller.ts:82",{"_index":1732,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/core/notifications/notifications.controller.ts:88",{"_index":1739,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/core/notifications/notifications.controller.ts:95",{"_index":1728,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/core/notifications/notifications.module.ts",{"_index":1759,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/core/notifications/notifications.service.ts",{"_index":1763,"title":{},"body":{"injectables/NotificationsService.html":{},"coverage.html":{}}}],["src/core/notifications/notifications.service.ts:108",{"_index":1778,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/core/notifications/notifications.service.ts:117",{"_index":1779,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/core/notifications/notifications.service.ts:133",{"_index":1773,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/core/notifications/notifications.service.ts:14",{"_index":1768,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/core/notifications/notifications.service.ts:22",{"_index":1770,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/core/notifications/notifications.service.ts:37",{"_index":1772,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/core/notifications/notifications.service.ts:55",{"_index":1774,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/core/notifications/notifications.service.ts:77",{"_index":1777,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/core/recommendations/dto/create",{"_index":791,"title":{},"body":{"classes/CreateRecommendationDto.html":{},"coverage.html":{}}}],["src/core/recommendations/dto/order",{"_index":1832,"title":{},"body":{"classes/OrderByParamDto-9.html":{},"coverage.html":{}}}],["src/core/recommendations/entities/recommendation.entity",{"_index":599,"title":{},"body":{"entities/Category.html":{},"entities/DepartmentPerRecopilation.html":{}}}],["src/core/recommendations/entities/recommendation.entity.ts",{"_index":1859,"title":{},"body":{"entities/Recommendation.html":{},"coverage.html":{}}}],["src/core/recommendations/entities/recommendation.entity.ts:16",{"_index":1863,"title":{},"body":{"entities/Recommendation.html":{}}}],["src/core/recommendations/entities/recommendation.entity.ts:19",{"_index":1861,"title":{},"body":{"entities/Recommendation.html":{}}}],["src/core/recommendations/entities/recommendation.entity.ts:9",{"_index":1864,"title":{},"body":{"entities/Recommendation.html":{}}}],["src/core/recommendations/recommendations.constants.ts",{"_index":2568,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/recommendations/recommendations.controller.ts",{"_index":1868,"title":{},"body":{"controllers/RecommendationsController.html":{},"coverage.html":{}}}],["src/core/recommendations/recommendations.controller.ts:31",{"_index":1870,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["src/core/recommendations/recommendations.controller.ts:42",{"_index":1872,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["src/core/recommendations/recommendations.controller.ts:66",{"_index":1873,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["src/core/recommendations/recommendations.controller.ts:73",{"_index":1874,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["src/core/recommendations/recommendations.module.ts",{"_index":1887,"title":{},"body":{"modules/RecommendationsModule.html":{}}}],["src/core/recommendations/recommendations.service.ts",{"_index":1890,"title":{},"body":{"injectables/RecommendationsService.html":{},"coverage.html":{}}}],["src/core/recommendations/recommendations.service.ts:100",{"_index":1900,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/core/recommendations/recommendations.service.ts:107",{"_index":1901,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/core/recommendations/recommendations.service.ts:20",{"_index":1895,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/core/recommendations/recommendations.service.ts:36",{"_index":1898,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/core/recommendations/recommendations.service.ts:78",{"_index":1899,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["src/core/recopilations/dto/create",{"_index":797,"title":{},"body":{"classes/CreateRecopilationDto.html":{},"coverage.html":{}}}],["src/core/recopilations/dto/order",{"_index":1828,"title":{},"body":{"classes/OrderByParamDto-7.html":{},"coverage.html":{}}}],["src/core/recopilations/dto/recommend",{"_index":608,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/RecommendCategoriesDto.html":{},"coverage.html":{}}}],["src/core/recopilations/dto/recopilation.dto.ts",{"_index":1940,"title":{},"body":{"interfaces/RecopilationDto.html":{},"coverage.html":{}}}],["src/core/recopilations/dto/relate",{"_index":884,"title":{},"body":{"classes/CriteriaToRelate.html":{},"classes/IndicatorToRelate.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"coverage.html":{}}}],["src/core/recopilations/dto/update",{"_index":2260,"title":{},"body":{"classes/UpdateRecopilationDto.html":{},"coverage.html":{}}}],["src/core/recopilations/entities/recopilation.entity",{"_index":478,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/DepartmentPerRecopilation.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"entities/IndicatorPerRecopilation.html":{},"entities/InformationCollection.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts",{"_index":1922,"title":{},"body":{"entities/Recopilation.html":{},"coverage.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts:10",{"_index":1929,"title":{},"body":{"entities/Recopilation.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts:13",{"_index":1936,"title":{},"body":{"entities/Recopilation.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts:16",{"_index":1927,"title":{},"body":{"entities/Recopilation.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts:19",{"_index":1937,"title":{},"body":{"entities/Recopilation.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts:22",{"_index":1925,"title":{},"body":{"entities/Recopilation.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts:25",{"_index":1928,"title":{},"body":{"entities/Recopilation.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts:28",{"_index":1934,"title":{},"body":{"entities/Recopilation.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts:34",{"_index":1930,"title":{},"body":{"entities/Recopilation.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts:40",{"_index":1924,"title":{},"body":{"entities/Recopilation.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts:46",{"_index":1932,"title":{},"body":{"entities/Recopilation.html":{}}}],["src/core/recopilations/entities/recopilation.entity.ts:52",{"_index":1926,"title":{},"body":{"entities/Recopilation.html":{}}}],["src/core/recopilations/recopilations.constants.ts",{"_index":2569,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/recopilations/recopilations.controller.ts",{"_index":1944,"title":{},"body":{"controllers/RecopilationsController.html":{},"coverage.html":{}}}],["src/core/recopilations/recopilations.controller.ts:101",{"_index":1964,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.controller.ts:109",{"_index":1967,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.controller.ts:118",{"_index":1953,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.controller.ts:127",{"_index":1982,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.controller.ts:141",{"_index":1985,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.controller.ts:159",{"_index":1975,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.controller.ts:165",{"_index":1973,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.controller.ts:180",{"_index":1970,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.controller.ts:195",{"_index":1979,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.controller.ts:43",{"_index":1959,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.controller.ts:68",{"_index":1957,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.controller.ts:93",{"_index":1961,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["src/core/recopilations/recopilations.module.ts",{"_index":2023,"title":{},"body":{"modules/RecopilationsModule.html":{}}}],["src/core/recopilations/recopilations.service.ts",{"_index":2025,"title":{},"body":{"injectables/RecopilationsService.html":{},"coverage.html":{}}}],["src/core/recopilations/recopilations.service.ts:138",{"_index":2038,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/recopilations/recopilations.service.ts:272",{"_index":2041,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/recopilations/recopilations.service.ts:295",{"_index":2034,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/recopilations/recopilations.service.ts:301",{"_index":2047,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/recopilations/recopilations.service.ts:314",{"_index":2046,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/recopilations/recopilations.service.ts:322",{"_index":2045,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/recopilations/recopilations.service.ts:33",{"_index":2033,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/recopilations/recopilations.service.ts:397",{"_index":2043,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/recopilations/recopilations.service.ts:445",{"_index":2040,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/recopilations/recopilations.service.ts:57",{"_index":2035,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/recopilations/recopilations.service.ts:78",{"_index":2036,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/recopilations/recopilations.service.ts:86",{"_index":2037,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["src/core/summary",{"_index":2175,"title":{},"body":{"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"coverage.html":{}}}],["src/core/users/departments.controller.ts",{"_index":992,"title":{},"body":{"controllers/DepartmentsController.html":{},"coverage.html":{}}}],["src/core/users/departments.controller.ts:16",{"_index":994,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["src/core/users/departments.controller.ts:34",{"_index":995,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["src/core/users/departments.controller.ts:39",{"_index":997,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["src/core/users/departments.service.ts",{"_index":1075,"title":{},"body":{"injectables/DepartmentsService.html":{},"coverage.html":{}}}],["src/core/users/departments.service.ts:13",{"_index":1078,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["src/core/users/departments.service.ts:21",{"_index":1082,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["src/core/users/departments.service.ts:42",{"_index":1083,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["src/core/users/departments.service.ts:51",{"_index":1081,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["src/core/users/dto/create",{"_index":849,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/core/users/dto/find",{"_index":1326,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["src/core/users/dto/order",{"_index":1812,"title":{},"body":{"classes/OrderByParamDto-10.html":{},"coverage.html":{}}}],["src/core/users/dto/update",{"_index":2264,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/core/users/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/core/users/entities/coordinator.entity.ts",{"_index":664,"title":{},"body":{"classes/Coordinator.html":{},"coverage.html":{}}}],["src/core/users/entities/department.entity",{"_index":985,"title":{},"body":{"entities/DepartmentPerRecopilation.html":{},"entities/InformationCollection.html":{},"interfaces/RecopilationDto.html":{}}}],["src/core/users/entities/department.entity.ts",{"_index":967,"title":{},"body":{"classes/Department.html":{},"coverage.html":{}}}],["src/core/users/entities/department.entity.ts:13",{"_index":970,"title":{},"body":{"classes/Department.html":{}}}],["src/core/users/entities/department.entity.ts:19",{"_index":973,"title":{},"body":{"classes/Department.html":{}}}],["src/core/users/entities/user.entity",{"_index":1714,"title":{},"body":{"entities/Notification.html":{}}}],["src/core/users/entities/user.entity.ts",{"_index":2267,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/core/users/entities/user.entity.ts:22",{"_index":2271,"title":{},"body":{"entities/User.html":{}}}],["src/core/users/entities/user.entity.ts:25",{"_index":2270,"title":{},"body":{"entities/User.html":{}}}],["src/core/users/entities/user.entity.ts:28",{"_index":2269,"title":{},"body":{"entities/User.html":{}}}],["src/core/users/entities/user.entity.ts:31",{"_index":2274,"title":{},"body":{"entities/User.html":{}}}],["src/core/users/entities/user.entity.ts:34",{"_index":2273,"title":{},"body":{"entities/User.html":{}}}],["src/core/users/entities/user.entity.ts:37",{"_index":2275,"title":{},"body":{"entities/User.html":{}}}],["src/core/users/entities/user.entity.ts:40",{"_index":2268,"title":{},"body":{"entities/User.html":{}}}],["src/core/users/users.constants.ts",{"_index":2571,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/users/users.controller.ts",{"_index":2281,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/core/users/users.controller.ts:34",{"_index":2284,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/core/users/users.controller.ts:39",{"_index":2285,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/core/users/users.controller.ts:57",{"_index":2287,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/core/users/users.controller.ts:62",{"_index":2295,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/core/users/users.controller.ts:71",{"_index":2293,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/core/users/users.controller.ts:76",{"_index":2291,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/core/users/users.module.ts",{"_index":2314,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/core/users/users.service.ts",{"_index":2321,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/core/users/users.service.ts:107",{"_index":2335,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/users/users.service.ts:117",{"_index":2334,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/users/users.service.ts:129",{"_index":2329,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/users/users.service.ts:133",{"_index":2332,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/users/users.service.ts:21",{"_index":2326,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/users/users.service.ts:34",{"_index":2327,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/users/users.service.ts:73",{"_index":2330,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/users/users.service.ts:93",{"_index":2331,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/users/users.service.ts:99",{"_index":2336,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/core/word/word.controller.ts",{"_index":2367,"title":{},"body":{"controllers/WordController.html":{},"coverage.html":{}}}],["src/core/word/word.controller.ts:14",{"_index":2373,"title":{},"body":{"controllers/WordController.html":{}}}],["src/core/word/word.module.ts",{"_index":2407,"title":{},"body":{"modules/WordModule.html":{}}}],["src/core/word/word.service.ts",{"_index":2409,"title":{},"body":{"injectables/WordService.html":{},"coverage.html":{}}}],["src/core/word/word.service.ts:129",{"_index":2413,"title":{},"body":{"injectables/WordService.html":{}}}],["src/core/word/word.service.ts:29",{"_index":2411,"title":{},"body":{"injectables/WordService.html":{}}}],["src/core/word/word.service.ts:349",{"_index":2417,"title":{},"body":{"injectables/WordService.html":{}}}],["src/core/word/word.service.ts:41",{"_index":2415,"title":{},"body":{"injectables/WordService.html":{}}}],["src/errors/class",{"_index":625,"title":{},"body":{"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/errors/http",{"_index":1331,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/errors/type",{"_index":2203,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":2573,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/construct",{"_index":645,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"classes/TypeORMExceptionFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/file",{"_index":1164,"title":{},"body":{"controllers/EvidencesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/filtering/constants.ts",{"_index":2576,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/shared/filtering/filter.type.ts",{"_index":1298,"title":{},"body":{"interfaces/Filter.html":{},"coverage.html":{}}}],["src/shared/filtering/filters",{"_index":328,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/FiltersSegmentDto.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/shared/filtering/parse",{"_index":415,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/http",{"_index":2167,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["src/shared/pagination/construct",{"_index":324,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"controllers/InformationCollectionsController.html":{},"controllers/LinksController.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/pagination/paginated",{"_index":1836,"title":{},"body":{"classes/PaginatedItems.html":{},"coverage.html":{}}}],["src/shared/pagination/pagination",{"_index":321,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginationParams.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/shared/sorting/order",{"_index":330,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/OrderTypeParamDto.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/succesful",{"_index":2154,"title":{},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{},"coverage.html":{}}}],["start",{"_index":2665,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2668,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":2670,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":800,"title":{},"body":{"classes/CreateRecopilationDto.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"injectables/RecopilationsService.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":2647,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2657,"title":{},"body":{"index.html":{}}}],["statements",{"_index":2544,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":2592,"title":{},"body":{"dependencies.html":{}}}],["static.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["static/dist/serve",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["status(httpstatus.bad_request",{"_index":652,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{}}}],["status(statuscode",{"_index":1342,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":1340,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"classes/TypeORMExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["stay",{"_index":2692,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1171,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["str",{"_index":2643,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string",{"_index":186,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"controllers/CriterionController.html":{},"controllers/DepartmentsController.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"entities/Indicator.html":{},"controllers/IndicatorsController.html":{},"entities/InformationCollection.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"classes/LoginAuthDto.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"controllers/SummaryInformationController.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateIndicatorDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":2489,"title":{},"body":{"injectables/WordService.html":{}}}],["subindex",{"_index":690,"title":{},"body":{"classes/CreateCriteriaDto.html":{},"entities/Criteria.html":{},"injectables/WordService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":1698,"title":{},"body":{"injectables/MailsService.html":{}}}],["successfulresponsebuilderinterceptor",{"_index":2153,"title":{"injectables/SuccessfulResponseBuilderInterceptor.html":{}},"body":{"injectables/SuccessfulResponseBuilderInterceptor.html":{},"coverage.html":{}}}],["summary",{"_index":764,"title":{},"body":{"classes/CreateInformationCollectionDto.html":{},"classes/FiltersSegmentDto.html":{},"entities/InformationCollection.html":{},"modules/MailsModule.html":{},"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/WordService.html":{},"miscellaneous/variables.html":{}}}],["summary).criterion.indicator.index",{"_index":2494,"title":{},"body":{"injectables/WordService.html":{}}}],["summary).criterion.indicator.name",{"_index":2496,"title":{},"body":{"injectables/WordService.html":{}}}],["summary).criterion.name",{"_index":2499,"title":{},"body":{"injectables/WordService.html":{}}}],["summary).criterion.subindex",{"_index":2497,"title":{},"body":{"injectables/WordService.html":{}}}],["summary).informationcollections",{"_index":2500,"title":{},"body":{"injectables/WordService.html":{}}}],["summaryinformationcontroller",{"_index":2174,"title":{"controllers/SummaryInformationController.html":{}},"body":{"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"coverage.html":{}}}],["summaryinformationmodule",{"_index":44,"title":{"modules/SummaryInformationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SummaryInformationModule.html":{},"modules.html":{},"overview.html":{}}}],["summaryinformationservice",{"_index":2183,"title":{"injectables/SummaryInformationService.html":{}},"body":{"controllers/SummaryInformationController.html":{},"modules/SummaryInformationModule.html":{},"injectables/SummaryInformationService.html":{},"coverage.html":{},"overview.html":{}}}],["super",{"_index":632,"title":{},"body":{"classes/ClassValidatorValidationsException.html":{},"classes/WrongPasswordException.html":{}}}],["support",{"_index":2684,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2703,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1242,"title":{},"body":{"injectables/EvidencesService.html":{},"classes/TypeORMExceptionFilter.html":{},"injectables/UsersService.html":{}}}],["synchronize",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":1846,"title":{},"body":{"classes/PaginatedItems.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":2587,"title":{},"body":{"coverage.html":{}}}],["tableinheritance",{"_index":1134,"title":{},"body":{"entities/Evidence.html":{},"entities/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2586,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":427,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"injectables/DocumentsService.html":{},"injectables/EvidencesService.html":{},"injectables/ImagesService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/LinksService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{},"injectables/UsersService.html":{}}}],["te",{"_index":1911,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["template",{"_index":2522,"title":{},"body":{"injectables/WordService.html":{}}}],["test",{"_index":2673,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2676,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2675,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2672,"title":{},"body":{"index.html":{}}}],["text",{"_index":580,"title":{},"body":{"entities/Category.html":{},"entities/Criteria.html":{},"classes/Document.html":{},"entities/Evidence.html":{},"classes/Image.html":{},"entities/Indicator.html":{},"entities/InformationCollection.html":{},"classes/Link.html":{},"entities/Recopilation.html":{},"injectables/WordService.html":{}}}],["textrun",{"_index":2420,"title":{},"body":{"injectables/WordService.html":{}}}],["thanks",{"_index":2682,"title":{},"body":{"index.html":{}}}],["this.adminrepository.save",{"_index":2349,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.login(loginauthdto",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.categoriesrepository.findonebyorfail",{"_index":1904,"title":{},"body":{"injectables/RecommendationsService.html":{},"injectables/RecopilationsService.html":{}}}],["this.categoriesservice.categoriesbyindicator",{"_index":369,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.categoriesbyrecopilation",{"_index":373,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.create(newcategory",{"_index":358,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.deletecategory(number(id",{"_index":366,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getallcategories",{"_index":348,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getonecategory(number(id",{"_index":354,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.updatecategory",{"_index":361,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categorizedcriteriarepository",{"_index":445,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categorizedcriteriarepository.create",{"_index":559,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"injectables/RecopilationsService.html":{}}}],["this.categorizedcriteriarepository.find",{"_index":964,"title":{},"body":{"injectables/CriterionService.html":{}}}],["this.categorizedcriteriarepository.findandcount",{"_index":541,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["this.categorizedcriteriarepository.findoneorfail",{"_index":544,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["this.categorizedcriteriarepository.remove",{"_index":2116,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.categorizedcriteriarepository.remove(categorizedcriteria",{"_index":568,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["this.categorizedcriteriarepository.save",{"_index":2118,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.categorizedcriteriarepository.save(categorizedcriteria",{"_index":561,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["this.categorizedcriteriaservice.create(createcategorizedcriteriadto",{"_index":513,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["this.categorizedcriteriaservice.findall",{"_index":510,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["this.categorizedcriteriaservice.findone(id",{"_index":512,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["this.categorizedcriteriaservice.remove(id",{"_index":516,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["this.categorizedcriteriaservice.update",{"_index":514,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{}}}],["this.categoryrepository.create",{"_index":423,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.find",{"_index":443,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findandcount",{"_index":425,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findone",{"_index":431,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findoneby",{"_index":1608,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["this.categoryrepository.findonebyorfail",{"_index":1599,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["this.categoryrepository.findoneorfail",{"_index":551,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["this.categoryrepository.save(category",{"_index":424,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.softdelete(id",{"_index":440,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.update(id",{"_index":435,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.configservice.get('jwt",{"_index":202,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.configservice.get('link",{"_index":1181,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["this.constructor.name",{"_index":2541,"title":{},"body":{"classes/WrongPasswordException.html":{}}}],["this.coordinatorrepository.save",{"_index":2351,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.createevidences(collections",{"_index":2535,"title":{},"body":{"injectables/WordService.html":{}}}],["this.criteriarepository.findonebyorfail",{"_index":2198,"title":{},"body":{"injectables/SummaryInformationService.html":{}}}],["this.criteriarepository.findoneorfail",{"_index":2434,"title":{},"body":{"injectables/WordService.html":{}}}],["this.criterionrepository.create",{"_index":953,"title":{},"body":{"injectables/CriterionService.html":{}}}],["this.criterionrepository.find",{"_index":962,"title":{},"body":{"injectables/CriterionService.html":{}}}],["this.criterionrepository.findandcount",{"_index":955,"title":{},"body":{"injectables/CriterionService.html":{}}}],["this.criterionrepository.findonebyorfail",{"_index":960,"title":{},"body":{"injectables/CriterionService.html":{},"injectables/RecopilationsService.html":{}}}],["this.criterionrepository.findoneorfail",{"_index":550,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{},"injectables/CriterionService.html":{}}}],["this.criterionrepository.save(criterion",{"_index":954,"title":{},"body":{"injectables/CriterionService.html":{}}}],["this.criterionrepository.softdelete",{"_index":961,"title":{},"body":{"injectables/CriterionService.html":{}}}],["this.criterionrepository.update",{"_index":959,"title":{},"body":{"injectables/CriterionService.html":{}}}],["this.criterionservice.createcriterion(createcriteriondto",{"_index":922,"title":{},"body":{"controllers/CriterionController.html":{}}}],["this.criterionservice.criterionbyindicator",{"_index":930,"title":{},"body":{"controllers/CriterionController.html":{}}}],["this.criterionservice.criterionbyrecopilation",{"_index":931,"title":{},"body":{"controllers/CriterionController.html":{}}}],["this.criterionservice.deletecriterion(number(id",{"_index":929,"title":{},"body":{"controllers/CriterionController.html":{}}}],["this.criterionservice.getallcriteria",{"_index":924,"title":{},"body":{"controllers/CriterionController.html":{}}}],["this.criterionservice.getonecriterion(number(id",{"_index":926,"title":{},"body":{"controllers/CriterionController.html":{}}}],["this.criterionservice.updatecriterion",{"_index":927,"title":{},"body":{"controllers/CriterionController.html":{}}}],["this.departmentrepository.findby",{"_index":1052,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["this.departmentrepository.findoneby",{"_index":1609,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["this.departmentrepository.findonebyorfail",{"_index":1072,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/InformationCollectionsService.html":{}}}],["this.departmentrepository.save",{"_index":2353,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.departmentsperrecopilationrepository.create",{"_index":1069,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["this.departmentsperrecopilationrepository.delete",{"_index":1057,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["this.departmentsperrecopilationrepository.find",{"_index":1060,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{}}}],["this.departmentsperrecopilationrepository.findandcount",{"_index":1049,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["this.departmentsperrecopilationrepository.findoneorfail",{"_index":1050,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["this.departmentsperrecopilationrepository.remove",{"_index":1074,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["this.departmentsperrecopilationrepository.save",{"_index":1067,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{}}}],["this.departmentsperrecopilationsrepository.findonebyorfail",{"_index":1903,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.departmentsperrecopilationsrepository.findoneorfail",{"_index":2121,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.departmentsperrecopilationsservice.findall",{"_index":1023,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{}}}],["this.departmentsperrecopilationsservice.findone(id",{"_index":1024,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{}}}],["this.departmentsperrecopilationsservice.remove(id",{"_index":1027,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{}}}],["this.departmentsperrecopilationsservice.set",{"_index":1025,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{}}}],["this.departmentsperrecopilationsservice.update",{"_index":1026,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{}}}],["this.departmentsrepository.findandcount",{"_index":1085,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["this.departmentsrepository.findonebyorfail",{"_index":1913,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.departmentsrepository.findoneorfail",{"_index":1086,"title":{},"body":{"injectables/DepartmentsService.html":{}}}],["this.departmentsservice.departmentsbyrecopilation(+recopilationid",{"_index":1006,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["this.departmentsservice.findall",{"_index":1003,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["this.departmentsservice.findone(+id",{"_index":1005,"title":{},"body":{"controllers/DepartmentsController.html":{}}}],["this.documentrepository.create",{"_index":1265,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["this.documentrepository.save(evidence",{"_index":1266,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["this.documentsrepository.findandcount",{"_index":1117,"title":{},"body":{"injectables/DocumentsService.html":{}}}],["this.documentsrepository.findoneorfail",{"_index":1119,"title":{},"body":{"injectables/DocumentsService.html":{}}}],["this.documentsservice.findall",{"_index":1106,"title":{},"body":{"controllers/DocumentsController.html":{}}}],["this.documentsservice.findone(+id",{"_index":1108,"title":{},"body":{"controllers/DocumentsController.html":{}}}],["this.encryptpassword(generatedpassword",{"_index":2360,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.encryptpassword(passwordtouse",{"_index":2347,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.errors",{"_index":633,"title":{},"body":{"classes/ClassValidatorValidationsException.html":{}}}],["this.evidencerepository.delete(id",{"_index":1294,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["this.evidencerepository.findandcount",{"_index":1235,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["this.evidencerepository.findone",{"_index":1236,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["this.evidencerepository.findonebyorfail",{"_index":1277,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["this.evidencerepository.update(id",{"_index":1272,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["this.evidencesservice.create(createevidencedto",{"_index":1185,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["this.evidencesservice.findall",{"_index":1168,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["this.evidencesservice.findone(+id",{"_index":1169,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["this.evidencesservice.remove(+id",{"_index":1191,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["this.evidencesservice.update",{"_index":1190,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["this.extracttokenfromheader(request",{"_index":200,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.findinformationcollections(idcrit",{"_index":2493,"title":{},"body":{"injectables/WordService.html":{}}}],["this.generatepassword",{"_index":2343,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getdepartmentanswer",{"_index":2089,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.imagerepository.create",{"_index":1267,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["this.imagerepository.save(evidence",{"_index":1268,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["this.imagesrepository.findandcount",{"_index":1363,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.imagesrepository.findoneorfail",{"_index":1364,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.imagesservice.findall",{"_index":1354,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.imagesservice.findone(+id",{"_index":1356,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.indicatorperrecopilationrepository.find",{"_index":549,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["this.indicatorrepository.create(createindicatordto",{"_index":1488,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["this.indicatorrepository.delete(index",{"_index":1511,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["this.indicatorrepository.find",{"_index":1491,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["this.indicatorrepository.findandcount",{"_index":1490,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["this.indicatorrepository.findonebyorfail",{"_index":421,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/CriterionService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{}}}],["this.indicatorrepository.insert(indicator",{"_index":1489,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["this.indicatorrepository.update(index",{"_index":1509,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["this.indicatorsperrecopilationrepository.create",{"_index":2114,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.indicatorsperrecopilationrepository.remove",{"_index":2117,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.indicatorsperrecopilationrepository.save",{"_index":2119,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.indicatorsperrecopilationsrepository.create",{"_index":1467,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["this.indicatorsperrecopilationsrepository.findandcount",{"_index":1463,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["this.indicatorsperrecopilationsrepository.findoneorfail",{"_index":1464,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["this.indicatorsperrecopilationsrepository.remove",{"_index":1471,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["this.indicatorsperrecopilationsrepository.save",{"_index":1468,"title":{},"body":{"injectables/IndicatorsPerRecopilationsService.html":{}}}],["this.indicatorsperrecopilationsservice.create",{"_index":1449,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{}}}],["this.indicatorsperrecopilationsservice.findall",{"_index":1447,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{}}}],["this.indicatorsperrecopilationsservice.findone(id",{"_index":1448,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{}}}],["this.indicatorsperrecopilationsservice.remove(id",{"_index":1451,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{}}}],["this.indicatorsperrecopilationsservice.update",{"_index":1450,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{}}}],["this.indicatorsrepository.findoneorfail",{"_index":2103,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.indicatorsservice.createindicator(newindicador",{"_index":1424,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["this.indicatorsservice.deleteindicator(number(id",{"_index":1427,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["this.indicatorsservice.getallindicators",{"_index":1419,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["this.indicatorsservice.getoneindicator(number(id",{"_index":1421,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["this.indicatorsservice.indicatorsbyrecopilation",{"_index":1428,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["this.indicatorsservice.updateindicator",{"_index":1425,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["this.informationcollectionrepository.findonebyorfail",{"_index":1660,"title":{},"body":{"injectables/LinksService.html":{}}}],["this.informationcollectionrepository.findoneorfail",{"_index":1237,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["this.informationcollectionsrepository.create",{"_index":1600,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["this.informationcollectionsrepository.delete(id",{"_index":1630,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["this.informationcollectionsrepository.find",{"_index":1588,"title":{},"body":{"injectables/InformationCollectionsService.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["this.informationcollectionsrepository.findandcount",{"_index":1586,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["this.informationcollectionsrepository.findonebyorfail",{"_index":1626,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["this.informationcollectionsrepository.findoneorfail",{"_index":1587,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["this.informationcollectionsrepository.save",{"_index":1606,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["this.informationcollectionsrepository.update(id",{"_index":1624,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["this.informationcollectionsservice.create",{"_index":1564,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["this.informationcollectionsservice.findall",{"_index":1557,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["this.informationcollectionsservice.findone(id",{"_index":1558,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["this.informationcollectionsservice.getalldepartmentsanswers",{"_index":1560,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["this.informationcollectionsservice.getdepartmentanswer",{"_index":1562,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["this.informationcollectionsservice.remove(id",{"_index":1569,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["this.informationcollectionsservice.update",{"_index":1568,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["this.jwtservice.sign(payload",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":204,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.linkrepository.create",{"_index":1270,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/LinksService.html":{}}}],["this.linkrepository.delete(id",{"_index":1663,"title":{},"body":{"injectables/LinksService.html":{}}}],["this.linkrepository.findandcount",{"_index":1657,"title":{},"body":{"injectables/LinksService.html":{}}}],["this.linkrepository.findone",{"_index":1658,"title":{},"body":{"injectables/LinksService.html":{}}}],["this.linkrepository.findonebyorfail",{"_index":1662,"title":{},"body":{"injectables/LinksService.html":{}}}],["this.linkrepository.save(evidence",{"_index":1271,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/LinksService.html":{}}}],["this.linkrepository.update(id",{"_index":1661,"title":{},"body":{"injectables/LinksService.html":{}}}],["this.linksservice.create(createevidencedto",{"_index":1646,"title":{},"body":{"controllers/LinksController.html":{}}}],["this.linksservice.findall",{"_index":1643,"title":{},"body":{"controllers/LinksController.html":{}}}],["this.linksservice.findone(+id",{"_index":1644,"title":{},"body":{"controllers/LinksController.html":{}}}],["this.linksservice.remove(+id",{"_index":1648,"title":{},"body":{"controllers/LinksController.html":{}}}],["this.linksservice.update",{"_index":1647,"title":{},"body":{"controllers/LinksController.html":{}}}],["this.mailerservice.sendmail",{"_index":1697,"title":{},"body":{"injectables/MailsService.html":{}}}],["this.mailsservice.sendmail(createuserdto.email",{"_index":2354,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.mailsservice.sendmail(user.email",{"_index":2361,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.mailsservice.sendnotification",{"_index":1292,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["this.mailsservice.sendnotification(department.email",{"_index":1914,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.name",{"_index":2540,"title":{},"body":{"classes/WrongPasswordException.html":{}}}],["this.notificationrepository.create",{"_index":1783,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.delete(id",{"_index":1798,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.find",{"_index":1790,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.findandcount",{"_index":1789,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.findonebyorfail",{"_index":1797,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.findoneorfail",{"_index":1793,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.save(notification",{"_index":1784,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.update(id",{"_index":1796,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationsservice.create",{"_index":1745,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.create(notificationdto",{"_index":1291,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/RecommendationsService.html":{}}}],["this.notificationsservice.createall(notificationdto",{"_index":1264,"title":{},"body":{"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{}}}],["this.notificationsservice.delete(number(id",{"_index":1756,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.getall",{"_index":1746,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.getbyuserid",{"_index":1748,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.getone(number(id",{"_index":1752,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.update(number(id",{"_index":1754,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.recommendationrepository.create",{"_index":2127,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.recommendationrepository.find",{"_index":2129,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.recommendationrepository.remove(oldrecommendations",{"_index":2132,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.recommendationrepository.save(recommendations",{"_index":2133,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.recommendationsrepository.create",{"_index":1905,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.recommendationsrepository.findandcount",{"_index":1916,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.recommendationsrepository.findonebyorfail",{"_index":1920,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.recommendationsrepository.findoneorfail",{"_index":1917,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.recommendationsrepository.remove(recommend",{"_index":1921,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.recommendationsrepository.save(recommendation",{"_index":1915,"title":{},"body":{"injectables/RecommendationsService.html":{}}}],["this.recommendservice.create(createrecommenddto",{"_index":1881,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["this.recommendservice.findall",{"_index":1882,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["this.recommendservice.findone(id",{"_index":1883,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["this.recommendservice.remove(id",{"_index":1884,"title":{},"body":{"controllers/RecommendationsController.html":{}}}],["this.recopilationrepository.findoneby",{"_index":1607,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["this.recopilationrepository.findonebyorfail",{"_index":1051,"title":{},"body":{"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/SummaryInformationService.html":{},"injectables/WordService.html":{}}}],["this.recopilationrepository.findoneorfail",{"_index":562,"title":{},"body":{"injectables/CategorizedCriteriaService.html":{}}}],["this.recopilationsrepository.create(recopilationdata",{"_index":2098,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.recopilationsrepository.find",{"_index":2136,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.recopilationsrepository.findandcount",{"_index":2052,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.recopilationsrepository.findonebyorfail",{"_index":2018,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["this.recopilationsrepository.findoneorfail",{"_index":2053,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.recopilationsrepository.remove([recopilation",{"_index":2100,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.recopilationsrepository.save(recopilation",{"_index":2020,"title":{},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{}}}],["this.recopilationsrepository.update(id",{"_index":2099,"title":{},"body":{"injectables/RecopilationsService.html":{}}}],["this.recopilationsservice.create",{"_index":2010,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["this.recopilationsservice.create(recopilationdata",{"_index":2005,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["this.recopilationsservice.findall",{"_index":1993,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["this.recopilationsservice.findone(+id",{"_index":1997,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["this.recopilationsservice.findonedetailed(+id",{"_index":2000,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["this.recopilationsservice.findonematrix(+id",{"_index":2003,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["this.recopilationsservice.getactiverecopilations",{"_index":1996,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["this.recopilationsservice.recommendcategories",{"_index":2015,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["this.recopilationsservice.relatetoindicators",{"_index":2013,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["this.recopilationsservice.remove(+id",{"_index":2011,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["this.recopilationsservice.update",{"_index":2007,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":195,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":2150,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.summaryinformationservice.findinformationcollections",{"_index":2189,"title":{},"body":{"controllers/SummaryInformationController.html":{}}}],["this.userrepository.find",{"_index":1785,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.userrepository.findonebyorfail",{"_index":1781,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.usersrepository.findandcount",{"_index":2355,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findonebyorfail",{"_index":2356,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneorfail",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.remove([user",{"_index":2359,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.softremove(user",{"_index":2358,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(id",{"_index":2357,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":2301,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":2302,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(+id",{"_index":2305,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.passwordchange(+id",{"_index":2310,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":2308,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(+id",{"_index":2306,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.wordservice.findinformationcollections",{"_index":2381,"title":{},"body":{"controllers/WordController.html":{}}}],["this.wordservice.generateword",{"_index":2384,"title":{},"body":{"controllers/WordController.html":{}}}],["throw",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/CreateRecopilationDto.html":{},"controllers/CriterionController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/EvidencesService.html":{},"injectables/IndicatorsService.html":{},"injectables/LinksService.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/WordController.html":{}}}],["tienes",{"_index":1283,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["timestamp",{"_index":1125,"title":{},"body":{"entities/Evidence.html":{},"entities/InformationCollection.html":{},"entities/Notification.html":{}}}],["tipo",{"_index":2453,"title":{},"body":{"injectables/WordService.html":{}}}],["toclassonly",{"_index":1311,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["token",{"_index":199,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["totalitems",{"_index":1841,"title":{},"body":{"classes/PaginatedItems.html":{},"miscellaneous/functions.html":{}}}],["totalpages",{"_index":1842,"title":{},"body":{"classes/PaginatedItems.html":{}}}],["touch",{"_index":2693,"title":{},"body":{"index.html":{}}}],["transform",{"_index":1314,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["transformation",{"_index":2484,"title":{},"body":{"injectables/WordService.html":{}}}],["transformer",{"_index":618,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/CriteriaToRelate.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/FiltersSegmentDto.html":{},"classes/IndicatorToRelate.html":{},"entities/Notification.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"dependencies.html":{}}}],["transport",{"_index":1677,"title":{},"body":{"modules/MailsModule.html":{}}}],["true",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CategoryToRecommend.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"classes/DepartmentToBeRecommended.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"entities/Evidence.html":{},"classes/FiltersSegmentDto.html":{},"classes/Image.html":{},"entities/Indicator.html":{},"classes/IndicatorToRelate.html":{},"injectables/IndicatorsService.html":{},"injectables/InformationCollectionsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/RecommendCategoriesDto.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{},"miscellaneous/variables.html":{}}}],["true})@arraynotempty()@isarray()@isnotempty()@type(undefined",{"_index":988,"title":{},"body":{"classes/DepartmentToBeRecommended.html":{},"classes/IndicatorToRelate.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{}}}],["true})@arraynotempty({message",{"_index":713,"title":{},"body":{"classes/CreateDepartmentsPerRecopilationDto.html":{}}}],["true})@isarray()@type(undefined",{"_index":1856,"title":{},"body":{"classes/RecommendCategoriesDto.html":{}}}],["true})@isoptional",{"_index":1312,"title":{},"body":{"classes/FiltersSegmentDto.html":{}}}],["try",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/CriterionController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"controllers/WordController.html":{}}}],["twitter",{"_index":2699,"title":{},"body":{"index.html":{}}}],["type",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"entities/Criteria.html":{},"classes/CriteriaToRelate.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"classes/DepartmentToBeRecommended.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"interfaces/Filter.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/HttpExceptionFilter.html":{},"classes/Image.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"classes/IndicatorToRelate.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/LoginAuthDto.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginatedItems.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"entities/Recommendation.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"interfaces/RecopilationDto.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"guards/RolesGuard.html":{},"injectables/SuccessfulResponseBuilderInterceptor.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateRecopilationDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WordController.html":{},"injectables/WordService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2713,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":10,"title":{},"body":{"classes/Admin.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"entities/CategorizedCriteria.html":{},"injectables/CategorizedCriteriaService.html":{},"entities/Category.html":{},"classes/Coordinator.html":{},"entities/Criteria.html":{},"injectables/CriterionService.html":{},"classes/Department.html":{},"entities/DepartmentPerRecopilation.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"classes/Document.html":{},"injectables/DocumentsService.html":{},"entities/Evidence.html":{},"injectables/EvidencesService.html":{},"classes/Image.html":{},"injectables/ImagesService.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/IndicatorsService.html":{},"entities/InformationCollection.html":{},"injectables/InformationCollectionsService.html":{},"classes/Link.html":{},"injectables/LinksService.html":{},"entities/Notification.html":{},"injectables/NotificationsService.html":{},"entities/Recommendation.html":{},"injectables/RecommendationsService.html":{},"entities/Recopilation.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"injectables/SummaryInformationService.html":{},"classes/TypeORMExceptionFilter.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{},"dependencies.html":{}}}],["typeormerror",{"_index":2207,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["typeormexceptionfilter",{"_index":2202,"title":{"classes/TypeORMExceptionFilter.html":{}},"body":{"classes/TypeORMExceptionFilter.html":{},"coverage.html":{}}}],["typeormmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{}}}],["typeormmodule.forfeature",{"_index":388,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{}}}],["typeormmodule.forfeature([criteria",{"_index":937,"title":{},"body":{"modules/CriterionModule.html":{}}}],["typeormmodule.forfeature([indicator",{"_index":1434,"title":{},"body":{"modules/IndicatorsModule.html":{}}}],["typeormmodule.forfeature([notification",{"_index":1762,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forrootasync",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":2248,"title":{},"body":{"classes/UpdateCriteriaDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["ui",{"_index":2525,"title":{},"body":{"injectables/WordService.html":{}}}],["un",{"_index":1284,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["unauthorizedexception",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["unauthorizedexception('contraseña",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":187,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/CategoriesController.html":{},"controllers/CategorizedCriteriaController.html":{},"entities/Category.html":{},"entities/Criteria.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"controllers/DocumentsController.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"classes/FiltersSegmentDto.html":{},"controllers/ImagesController.html":{},"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"entities/Notification.html":{},"controllers/NotificationsController.html":{},"controllers/RecommendationsController.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["undefined})@apipropertyoptional()@isstring()@isoptional",{"_index":1834,"title":{},"body":{"classes/OrderTypeParamDto.html":{}}}],["unexpected",{"_index":1338,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["unique",{"_index":477,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/Criteria.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/Indicator.html":{},"entities/IndicatorPerRecopilation.html":{},"entities/Recommendation.html":{},"classes/TypeORMExceptionFilter.html":{},"entities/User.html":{}}}],["unique(['departmentperrecopilation",{"_index":1866,"title":{},"body":{"entities/Recommendation.html":{}}}],["unique(['recopilation",{"_index":482,"title":{},"body":{"entities/CategorizedCriteria.html":{},"entities/DepartmentPerRecopilation.html":{},"entities/IndicatorPerRecopilation.html":{}}}],["unit",{"_index":2671,"title":{},"body":{"index.html":{}}}],["university",{"_index":2528,"title":{},"body":{"injectables/WordService.html":{}}}],["university_venezuela_",{"_index":2394,"title":{},"body":{"controllers/WordController.html":{}}}],["unknown",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"controllers/DepartmentsController.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"injectables/DepartmentsService.html":{},"controllers/DocumentsController.html":{},"injectables/DocumentsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/IndicatorsController.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecommendationsController.html":{},"injectables/RecommendationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/SummaryInformationController.html":{},"injectables/SummaryInformationService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WordService.html":{}}}],["unlicensed",{"_index":2712,"title":{},"body":{"properties.html":{}}}],["unseen",{"_index":1776,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["unseennotifications",{"_index":1792,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["unused",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsService.html":{},"injectables/UsersService.html":{}}}],["update",{"_index":488,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":1753,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["update(id",{"_index":500,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"injectables/InformationCollectionsService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"injectables/UsersService.html":{}}}],["update(request",{"_index":1548,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["update(undefined",{"_index":2294,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatecategorizedcriteriadto",{"_index":501,"title":{},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{}}}],["updatecategorizedcriteriondto",{"_index":502,"title":{"classes/UpdateCategorizedCriterionDto.html":{}},"body":{"controllers/CategorizedCriteriaController.html":{},"injectables/CategorizedCriteriaService.html":{},"classes/UpdateCategorizedCriterionDto.html":{},"coverage.html":{}}}],["updatecategory",{"_index":276,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatecategory(id",{"_index":307,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatecategorydto",{"_index":309,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto.helptext",{"_index":438,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatecategorydto.indicatorindex",{"_index":434,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatecategorydto.name",{"_index":436,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatecriteriadto",{"_index":914,"title":{"classes/UpdateCriteriaDto.html":{}},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{},"classes/UpdateCriteriaDto.html":{},"coverage.html":{}}}],["updatecriteriadto.indicatorindex",{"_index":956,"title":{},"body":{"injectables/CriterionService.html":{}}}],["updatecriterion",{"_index":897,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{}}}],["updatecriterion(id",{"_index":913,"title":{},"body":{"controllers/CriterionController.html":{},"injectables/CriterionService.html":{}}}],["updatedcategory",{"_index":308,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatedcollection",{"_index":1567,"title":{},"body":{"controllers/InformationCollectionsController.html":{}}}],["updatedcriteria",{"_index":958,"title":{},"body":{"injectables/CriterionService.html":{}}}],["updatedepartmentperrecopilationdto",{"_index":1017,"title":{"classes/UpdateDepartmentPerRecopilationDto.html":{}},"body":{"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"coverage.html":{}}}],["updatedepartmentsperrecopilationdto",{"_index":1016,"title":{},"body":{"controllers/DepartmentsPerRecopilationsController.html":{},"injectables/DepartmentsPerRecopilationsService.html":{}}}],["updatedevidence",{"_index":1189,"title":{},"body":{"controllers/EvidencesController.html":{},"controllers/LinksController.html":{}}}],["updatedindicador",{"_index":1411,"title":{},"body":{"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{}}}],["updatedrecopilation",{"_index":2006,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["updateevidencedto",{"_index":1147,"title":{"classes/UpdateEvidenceDto.html":{}},"body":{"controllers/EvidencesController.html":{},"injectables/EvidencesService.html":{},"controllers/LinksController.html":{},"injectables/LinksService.html":{},"classes/UpdateEvidenceDto.html":{},"coverage.html":{}}}],["updateevidencedto.collectionid",{"_index":1273,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["updateevidencedto.error",{"_index":1274,"title":{},"body":{"injectables/EvidencesService.html":{}}}],["updateevidencedto.filelink",{"_index":1188,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["updateindicator",{"_index":1397,"title":{},"body":{"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{}}}],["updateindicator(id",{"_index":1410,"title":{},"body":{"controllers/IndicatorsController.html":{}}}],["updateindicator(index",{"_index":1486,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["updateindicatordto",{"_index":1412,"title":{"classes/UpdateIndicatorDto.html":{}},"body":{"controllers/IndicatorsController.html":{},"injectables/IndicatorsService.html":{},"classes/UpdateIndicatorDto.html":{},"coverage.html":{}}}],["updateindicatordto.index",{"_index":1510,"title":{},"body":{"injectables/IndicatorsService.html":{}}}],["updateindicatorperrecopilationdto",{"_index":1443,"title":{"classes/UpdateIndicatorPerRecopilationDto.html":{}},"body":{"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{},"classes/UpdateIndicatorPerRecopilationDto.html":{},"coverage.html":{}}}],["updateindicatorsperrecopilationsdto",{"_index":1442,"title":{},"body":{"controllers/IndicatorsPerRecopilationsController.html":{},"injectables/IndicatorsPerRecopilationsService.html":{}}}],["updateinformationcollectiondto",{"_index":1549,"title":{"classes/UpdateInformationCollectionDto.html":{}},"body":{"controllers/InformationCollectionsController.html":{},"injectables/InformationCollectionsService.html":{},"classes/UpdateInformationCollectionDto.html":{},"coverage.html":{}}}],["updateinformationcollectiondto.categoryid",{"_index":1620,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["updateinformationcollectiondto.departmentid",{"_index":1622,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["updateinformationcollectiondto.isapproved",{"_index":1616,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["updateinformationcollectiondto.name",{"_index":1612,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["updateinformationcollectiondto.recopilationid",{"_index":1618,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["updateinformationcollectiondto.summary",{"_index":1614,"title":{},"body":{"injectables/InformationCollectionsService.html":{}}}],["updatenotificationdto",{"_index":2257,"title":{"classes/UpdateNotificationDto.html":{}},"body":{"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["updateorcreate",{"_index":1951,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["updateorcreate(@body",{"_index":2008,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["updateorcreate(recopilationdata",{"_index":1983,"title":{},"body":{"controllers/RecopilationsController.html":{}}}],["updaterecopilationdto",{"_index":1980,"title":{"classes/UpdateRecopilationDto.html":{}},"body":{"controllers/RecopilationsController.html":{},"injectables/RecopilationsService.html":{},"classes/UpdateRecopilationDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":2263,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["upload",{"_index":1165,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["upload.ts",{"_index":2575,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadedfile",{"_index":1151,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["uploads",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"controllers/EvidencesController.html":{}}}],["url",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"classes/FiltersSegmentDto.html":{}}}],["usamos",{"_index":821,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["useclass",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["usefactory",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailsModule.html":{}}}],["useinterceptors",{"_index":1150,"title":{},"body":{"controllers/EvidencesController.html":{}}}],["user",{"_index":11,"title":{"entities/User.html":{}},"body":{"classes/Admin.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Coordinator.html":{},"classes/Department.html":{},"modules/EvidencesModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"injectables/MailsService.html":{},"entities/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"modules/RecommendationsModule.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":2266,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":850,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:18",{"_index":854,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":852,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":856,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":859,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":12,"title":{},"body":{"classes/Admin.html":{},"classes/Coordinator.html":{},"classes/Department.html":{}}}],["user.fullname",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.notifications",{"_index":1712,"title":{},"body":{"entities/Notification.html":{}}}],["user.password",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.type",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.type?.includes(role",{"_index":2152,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user_types",{"_index":13,"title":{},"body":{"classes/Admin.html":{},"classes/Coordinator.html":{},"classes/CreateUserDto.html":{},"classes/Department.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_types.admin",{"_index":2348,"title":{},"body":{"injectables/UsersService.html":{}}}],["user_types.coordinator",{"_index":2350,"title":{},"body":{"injectables/UsersService.html":{}}}],["user_types.department",{"_index":2352,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":778,"title":{},"body":{"classes/CreateNotificationDto.html":{},"injectables/EvidencesService.html":{},"injectables/InformationCollectionsService.html":{},"injectables/NotificationsService.html":{},"injectables/RecommendationsService.html":{}}}],["userrepository",{"_index":1767,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["users",{"_index":1000,"title":{},"body":{"controllers/DepartmentsController.html":{},"injectables/DepartmentsService.html":{},"injectables/NotificationsService.html":{},"classes/OrderByParamDto-10.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.constants",{"_index":14,"title":{},"body":{"classes/Admin.html":{},"classes/Coordinator.html":{},"classes/CreateUserDto.html":{},"classes/Department.html":{},"classes/OrderByParamDto-10.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":2315,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.foreach((user",{"_index":1786,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["users.service",{"_index":2297,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/department.entity",{"_index":1032,"title":{},"body":{"modules/DepartmentsPerRecopilationsModule.html":{},"injectables/DepartmentsPerRecopilationsService.html":{},"modules/InformationCollectionsModule.html":{},"injectables/InformationCollectionsService.html":{},"modules/RecommendationsModule.html":{},"injectables/RecommendationsService.html":{},"modules/RecopilationsModule.html":{},"injectables/RecopilationsService.html":{}}}],["users/entities/user.entity",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EvidencesModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"modules/RecommendationsModule.html":{}}}],["userscontroller",{"_index":2280,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":45,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":2296,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertype",{"_index":857,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/typealiases.html":{}}}],["userwithoutpassword",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["validación",{"_index":831,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["validatedates",{"_index":801,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["validateif",{"_index":815,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["validateif((o",{"_index":832,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["validateif(o",{"_index":811,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["validatenested",{"_index":616,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/CriteriaToRelate.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/IndicatorToRelate.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{}}}],["validatenested({each",{"_index":987,"title":{},"body":{"classes/DepartmentToBeRecommended.html":{},"classes/IndicatorToRelate.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{}}}],["validation",{"_index":656,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/CreateRecopilationDto.html":{}}}],["validationerror",{"_index":630,"title":{},"body":{"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{}}}],["validations",{"_index":635,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validations.exception",{"_index":647,"title":{},"body":{"classes/ClassValidatorValidationsExceptionFilter.html":{}}}],["validations.exception.ts",{"_index":626,"title":{},"body":{"classes/ClassValidatorValidationsException.html":{},"coverage.html":{}}}],["validations.exception.ts:4",{"_index":631,"title":{},"body":{"classes/ClassValidatorValidationsException.html":{}}}],["validator",{"_index":617,"title":{},"body":{"classes/CategoryToRecommend.html":{},"classes/ClassValidatorValidationsException.html":{},"classes/ClassValidatorValidationsExceptionFilter.html":{},"classes/CreateCategorizedCriteriaDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateDepartmentsPerRecopilationDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateIndicatorPerRecopilationDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateRecommendationDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"classes/CriteriaToRelate.html":{},"classes/DepartmentToBeRecommended.html":{},"classes/FiltersSegmentDto.html":{},"classes/FindOneParams.html":{},"classes/IndicatorToRelate.html":{},"classes/LoginAuthDto.html":{},"classes/OrderByParamDto.html":{},"classes/OrderByParamDto-1.html":{},"classes/OrderByParamDto-10.html":{},"classes/OrderByParamDto-2.html":{},"classes/OrderByParamDto-3.html":{},"classes/OrderByParamDto-4.html":{},"classes/OrderByParamDto-5.html":{},"classes/OrderByParamDto-6.html":{},"classes/OrderByParamDto-7.html":{},"classes/OrderByParamDto-8.html":{},"classes/OrderByParamDto-9.html":{},"classes/OrderTypeParamDto.html":{},"classes/PaginationParams.html":{},"classes/RecommendCategoriesDto.html":{},"classes/RelateIndicatorsToRecopilationDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateDepartmentPerRecopilationDto.html":{},"classes/UpdateIndicatorDto.html":{},"classes/UpdateInformationCollectionDto.html":{},"classes/UpdateRecopilationDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["value",{"_index":1302,"title":{},"body":{"interfaces/Filter.html":{},"injectables/NotificationsService.html":{},"classes/TypeORMExceptionFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":602,"title":{},"body":{"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCriteriaDto.html":{},"classes/CreateEvidenceDto.html":{},"classes/CreateIndicatorDto.html":{},"classes/CreateInformationCollectionDto.html":{},"classes/CreateRecopilationDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateIndicatorDto.html":{}}}],["values.categorynamemaxamount",{"_index":605,"title":{},"body":{"entities/Category.html":{}}}],["varchar",{"_index":589,"title":{},"body":{"entities/Category.html":{},"entities/Indicator.html":{},"entities/Recopilation.html":{}}}],["variable",{"_index":2549,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2728,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CriterionService.html":{},"injectables/DepartmentsService.html":{},"injectables/UsersService.html":{}}}],["venezuela",{"_index":2531,"title":{},"body":{"injectables/WordService.html":{}}}],["verify",{"_index":2437,"title":{},"body":{"injectables/WordService.html":{}}}],["version",{"_index":2710,"title":{},"body":{"properties.html":{}}}],["verticalposition",{"_index":2510,"title":{},"body":{"injectables/WordService.html":{}}}],["verticalpositionalign",{"_index":2423,"title":{},"body":{"injectables/WordService.html":{}}}],["verticalpositionalign.bottom",{"_index":2512,"title":{},"body":{"injectables/WordService.html":{}}}],["verticalpositionrelativefrom",{"_index":2425,"title":{},"body":{"injectables/WordService.html":{}}}],["verticalpositionrelativefrom.top_margin",{"_index":2511,"title":{},"body":{"injectables/WordService.html":{}}}],["violates",{"_index":2216,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["void",{"_index":813,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["watch",{"_index":2666,"title":{},"body":{"index.html":{}}}],["web",{"_index":2532,"title":{},"body":{"injectables/WordService.html":{}}}],["website",{"_index":2697,"title":{},"body":{"index.html":{}}}],["where('cc.recopilationid",{"_index":456,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["width",{"_index":2485,"title":{},"body":{"injectables/WordService.html":{}}}],["withdeleted",{"_index":1492,"title":{},"body":{"injectables/IndicatorsService.html":{},"injectables/RecopilationsService.html":{}}}],["word",{"_index":2368,"title":{},"body":{"controllers/WordController.html":{}}}],["word.controller",{"_index":2408,"title":{},"body":{"modules/WordModule.html":{}}}],["word.service",{"_index":2376,"title":{},"body":{"controllers/WordController.html":{},"modules/WordModule.html":{}}}],["wordcontroller",{"_index":2366,"title":{"controllers/WordController.html":{}},"body":{"controllers/WordController.html":{},"modules/WordModule.html":{},"coverage.html":{}}}],["wordmodule",{"_index":46,"title":{"modules/WordModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WordModule.html":{},"modules.html":{},"overview.html":{}}}],["wordservice",{"_index":2375,"title":{"injectables/WordService.html":{}},"body":{"controllers/WordController.html":{},"modules/WordModule.html":{},"injectables/WordService.html":{},"coverage.html":{},"overview.html":{}}}],["workspace",{"_index":2626,"title":{},"body":{"dependencies.html":{}}}],["wrongpasswordexception",{"_index":143,"title":{"classes/WrongPasswordException.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/WrongPasswordException.html":{},"coverage.html":{}}}],["y",{"_index":824,"title":{},"body":{"classes/CreateRecopilationDto.html":{}}}],["ya",{"_index":2222,"title":{},"body":{"classes/TypeORMExceptionFilter.html":{}}}],["yes",{"_index":2639,"title":{},"body":{"miscellaneous/functions.html":{}}}],["you'd",{"_index":2687,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/CategorizedCriteriaModule.html":{},"modules/CriterionModule.html":{},"modules/DepartmentsPerRecopilationsModule.html":{},"modules/EvidencesModule.html":{},"modules/IndicatorsModule.html":{},"modules/IndicatorsPerRecopilationsModule.html":{},"modules/InformationCollectionsModule.html":{},"modules/MailsModule.html":{},"modules/NotificationsModule.html":{},"modules/RecommendationsModule.html":{},"modules/RecopilationsModule.html":{},"modules/SummaryInformationModule.html":{},"modules/UsersModule.html":{},"modules/WordModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/entities/admin.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChildEntity } from 'typeorm'\nimport { User } from './user.entity'\nimport { USER_TYPES } from '../users.constants'\n\n@ChildEntity(USER_TYPES.ADMIN)\nexport class Admin extends User {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCategorizedCriteriaModule\n\nCategorizedCriteriaModule\n\nAppModule -->\n\nCategorizedCriteriaModule->AppModule\n\n\n\n\n\nCriterionModule\n\nCriterionModule\n\nAppModule -->\n\nCriterionModule->AppModule\n\n\n\n\n\nDepartmentsPerRecopilationsModule\n\nDepartmentsPerRecopilationsModule\n\nAppModule -->\n\nDepartmentsPerRecopilationsModule->AppModule\n\n\n\n\n\nEvidencesModule\n\nEvidencesModule\n\nAppModule -->\n\nEvidencesModule->AppModule\n\n\n\n\n\nIndicatorsModule\n\nIndicatorsModule\n\nAppModule -->\n\nIndicatorsModule->AppModule\n\n\n\n\n\nIndicatorsPerRecopilationsModule\n\nIndicatorsPerRecopilationsModule\n\nAppModule -->\n\nIndicatorsPerRecopilationsModule->AppModule\n\n\n\n\n\nInformationCollectionsModule\n\nInformationCollectionsModule\n\nAppModule -->\n\nInformationCollectionsModule->AppModule\n\n\n\n\n\nMailsModule\n\nMailsModule\n\nAppModule -->\n\nMailsModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nRecommendationsModule\n\nRecommendationsModule\n\nAppModule -->\n\nRecommendationsModule->AppModule\n\n\n\nAppModule -->\n\nRecommendationsModule->AppModule\n\n\n\n\n\nRecopilationsModule\n\nRecopilationsModule\n\nAppModule -->\n\nRecopilationsModule->AppModule\n\n\n\nAppModule -->\n\nRecopilationsModule->AppModule\n\n\n\n\n\nSummaryInformationModule\n\nSummaryInformationModule\n\nAppModule -->\n\nSummaryInformationModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nWordModule\n\nWordModule\n\nAppModule -->\n\nWordModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            CategorizedCriteriaModule\n                        \n                        \n                            CriterionModule\n                        \n                        \n                            DepartmentsPerRecopilationsModule\n                        \n                        \n                            EvidencesModule\n                        \n                        \n                            IndicatorsModule\n                        \n                        \n                            IndicatorsPerRecopilationsModule\n                        \n                        \n                            InformationCollectionsModule\n                        \n                        \n                            MailsModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            RecommendationsModule\n                        \n                        \n                            RecommendationsModule\n                        \n                        \n                            RecopilationsModule\n                        \n                        \n                            RecopilationsModule\n                        \n                        \n                            SummaryInformationModule\n                        \n                        \n                            UsersModule\n                        \n                        \n                            WordModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { UsersModule } from './core/users/users.module'\nimport * as path from 'path'\nimport { ConfigModule, ConfigService } from 'nestjs-config'\nimport { NotificationsModule } from './core/notifications/notifications.module'\nimport { InformationCollectionsModule } from './core/information-collections/information-collections.module'\nimport { EvidencesModule } from './core/evidences/evidences.module'\nimport { IndicatorsModule } from './core/indicators/indicators.module'\nimport { CategoriesModule } from './core/categories/categories.module'\nimport { CriterionModule } from './core/criterion/criterion.module'\nimport { RecopilationsModule } from './core/recopilations/recopilations.module'\nimport { AuthModule } from './core/auth/auth.module'\nimport { RecommendationsModule } from './core/recommendations/recommendations.module'\nimport { IndicatorsPerRecopilationsModule } from './core/indicators-per-recopilations/indicators-per-recopilations.module'\nimport { DepartmentsPerRecopilationsModule } from './core/departments-per-recopilations/departments-per-recopilations.module'\nimport { CategorizedCriteriaModule } from './core/categorized-criteria/categorized-criteria.module'\nimport { ServeStaticModule } from '@nestjs/serve-static/dist/serve-static.module'\nimport { SummaryInformationModule } from './core/summary-information/summary-information.module'\nimport { WordModule } from './core/word/word.module'\nimport { MailsModule } from './core/mails/mails.module'\n\n@Module({\n  imports: [\n    ConfigModule.load(path.resolve(__dirname, 'config', '**/!(*.d).{ts,js}')),\n    TypeOrmModule.forRootAsync({\n      useFactory: (config: ConfigService) => {\n        const DATABASE_CONFIG = config.get('database')\n\n        return {\n          type: 'postgres',\n          url: DATABASE_CONFIG.URL,\n          autoLoadEntities: true,\n          synchronize: false\n        }\n      },\n      inject: [ConfigService]\n    }),\n    ServeStaticModule.forRoot({\n      rootPath: path.join(__dirname, '..', 'uploads')\n    }),\n    AuthModule,\n    UsersModule,\n    RecopilationsModule,\n    IndicatorsModule,\n    CategoriesModule,\n    CriterionModule,\n    RecopilationsModule,\n    RecommendationsModule,\n    IndicatorsPerRecopilationsModule,\n    CategorizedCriteriaModule,\n    DepartmentsPerRecopilationsModule,\n    RecommendationsModule,\n    InformationCollectionsModule,\n    EvidencesModule,\n    NotificationsModule,\n    SummaryInformationModule,\n    WordModule,\n    MailsModule\n  ]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginAuthDto: LoginAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/core/auth/auth.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginAuthDto\n                                            \n                                                            LoginAuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  HttpCode,\n  UnauthorizedException,\n  HttpStatus\n} from '@nestjs/common'\nimport { AuthService } from './auth.service'\nimport { LoginAuthDto } from './dto/login-auth.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { WrongPasswordException } from './errors/wrong-password.exception'\nimport { Public } from './public.decorator'\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Public()\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(@Body() loginAuthDto: LoginAuthDto) {\n    try {\n      const loginResult = await this.authService.login(loginAuthDto)\n      return loginResult\n    } catch (e) {\n      if (e instanceof WrongPasswordException) {\n        throw new UnauthorizedException('Contraseña inválida')\n      } else {\n        throw e\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/auth.guard.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/auth.guard.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException\n} from '@nestjs/common'\nimport { Reflector } from '@nestjs/core'\nimport { JwtService } from '@nestjs/jwt'\nimport { Request } from 'express'\nimport { ConfigService } from 'nestjs-config'\nimport { IS_PUBLIC_KEY } from './public.decorator'\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private reflector: Reflector\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass()\n    ])\n    if (isPublic) {\n      return true\n    }\n\n    const request = context.switchToHttp().getRequest()\n    const token = this.extractTokenFromHeader(request)\n    const JWT = this.configService.get('jwt')\n    if (!token) {\n      throw new UnauthorizedException()\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: JWT.JWT_SECRET\n      })\n\n      request['user'] = payload\n    } catch {\n      throw new UnauthorizedException()\n    }\n    return true\n  }\n\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? []\n    return type === 'Bearer' ? token : undefined\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { AuthService } from './auth.service'\nimport { AuthController } from './auth.controller'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { User } from '../users/entities/user.entity'\nimport { JwtModule } from '@nestjs/jwt'\nimport { ConfigModule, ConfigService } from 'nestjs-config'\nimport { AuthGuard } from './auth.guard'\nimport { APP_GUARD } from '@nestjs/core'\nimport { RolesGuard } from './roles.guard'\n\n@Module({\n  imports: [\n    ConfigModule,\n    TypeOrmModule.forFeature([User]),\n    JwtModule.registerAsync({\n      useFactory: (config: ConfigService) => {\n        const JWT_CONFIG = config.get('jwt')\n\n        return {\n          global: true,\n          secret: JWT_CONFIG.SECRET,\n          signOptions: { expiresIn: '10d' }\n        }\n      },\n      inject: [ConfigService]\n    })\n  ],\n  controllers: [AuthController],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard\n    },\n    AuthService\n  ]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginAuthDto: LoginAuthDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/auth.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginAuthDto\n                                            \n                                                            LoginAuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { LoginAuthDto } from './dto/login-auth.dto'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { User } from '../users/entities/user.entity'\nimport { Repository } from 'typeorm'\nimport { JwtService } from '@nestjs/jwt'\nimport { WrongPasswordException } from './errors/wrong-password.exception'\nimport * as bcrypt from 'bcrypt'\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService\n  ) {}\n\n  async login(loginAuthDto: LoginAuthDto) {\n    const user = await this.usersRepository.findOneOrFail({\n      where: { email: loginAuthDto.email },\n      select: {\n        id: true,\n        fullName: true,\n        email: true,\n        type: true,\n        password: true\n      }\n    })\n\n    const comparation = await bcrypt.compare(\n      loginAuthDto.password,\n      user.password\n    )\n    if (!comparation) throw new WrongPasswordException()\n\n    const payload = { id: user.id, name: user.fullName, type: user.type }\n    const token = this.jwtService.sign(payload)\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: _, ...userWithoutPassword } = user\n\n    const data = {\n      user: userWithoutPassword,\n      token\n    }\n    return data\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createCategory\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                deleteCategory\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllCategories\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getCategoriesByIndicator\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getCategoriesByRecopilation\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getCategory\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCategory(newCategory: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin)@Post()@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/core/categories/categories.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newCategory\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCategory(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin)@Delete('/:id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/core/categories/categories.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllCategories(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Department, Role.Coordinator, Role.Admin)@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/categories/categories.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getCategoriesByIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCategoriesByIndicator(indicatorIndex: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin, Role.Department)@Get('/indicator/:indicatorIndex')\n                \n            \n\n                    \n                        \n                            Defined in src/core/categories/categories.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                indicatorIndex\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getCategoriesByRecopilation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCategoriesByRecopilation(recopilationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin, Role.Department)@Get('/recopilation/:recopilationId')\n                \n            \n\n                    \n                        \n                            Defined in src/core/categories/categories.controller.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCategory(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin, Role.Department)@Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/categories/categories.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCategory(id: string, updatedCategory: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin)@Patch('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/categories/categories.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatedCategory\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query\n} from '@nestjs/common'\nimport { CategoriesService } from './categories.service'\nimport { CreateCategoryDto } from './dto/create-category.dto'\nimport { UpdateCategoryDto } from './dto/update-category.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-categories-by-param.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Categories')\n@Controller('categories')\nexport class CategoriesController {\n  constructor(private readonly categoriesService: CategoriesService) {}\n\n  @Roles(Role.Department, Role.Coordinator, Role.Admin)\n  @Get()\n  async getAllCategories(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { categories, count } = await this.categoriesService.getAllCategories(\n      {\n        page,\n        itemsPerPage,\n        orderBy,\n        orderType,\n        filters\n      }\n    )\n\n    const paginatedItems = constructPaginatedItemsDto(\n      categories,\n      count,\n      page,\n      itemsPerPage\n    )\n    return paginatedItems\n  }\n\n  @Roles(Role.Coordinator, Role.Admin, Role.Department)\n  @Get('/:id')\n  async getCategory(@Param('id') id: string) {\n    const category = await this.categoriesService.getOneCategory(Number(id))\n    return category\n  }\n\n  @Roles(Role.Coordinator, Role.Admin)\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async createCategory(@Body() newCategory: CreateCategoryDto) {\n    const createdCategory = await this.categoriesService.create(newCategory)\n    return createdCategory\n  }\n\n  @Roles(Role.Coordinator, Role.Admin)\n  @Patch('/:id')\n  async updateCategory(\n    @Param('id') id: string,\n    @Body() updatedCategory: UpdateCategoryDto\n  ) {\n    const category = await this.categoriesService.updateCategory(\n      Number(id),\n      updatedCategory\n    )\n    return category\n  }\n\n  @Roles(Role.Coordinator, Role.Admin)\n  @Delete('/:id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async deleteCategory(@Param('id') id: string) {\n    await this.categoriesService.deleteCategory(Number(id))\n  }\n\n  @Roles(Role.Coordinator, Role.Admin, Role.Department)\n  @Get('/indicator/:indicatorIndex')\n  async getCategoriesByIndicator(\n    @Param('indicatorIndex') indicatorIndex: string\n  ) {\n    const categories = await this.categoriesService.categoriesByIndicator(\n      Number(indicatorIndex)\n    )\n    return categories\n  }\n\n  @Roles(Role.Coordinator, Role.Admin, Role.Department)\n  @Get('/recopilation/:recopilationId')\n  async getCategoriesByRecopilation(\n    @Param('recopilationId') recopilationId: string\n  ) {\n    const categories = await this.categoriesService.categoriesByRecopilation(\n      Number(recopilationId)\n    )\n    return categories\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService\n\nCategoriesService\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { CategoriesService } from './categories.service'\nimport { CategoriesController } from './categories.controller'\nimport { Category } from './entities/category.entity'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { Indicator } from '../indicators/entities/indicator.entity'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\nimport { CategorizedCriteria } from '../categorized-criteria/entities/categorized-criterion.entity'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Category,\n      Indicator,\n      Recopilation,\n      CategorizedCriteria\n    ])\n  ],\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n  exports: [TypeOrmModule]\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                categoriesByIndicator\n                            \n                            \n                                    Async\n                                categoriesByRecopilation\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                    Async\n                                getAllCategories\n                            \n                            \n                                    Async\n                                getOneCategory\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository, indicatorRepository: Repository, recopilationRepository: Repository, categorizedCriteriaRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/categories/categories.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        indicatorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recopilationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categorizedCriteriaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        categoriesByIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    categoriesByIndicator(indicatorId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categories/categories.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                indicatorId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        categoriesByRecopilation\n                        \n                    \n                \n            \n            \n                \n                        \n                    categoriesByRecopilation(recopilationId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categories/categories.service.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categories/categories.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCategory(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categories/categories.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllCategories(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categories/categories.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOneCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOneCategory(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categories/categories.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCategory(id: number, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categories/categories.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common'\nimport { CreateCategoryDto } from './dto/create-category.dto'\nimport { UpdateCategoryDto } from './dto/update-category.dto'\nimport { Category } from './entities/category.entity'\nimport { Indicator } from '../indicators/entities/indicator.entity'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-categories-by-param.dto'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\nimport { CategorizedCriteria } from '../categorized-criteria/entities/categorized-criterion.entity'\n\n@Injectable()\nexport class CategoriesService {\n  constructor(\n    @InjectRepository(Category)\n    private readonly categoryRepository: Repository,\n    @InjectRepository(Indicator)\n    private readonly indicatorRepository: Repository,\n    @InjectRepository(Recopilation)\n    private readonly recopilationRepository: Repository,\n    @InjectRepository(CategorizedCriteria)\n    private readonly categorizedCriteriaRepository: Repository\n  ) {}\n\n  async create(createCategoryDto: CreateCategoryDto): Promise {\n    const indicator = await this.indicatorRepository.findOneByOrFail({\n      index: createCategoryDto.indicatorIndex\n    })\n\n    const category = this.categoryRepository.create({\n      ...createCategoryDto,\n      indicator: indicator\n    })\n\n    return this.categoryRepository.save(category)\n  }\n\n  async getAllCategories({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [categories, count] = await this.categoryRepository.findAndCount({\n      relations: ['indicator'],\n      take: itemsPerPage,\n      skip: (page - 1) * itemsPerPage,\n      order: { [orderBy]: orderType },\n      where: parseFiltersToTypeOrm(filters)\n    })\n\n    return { categories, count }\n  }\n\n  async getOneCategory(id: number): Promise {\n    const category = await this.categoryRepository.findOne({\n      where: { id },\n      relations: ['indicator']\n    })\n    if (!category) {\n      throw new NotFoundException(`Category with ID ${id} not found`)\n    }\n    return category\n  }\n\n  async updateCategory(\n    id: number,\n    updateCategoryDto: UpdateCategoryDto\n  ): Promise {\n    if (updateCategoryDto.indicatorIndex) {\n      const indicator = await this.indicatorRepository.findOneByOrFail({\n        index: updateCategoryDto.indicatorIndex\n      })\n\n      await this.categoryRepository.update(id, {\n        name: updateCategoryDto.name,\n        helpText: updateCategoryDto.helpText,\n        indicator\n      })\n    } else {\n      await this.categoryRepository.update(id, {\n        name: updateCategoryDto.name,\n        helpText: updateCategoryDto.helpText\n      })\n    }\n\n    const updatedCategory = await this.categoryRepository.findOne({\n      where: { id },\n      relations: ['indicator']\n    })\n    if (!updatedCategory) {\n      throw new NotFoundException(`Category with ID ${id} not found`)\n    }\n    return updatedCategory\n  }\n\n  async deleteCategory(id: number): Promise {\n    const result = await this.categoryRepository.softDelete(id)\n    if (result.affected === 0) {\n      throw new NotFoundException(`Category with ID ${id} not found`)\n    }\n  }\n\n  async categoriesByIndicator(indicatorId: number): Promise {\n    const indicator = await this.indicatorRepository.findOneByOrFail({\n      index: indicatorId\n    })\n\n    const categories = await this.categoryRepository.find({\n      where: { indicator: indicator }\n    })\n\n    return categories\n  }\n\n  async categoriesByRecopilation(recopilationId: number): Promise {\n    const criterion = this.categorizedCriteriaRepository\n      .createQueryBuilder()\n      .select('c.id, c.name, c.helpText, c.indicatorIndex')\n      .distinctOn(['c.id'])\n      .from('categorized_criterion', 'cc')\n      .innerJoin('cc.category', 'c')\n      .where('cc.recopilationId = :recopilationId', { recopilationId })\n      .execute()\n\n    return criterion\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CategorizedCriteria.html":{"url":"entities/CategorizedCriteria.html","title":"entity - CategorizedCriteria","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CategorizedCriteria\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categorized-criteria/entities/categorized-criterion.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                criteria\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                recopilation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, category => category.categorizedCriterion)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categorized-criteria/entities/categorized-criterion.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        criteria\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Criteria\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, criterion => criterion.categorizedCriterion)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categorized-criteria/entities/categorized-criterion.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categorized-criteria/entities/categorized-criterion.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recopilation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Recopilation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, recopilation => recopilation.categorizedCriterion, {onDelete: 'CASCADE', onUpdate: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categorized-criteria/entities/categorized-criterion.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, ManyToOne, Unique } from 'typeorm'\nimport { Recopilation } from 'src/core/recopilations/entities/recopilation.entity'\nimport { Criteria } from 'src/core/criterion/entities/criteria.entity'\nimport { Category } from 'src/core/categories/entities/category.entity'\n\n@Entity('categorized_criterion')\n@Unique(['recopilation', 'criteria'])\nexport class CategorizedCriteria {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @ManyToOne(\n    () => Recopilation,\n    (recopilation) => recopilation.categorizedCriterion,\n    { onDelete: 'CASCADE', onUpdate: 'CASCADE' }\n  )\n  recopilation: Recopilation\n\n  @ManyToOne(() => Criteria, (criterion) => criterion.categorizedCriterion)\n  criteria: Criteria\n\n  @ManyToOne(() => Category, (category) => category.categorizedCriterion)\n  category: Category\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategorizedCriteriaController.html":{"url":"controllers/CategorizedCriteriaController.html","title":"controller - CategorizedCriteriaController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategorizedCriteriaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categorized-criteria/categorized-criteria.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categorized-criteria\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategorizedCriteriaDto: CreateCategorizedCriteriaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/core/categorized-criteria/categorized-criteria.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategorizedCriteriaDto\n                                            \n                                                            CreateCategorizedCriteriaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/categorized-criteria/categorized-criteria.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/categorized-criteria/categorized-criteria.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/categorized-criteria/categorized-criteria.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateCategorizedCriteriaDto: UpdateCategorizedCriterionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/categorized-criteria/categorized-criteria.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategorizedCriteriaDto\n                                            \n                                                            UpdateCategorizedCriterionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  Query,\n  Patch\n} from '@nestjs/common'\nimport { CategorizedCriteriaService } from './categorized-criteria.service'\nimport { CreateCategorizedCriteriaDto } from './dto/create-categorized-criterion.dto'\nimport { UpdateCategorizedCriterionDto } from './dto/update-categorized-criterion.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-categorized-criteria-by-param.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Categorized Criteria')\n@Controller('categorized-criteria')\n@Roles(Role.Coordinator, Role.Admin)\nexport class CategorizedCriteriaController {\n  constructor(\n    private readonly categorizedCriteriaService: CategorizedCriteriaService\n  ) {}\n\n  @Get()\n  async findAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { categorizedCriteria, count } =\n      await this.categorizedCriteriaService.findAll({\n        page,\n        itemsPerPage,\n        orderBy,\n        orderType,\n        filters\n      })\n\n    return constructPaginatedItemsDto(\n      categorizedCriteria,\n      count,\n      page,\n      itemsPerPage\n    )\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number) {\n    return this.categorizedCriteriaService.findOne(id)\n  }\n\n  @Post()\n  async create(\n    @Body() createCategorizedCriteriaDto: CreateCategorizedCriteriaDto\n  ) {\n    return this.categorizedCriteriaService.create(createCategorizedCriteriaDto)\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: number,\n    @Body() updateCategorizedCriteriaDto: UpdateCategorizedCriterionDto\n  ) {\n    return this.categorizedCriteriaService.update(\n      id,\n      updateCategorizedCriteriaDto\n    )\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: number) {\n    return this.categorizedCriteriaService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategorizedCriteriaModule.html":{"url":"modules/CategorizedCriteriaModule.html","title":"module - CategorizedCriteriaModule","body":"\n                   \n\n\n\n\n    Modules\n    CategorizedCriteriaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategorizedCriteriaModule\n\n\n\ncluster_CategorizedCriteriaModule_providers\n\n\n\n\nCategorizedCriteriaService\n\nCategorizedCriteriaService\n\n\n\nCategorizedCriteriaModule\n\nCategorizedCriteriaModule\n\nCategorizedCriteriaModule -->\n\nCategorizedCriteriaService->CategorizedCriteriaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/categorized-criteria/categorized-criteria.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategorizedCriteriaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategorizedCriteriaController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { CategorizedCriteria } from './entities/categorized-criterion.entity'\nimport { CategorizedCriteriaService } from './categorized-criteria.service'\nimport { CategorizedCriteriaController } from './categorized-criteria.controller'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\nimport { Criteria } from '../criterion/entities/criteria.entity'\nimport { Category } from '../categories/entities/category.entity'\nimport { IndicatorPerRecopilation } from '../indicators-per-recopilations/entities/indicator-per-recopilatio.entity'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      CategorizedCriteria,\n      Recopilation,\n      Criteria,\n      Category,\n      IndicatorPerRecopilation\n    ])\n  ],\n  controllers: [CategorizedCriteriaController],\n  providers: [CategorizedCriteriaService]\n})\nexport class CategorizedCriteriaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategorizedCriteriaService.html":{"url":"injectables/CategorizedCriteriaService.html","title":"injectable - CategorizedCriteriaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategorizedCriteriaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categorized-criteria/categorized-criteria.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categorizedCriteriaRepository: Repository, recopilationRepository: Repository, criterionRepository: Repository, categoryRepository: Repository, indicatorPerRecopilationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/categorized-criteria/categorized-criteria.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categorizedCriteriaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recopilationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        criterionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        indicatorPerRecopilationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategorizedCriteriaDto: CreateCategorizedCriteriaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categorized-criteria/categorized-criteria.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategorizedCriteriaDto\n                                            \n                                                            CreateCategorizedCriteriaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categorized-criteria/categorized-criteria.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categorized-criteria/categorized-criteria.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categorized-criteria/categorized-criteria.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateCategorizedCriteriaDto: UpdateCategorizedCriterionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/categorized-criteria/categorized-criteria.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategorizedCriteriaDto\n                                            \n                                                            UpdateCategorizedCriterionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { CategorizedCriteria } from './entities/categorized-criterion.entity'\nimport { CreateCategorizedCriteriaDto } from './dto/create-categorized-criterion.dto'\nimport { UpdateCategorizedCriterionDto } from './dto/update-categorized-criterion.dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\nimport { Criteria } from '../criterion/entities/criteria.entity'\nimport { Category } from '../categories/entities/category.entity'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-categorized-criteria-by-param.dto'\nimport { IndicatorPerRecopilation } from '../indicators-per-recopilations/entities/indicator-per-recopilatio.entity'\n\n@Injectable()\nexport class CategorizedCriteriaService {\n  constructor(\n    @InjectRepository(CategorizedCriteria)\n    private readonly categorizedCriteriaRepository: Repository,\n    @InjectRepository(Recopilation)\n    private readonly recopilationRepository: Repository,\n    @InjectRepository(Criteria)\n    private readonly criterionRepository: Repository,\n    @InjectRepository(Category)\n    private readonly categoryRepository: Repository,\n    @InjectRepository(IndicatorPerRecopilation)\n    private readonly indicatorPerRecopilationRepository: Repository\n  ) {}\n\n  async findAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [categorizedCriteria, count] =\n      await this.categorizedCriteriaRepository.findAndCount({\n        take: Number(itemsPerPage),\n        skip: (Number(page) - 1) * Number(itemsPerPage),\n        relations: ['recopilation', 'criteria', 'category'],\n        order: { [orderBy]: orderType },\n        where: parseFiltersToTypeOrm(filters)\n      })\n\n    return { categorizedCriteria, count }\n  }\n\n  async findOne(id: number): Promise {\n    return this.categorizedCriteriaRepository.findOneOrFail({\n      where: { id },\n      relations: ['recopilation', 'criterion', 'category']\n    })\n  }\n\n  async create(\n    createCategorizedCriteriaDto: CreateCategorizedCriteriaDto\n  ): Promise {\n    const { recopilationId, criteriaId, categoryId } =\n      createCategorizedCriteriaDto\n\n    const [indicatorsPerRecopilation, criteria, category] = await Promise.all([\n      this.indicatorPerRecopilationRepository.find({\n        where: { recopilation: { id: recopilationId } },\n        relations: ['indicator', 'recopilation']\n      }),\n      this.criterionRepository.findOneOrFail({\n        where: { id: criteriaId },\n        relations: ['indicator']\n      }),\n      this.categoryRepository.findOneOrFail({\n        where: { id: categoryId },\n        relations: ['indicator']\n      })\n    ])\n\n    const existsConflict =\n      !indicatorsPerRecopilation.some(\n        (ipr) => ipr.indicator.index === criteria.indicator.index\n      ) ||\n      !indicatorsPerRecopilation.some(\n        (ipr) => ipr.indicator.index === category.indicator.index\n      )\n\n    if (existsConflict) {\n      throw new ConflictException(\n        'The recopilation does not have the indicator related to the criteria and category'\n      )\n    }\n\n    const categorizedCriteria = this.categorizedCriteriaRepository.create({\n      recopilation: indicatorsPerRecopilation[0].recopilation,\n      criteria,\n      category\n    })\n\n    return this.categorizedCriteriaRepository.save(categorizedCriteria)\n  }\n\n  async update(\n    id: number,\n    updateCategorizedCriteriaDto: UpdateCategorizedCriterionDto\n  ): Promise {\n    const categorizedCriteria =\n      await this.categorizedCriteriaRepository.findOneOrFail({\n        where: { id },\n        relations: ['recopilation', 'criterion', 'category']\n      })\n\n    const { recopilationId, criteriaId, categoryId } =\n      updateCategorizedCriteriaDto\n\n    const [recopilation, criteria, category] = await Promise.all([\n      this.recopilationRepository.findOneOrFail({\n        where: { id: recopilationId },\n        relations: ['indicatorsPerRecopilations']\n      }),\n      this.criterionRepository.findOneOrFail({\n        where: { id: criteriaId },\n        relations: ['indicator']\n      }),\n      this.categoryRepository.findOneOrFail({\n        where: { id: categoryId },\n        relations: ['indicator']\n      })\n    ])\n\n    const existsConflict =\n      !recopilation.indicatorsPerRecopilations.some(\n        (ipr) => ipr.indicator.index === criteria.indicator.index\n      ) ||\n      !recopilation.indicatorsPerRecopilations.some(\n        (ipr) => ipr.indicator.index === category.indicator.index\n      )\n\n    if (existsConflict) {\n      throw new ConflictException(\n        'The recopilation does not have the indicator related to the criteria and category'\n      )\n    }\n\n    categorizedCriteria.recopilation = recopilation\n    categorizedCriteria.criteria = criteria\n    categorizedCriteria.category = category\n\n    await this.categorizedCriteriaRepository.save(categorizedCriteria)\n\n    return this.categorizedCriteriaRepository.findOneOrFail({\n      where: { id },\n      relations: ['recopilation', 'criterion', 'category']\n    })\n  }\n\n  async remove(id: number): Promise {\n    const categorizedCriteria =\n      await this.categorizedCriteriaRepository.findOneOrFail({\n        where: { id }\n      })\n    await this.categorizedCriteriaRepository.remove(categorizedCriteria)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categories/entities/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                categorizedCriterion\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                helpText\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                indicator\n                            \n                            \n                                    \n                                informationCollections\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                recommendations\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categorizedCriterion\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CategorizedCriteria[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, categorizedCriteria => categorizedCriteria.category)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/entities/category.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/entities/category.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        helpText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/entities/category.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/entities/category.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        indicator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Indicator\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, indicator => indicator.categories, {onUpdate: 'CASCADE', onDelete: 'CASCADE', cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/entities/category.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        informationCollections\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InformationCollection[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, informationCollection => informationCollection.category)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/entities/category.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/entities/category.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recommendations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Recommendation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, recommendation => recommendation.category)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/entities/category.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CategorizedCriteria } from 'src/core/categorized-criteria/entities/categorized-criterion.entity'\nimport { Indicator } from 'src/core/indicators/entities/indicator.entity'\nimport { InformationCollection } from 'src/core/information-collections/entities/information-collection.entity'\nimport { Recommendation } from 'src/core/recommendations/entities/recommendation.entity'\nimport {\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  Entity,\n  OneToMany,\n  DeleteDateColumn\n} from 'typeorm'\nimport { VALUES } from 'shared/validations'\n\n@Entity('categories')\nexport class Category {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({\n    type: 'varchar',\n    length: VALUES.categoryNameMaxAmount,\n    nullable: false\n  })\n  name: string\n\n  @Column({ type: 'text', nullable: false })\n  helpText: string\n\n  @ManyToOne(() => Indicator, (indicator) => indicator.categories, {\n    onUpdate: 'CASCADE',\n    onDelete: 'CASCADE',\n    cascade: ['soft-remove']\n  })\n  indicator: Indicator\n\n  @OneToMany(() => Recommendation, (recommendation) => recommendation.category)\n  recommendations: Recommendation[]\n\n  @OneToMany(\n    () => InformationCollection,\n    (informationCollection) => informationCollection.category\n  )\n  informationCollections: InformationCollection[]\n\n  @OneToMany(\n    () => CategorizedCriteria,\n    (categorizedCriteria) => categorizedCriteria.category\n  )\n  categorizedCriterion: CategorizedCriteria[]\n\n  @DeleteDateColumn()\n  deletedAt: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryToRecommend.html":{"url":"classes/CategoryToRecommend.html","title":"class - CategoryToRecommend","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryToRecommend\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/dto/recommend-categories.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                categoryId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/recommend-categories.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  ValidateNested\n} from 'class-validator'\nimport { Type } from 'class-transformer'\n\nexport class RecommendCategoriesDto {\n  @IsNumber()\n  @IsNotEmpty()\n  recopilationId: number\n\n  @ValidateNested({ each: true })\n  @IsArray()\n  @Type(() => DepartmentToBeRecommended)\n  departments: DepartmentToBeRecommended[]\n}\n\nexport class DepartmentToBeRecommended {\n  @IsNumber()\n  @IsNotEmpty()\n  departmentId: number\n\n  @ValidateNested({ each: true })\n  @ArrayNotEmpty()\n  @IsArray()\n  @IsNotEmpty()\n  @Type(() => CategoryToRecommend)\n  categories: CategoryToRecommend[]\n}\n\nexport class CategoryToRecommend {\n  @IsNumber()\n  @IsNotEmpty()\n  categoryId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClassValidatorValidationsException.html":{"url":"classes/ClassValidatorValidationsException.html","title":"class - ClassValidatorValidationsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClassValidatorValidationsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/class-validator-validations.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                errors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: ValidationError[])\n                    \n                \n                        \n                            \n                                Defined in src/errors/class-validator-validations.exception.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    ValidationError[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ValidationError[]\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/class-validator-validations.exception.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ValidationError } from 'class-validator'\n\nexport class ClassValidatorValidationsException extends Error {\n  public errors: ValidationError[]\n\n  constructor(errors: ValidationError[]) {\n    super()\n    this.errors = errors\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClassValidatorValidationsExceptionFilter.html":{"url":"classes/ClassValidatorValidationsExceptionFilter.html","title":"class - ClassValidatorValidationsExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClassValidatorValidationsExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/class-validator-validations-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(exception: ClassValidatorValidationsException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/errors/class-validator-validations-exception.filter.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            ClassValidatorValidationsException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus\n} from '@nestjs/common'\nimport { Response } from 'express'\nimport { constructHttpResponse } from 'src/shared/construct-http-response'\nimport { ClassValidatorValidationsException } from './class-validator-validations.exception'\nimport { ValidationError } from 'class-validator'\n\n@Catch(ClassValidatorValidationsException)\nexport class ClassValidatorValidationsExceptionFilter\n  implements ExceptionFilter\n{\n  public catch(\n    exception: ClassValidatorValidationsException,\n    host: ArgumentsHost\n  ) {\n    const ctx = host.switchToHttp()\n    const response = ctx.getResponse()\n\n    return response\n      .status(HttpStatus.BAD_REQUEST)\n      .json(\n        constructHttpResponse(\n          HttpStatus.BAD_REQUEST,\n          formatErrors(exception.errors),\n          'Validation error'\n        )\n      )\n  }\n}\n\nfunction formatErrors(errors: ValidationError[]) {\n  const formattedErrors = {}\n\n  errors.forEach(\n    (e) =>\n      (formattedErrors[e.property] = Object.values(e.constraints).join(', '))\n  )\n\n  return formattedErrors\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Coordinator.html":{"url":"classes/Coordinator.html","title":"class - Coordinator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Coordinator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/entities/coordinator.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChildEntity } from 'typeorm'\nimport { User } from './user.entity'\nimport { USER_TYPES } from '../users.constants'\n\n@ChildEntity(USER_TYPES.COORDINATOR)\nexport class Coordinator extends User {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategorizedCriteriaDto.html":{"url":"classes/CreateCategorizedCriteriaDto.html","title":"class - CreateCategorizedCriteriaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategorizedCriteriaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categorized-criteria/dto/create-categorized-criterion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                categoryId\n                            \n                            \n                                    \n                                    \n                                criteriaId\n                            \n                            \n                                    \n                                    \n                                recopilationId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categorized-criteria/dto/create-categorized-criterion.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        criteriaId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categorized-criteria/dto/create-categorized-criterion.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        recopilationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categorized-criteria/dto/create-categorized-criterion.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsNotEmpty } from 'class-validator'\n\nexport class CreateCategorizedCriteriaDto {\n  @IsNumber()\n  @IsNotEmpty()\n  recopilationId: number\n\n  @IsNumber()\n  @IsNotEmpty()\n  criteriaId: number\n\n  @IsNumber()\n  @IsNotEmpty()\n  categoryId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                helpText\n                            \n                            \n                                    \n                                    \n                                indicatorIndex\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        helpText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(VALUES.helpTextMinAmount)@MaxLength(VALUES.helpTextMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/dto/create-category.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        indicatorIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/dto/create-category.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(VALUES.nameAliasMinAmount)@MaxLength(VALUES.categoryNameMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/dto/create-category.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  MaxLength,\n  MinLength\n} from 'class-validator'\nimport { VALUES } from 'shared/validations'\n\nexport class CreateCategoryDto {\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(VALUES.nameAliasMinAmount)\n  @MaxLength(VALUES.categoryNameMaxAmount)\n  name: string\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(VALUES.helpTextMinAmount)\n  @MaxLength(VALUES.helpTextMaxAmount)\n  helpText: string\n\n  @IsNumber()\n  @IsNotEmpty()\n  indicatorIndex: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCriteriaDto.html":{"url":"classes/CreateCriteriaDto.html","title":"class - CreateCriteriaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCriteriaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/criterion/dto/create-criteria.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                alias\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                helpText\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                indicatorIndex\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                requiresEvidence\n                            \n                            \n                                    \n                                    \n                                subIndex\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(VALUES.nameAliasMinAmount)@MaxLength(VALUES.criterionNameAliasMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/dto/create-criteria.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        helpText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(VALUES.helpTextMinAmount)@MaxLength(VALUES.helpTextMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/dto/create-criteria.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        indicatorIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/dto/create-criteria.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(255)@MinLength(VALUES.nameAliasMinAmount)@MaxLength(VALUES.criterionNameAliasMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/dto/create-criteria.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        requiresEvidence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/dto/create-criteria.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        subIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/dto/create-criteria.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNumber,\n  IsString,\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  MaxLength,\n  MinLength\n} from 'class-validator'\nimport { VALUES } from 'shared/validations'\n\nexport class CreateCriteriaDto {\n  @IsNumber()\n  @IsOptional()\n  indicatorIndex?: number\n\n  @IsNumber()\n  @IsNotEmpty()\n  subIndex: number\n\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @MinLength(VALUES.nameAliasMinAmount)\n  @MaxLength(VALUES.criterionNameAliasMaxAmount)\n  name: string\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(VALUES.nameAliasMinAmount)\n  @MaxLength(VALUES.criterionNameAliasMaxAmount)\n  alias: string\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(VALUES.helpTextMinAmount)\n  @MaxLength(VALUES.helpTextMaxAmount)\n  helpText: string\n\n  @IsBoolean()\n  @IsOptional()\n  requiresEvidence?: boolean\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDepartmentsPerRecopilationDto.html":{"url":"classes/CreateDepartmentsPerRecopilationDto.html","title":"class - CreateDepartmentsPerRecopilationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDepartmentsPerRecopilationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/departments-per-recopilations/dto/create-department-per-recopilation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                departmentsIds\n                            \n                            \n                                    \n                                    \n                                recopilationId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        departmentsIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber({}, {each: true})@ArrayNotEmpty({message: 'departmentsIds should not be an empty array'})@IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/departments-per-recopilations/dto/create-department-per-recopilation.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        recopilationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/departments-per-recopilations/dto/create-department-per-recopilation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayNotEmpty, IsArray, IsNotEmpty, IsNumber } from 'class-validator'\n\nexport class CreateDepartmentsPerRecopilationDto {\n  @IsNumber()\n  @IsNotEmpty()\n  recopilationId: number\n\n  @IsNumber({}, { each: true })\n  @ArrayNotEmpty({ message: 'departmentsIds should not be an empty array' })\n  @IsArray()\n  @IsNotEmpty()\n  departmentsIds: number[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEvidenceDto.html":{"url":"classes/CreateEvidenceDto.html","title":"class - CreateEvidenceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEvidenceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/dto/create-evidence.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                collectionId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                error\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                externalLink\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                fileLink\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        collectionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/dto/create-evidence.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(VALUES.descriptionMinAmount)@MaxLength(VALUES.descriptionMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/dto/create-evidence.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/dto/create-evidence.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        externalLink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MaxLength(VALUES.evidencesLinkMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/dto/create-evidence.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        fileLink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/dto/create-evidence.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EvidenceType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(EvidenceType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/dto/create-evidence.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsOptional,\n  IsNotEmpty,\n  IsEnum,\n  MaxLength,\n  MinLength,\n  IsNumberString\n} from 'class-validator'\nimport { EvidenceType } from '../evidences.constants'\nimport { VALUES } from 'shared/validations'\n\nexport class CreateEvidenceDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(VALUES.descriptionMinAmount)\n  @MaxLength(VALUES.descriptionMaxAmount)\n  description: string\n\n  @IsString()\n  @IsOptional()\n  error: string\n\n  @IsEnum(EvidenceType)\n  @IsNotEmpty()\n  type: EvidenceType\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(VALUES.evidencesLinkMaxAmount)\n  externalLink?: string\n\n  @IsOptional()\n  @IsString()\n  fileLink?: string\n\n  @IsNotEmpty()\n  @IsNumberString()\n  collectionId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateIndicatorDto.html":{"url":"classes/CreateIndicatorDto.html","title":"class - CreateIndicatorDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateIndicatorDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/indicators/dto/create-indicator.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                alias\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                helpText\n                            \n                            \n                                    \n                                    \n                                index\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(VALUES.nameAliasMinAmount)@MaxLength(VALUES.indicatorNameAliasMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/dto/create-indicator.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        helpText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(VALUES.helpTextMinAmount)@MaxLength(VALUES.helpTextMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/dto/create-indicator.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/dto/create-indicator.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(VALUES.nameAliasMinAmount)@MaxLength(VALUES.indicatorNameAliasMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/dto/create-indicator.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  MaxLength,\n  MinLength\n} from 'class-validator'\nimport { VALUES } from 'shared/validations'\n\nexport class CreateIndicatorDto {\n  @IsNumber()\n  @IsNotEmpty()\n  index: number\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(VALUES.nameAliasMinAmount)\n  @MaxLength(VALUES.indicatorNameAliasMaxAmount)\n  name: string\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(VALUES.nameAliasMinAmount)\n  @MaxLength(VALUES.indicatorNameAliasMaxAmount)\n  alias: string\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(VALUES.helpTextMinAmount)\n  @MaxLength(VALUES.helpTextMaxAmount)\n  helpText: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateIndicatorPerRecopilationDto.html":{"url":"classes/CreateIndicatorPerRecopilationDto.html","title":"class - CreateIndicatorPerRecopilationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateIndicatorPerRecopilationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/indicators-per-recopilations/dto/create-indicator-per-recopilation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                indicatorIndex\n                            \n                            \n                                    \n                                    \n                                recopilationId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        indicatorIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators-per-recopilations/dto/create-indicator-per-recopilation.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        recopilationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators-per-recopilations/dto/create-indicator-per-recopilation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber } from 'class-validator'\n\nexport class CreateIndicatorPerRecopilationDto {\n  @IsNotEmpty()\n  @IsNumber()\n  recopilationId: number\n\n  @IsNotEmpty()\n  @IsNumber()\n  indicatorIndex: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInformationCollectionDto.html":{"url":"classes/CreateInformationCollectionDto.html","title":"class - CreateInformationCollectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInformationCollectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/information-collections/dto/create-information-collection.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                categoryId\n                            \n                            \n                                    \n                                    \n                                departmentId\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                recopilationId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                summary\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/dto/create-information-collection.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        departmentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/dto/create-information-collection.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(100)@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/dto/create-information-collection.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        recopilationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/dto/create-information-collection.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        summary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MaxLength(280)@IsString()@IsNotEmpty()@MinLength(VALUES.nameAliasMinAmount)@MaxLength(VALUES.informationCollectionsSummary)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/dto/create-information-collection.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsNumber,\n  MaxLength,\n  MinLength\n} from 'class-validator'\nimport { VALUES } from 'shared/validations'\n\nexport class CreateInformationCollectionDto {\n  @IsNumber()\n  @IsNotEmpty()\n  recopilationId: number\n\n  @IsNumber()\n  @IsNotEmpty()\n  departmentId: number\n\n  @IsNumber()\n  @IsNotEmpty()\n  categoryId: number\n\n  @MaxLength(280)\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(VALUES.nameAliasMinAmount)\n  @MaxLength(VALUES.informationCollectionsSummary)\n  summary: string\n\n  @MaxLength(100)\n  @IsString()\n  @IsNotEmpty()\n  name: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/notifications/dto/create-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                data\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/notifications/dto/create-notification.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(NOTIFICATION_TYPES)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/notifications/dto/create-notification.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/notifications/dto/create-notification.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsNumber, IsObject } from 'class-validator'\nimport {\n  NOTIFICATION_TYPES,\n  NotificationType\n} from '../notifications.constants'\n\nexport class CreateNotificationDto {\n  @IsNotEmpty()\n  @IsObject()\n  data: object\n\n  @IsNotEmpty()\n  @IsEnum(NOTIFICATION_TYPES)\n  type: NotificationType\n\n  @IsNumber()\n  @IsNotEmpty()\n  userId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRecommendationDto.html":{"url":"classes/CreateRecommendationDto.html","title":"class - CreateRecommendationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRecommendationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recommendations/dto/create-recommendation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                categoryId\n                            \n                            \n                                    \n                                    \n                                departmentId\n                            \n                            \n                                    \n                                    \n                                recopilationId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recommendations/dto/create-recommendation.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        departmentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recommendations/dto/create-recommendation.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        recopilationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recommendations/dto/create-recommendation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber } from 'class-validator'\n\nexport class CreateRecommendationDto {\n  @IsNumber()\n  @IsNotEmpty()\n  recopilationId: number\n\n  @IsNumber()\n  @IsNotEmpty()\n  departmentId: number\n\n  @IsNumber()\n  @IsNotEmpty()\n  categoryId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRecopilationDto.html":{"url":"classes/CreateRecopilationDto.html","title":"class - CreateRecopilationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRecopilationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/dto/create-recopilation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                departmentEndDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                endDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                startDate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                validateDates\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        departmentEndDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()@ValidateIf(o => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/create-recopilation.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(VALUES.descriptionMinAmount)@MaxLength(VALUES.descriptionMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/create-recopilation.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()@ValidateIf(o => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/create-recopilation.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(VALUES.nameAliasMinAmount)@MaxLength(VALUES.recopilationsNameMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/create-recopilation.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/create-recopilation.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        validateDates\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateDates()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ValidateIf(o => )@ValidateIf(o => )\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/dto/create-recopilation.dto.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsDateString,\n  MaxLength,\n  ValidateIf,\n  MinLength\n} from 'class-validator'\nimport { isAfter, parseISO } from 'date-fns'\nimport { VALUES } from 'shared/validations'\n\nexport class CreateRecopilationDto {\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(VALUES.nameAliasMinAmount)\n  @MaxLength(VALUES.recopilationsNameMaxAmount)\n  name: string\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(VALUES.descriptionMinAmount)\n  @MaxLength(VALUES.descriptionMaxAmount)\n  description: string\n\n  @IsNotEmpty()\n  @IsDateString()\n  startDate: string // Nota: Usamos string aquí para IsDateString, y luego parseamos en la lógica de validación\n\n  @IsNotEmpty()\n  @IsDateString()\n  @ValidateIf((o: CreateRecopilationDto) =>\n    isAfter(parseISO(o.departmentEndDate), new Date())\n  ) // La fecha debe ser posterior a la actual\n  departmentEndDate: string\n\n  @IsNotEmpty()\n  @IsDateString()\n  @ValidateIf((o: CreateRecopilationDto) =>\n    isAfter(parseISO(o.endDate), new Date())\n  ) // La fecha debe ser posterior a la actual\n  endDate: string\n\n  // Custom validation logic\n  @ValidateIf((o: CreateRecopilationDto) =>\n    isAfter(parseISO(o.departmentEndDate), parseISO(o.startDate))\n  )\n  @ValidateIf((o: CreateRecopilationDto) =>\n    isAfter(parseISO(o.endDate), parseISO(o.startDate))\n  )\n  validateDates() {\n    if (!isAfter(parseISO(this.departmentEndDate), parseISO(this.startDate))) {\n      throw new Error('departmentEndDate must be after startDate')\n    }\n    if (!isAfter(parseISO(this.endDate), parseISO(this.startDate))) {\n      throw new Error('endDate must be after startDate')\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                fullName\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MinLength(VALUES.nameAliasMinAmount)@MaxLength(VALUES.departmentEmailAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(VALUES.departmentFullNameMinAmount)@MaxLength(VALUES.departmentFullNameMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MaxLength(VALUES.departmentPasswordAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(USER_TYPES)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/dto/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsEnum,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MaxLength,\n  MinLength\n} from 'class-validator'\nimport { USER_TYPES, UserType } from '../users.constants'\nimport { VALUES } from 'shared/validations'\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(VALUES.departmentFullNameMinAmount)\n  @MaxLength(VALUES.departmentFullNameMaxAmount)\n  fullName: string\n\n  @IsEmail()\n  @IsNotEmpty()\n  @MinLength(VALUES.nameAliasMinAmount)\n  @MaxLength(VALUES.departmentEmailAmount)\n  email: string\n\n  @IsString()\n  @IsOptional()\n  @MaxLength(VALUES.departmentPasswordAmount)\n  password: string\n\n  @IsEnum(USER_TYPES)\n  @IsNotEmpty()\n  type: UserType\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Criteria.html":{"url":"entities/Criteria.html","title":"entity - Criteria","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Criteria\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/criterion/entities/criteria.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                alias\n                            \n                            \n                                    \n                                categorizedCriterion\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                helpText\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                indicator\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                requiresEvidence\n                            \n                            \n                                    \n                                subIndex\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/entities/criteria.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categorizedCriterion\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CategorizedCriteria[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, categorizedCriteria => categorizedCriteria.criteria)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/entities/criteria.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/entities/criteria.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        helpText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/entities/criteria.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/entities/criteria.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        indicator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Indicator\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, indicator => indicator.criterion, {onUpdate: 'CASCADE', onDelete: 'CASCADE', cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/entities/criteria.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/entities/criteria.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requiresEvidence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/entities/criteria.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        subIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/entities/criteria.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  Index\n} from 'typeorm'\nimport { Indicator } from 'src/core/indicators/entities/indicator.entity'\nimport { CategorizedCriteria } from 'src/core/categorized-criteria/entities/categorized-criterion.entity'\n\n@Entity('criterion')\n@Index(['subIndex', 'indicator'], {\n  unique: true,\n  where: '\"deletedAt\" IS NULL'\n})\n@Index(['name', 'indicator'], {\n  unique: true,\n  where: '\"deletedAt\" IS NULL'\n})\nexport class Criteria {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column()\n  subIndex: number\n\n  @Column({ nullable: false })\n  name: string\n\n  @Column({ nullable: false })\n  alias: string\n\n  @Column({ type: 'text', nullable: false })\n  helpText: string\n\n  @Column({ type: 'boolean', default: false })\n  requiresEvidence: boolean\n\n  @ManyToOne(() => Indicator, (indicator) => indicator.criterion, {\n    onUpdate: 'CASCADE',\n    onDelete: 'CASCADE',\n    cascade: ['soft-remove']\n  })\n  indicator: Indicator\n\n  @OneToMany(\n    () => CategorizedCriteria,\n    (categorizedCriteria) => categorizedCriteria.criteria\n  )\n  categorizedCriterion: CategorizedCriteria[]\n\n  @DeleteDateColumn()\n  deletedAt: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CriteriaToRelate.html":{"url":"classes/CriteriaToRelate.html","title":"class - CriteriaToRelate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CriteriaToRelate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                categoryId\n                            \n                            \n                                    \n                                    \n                                criteriaId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        categoryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        criteriaId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  ValidateNested\n} from 'class-validator'\nimport { Type } from 'class-transformer'\n\nexport class RelateIndicatorsToRecopilationDto {\n  @IsNumber()\n  @IsNotEmpty()\n  recopilationId: number\n\n  @ValidateNested({ each: true })\n  @ArrayNotEmpty()\n  @IsArray()\n  @IsNotEmpty()\n  @Type(() => IndicatorToRelate)\n  indicators: IndicatorToRelate[]\n}\n\nexport class IndicatorToRelate {\n  @IsNumber()\n  @IsNotEmpty()\n  indicatorId: number\n\n  @ValidateNested({ each: true })\n  @ArrayNotEmpty()\n  @IsArray()\n  @IsNotEmpty()\n  @Type(() => CriteriaToRelate)\n  criterion: CriteriaToRelate[]\n}\n\nexport class CriteriaToRelate {\n  @IsNumber()\n  @IsNotEmpty()\n  criteriaId: number\n\n  @IsNumber()\n  @IsNotEmpty()\n  categoryId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CriterionController.html":{"url":"controllers/CriterionController.html","title":"controller - CriterionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CriterionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/criterion/criterion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                criteria\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createCriterion\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteCriterion\n                            \n                            \n                                    \n                                    Async\n                                getAllCriteria\n                            \n                            \n                                    \n                                    Async\n                                getCriterionByIndicator\n                            \n                            \n                                    \n                                    Async\n                                getCriterionByRecopilation\n                            \n                            \n                                    \n                                    Async\n                                getOneCriterion\n                            \n                            \n                                    \n                                    Async\n                                updateCriterion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createCriterion\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCriterion(createCriterionDto: CreateCriteriaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/core/criterion/criterion.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCriterionDto\n                                            \n                                                            CreateCriteriaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteCriterion\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCriterion(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/core/criterion/criterion.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllCriteria\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllCriteria(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/criterion/criterion.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getCriterionByIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCriterionByIndicator(indicatorIndex: string, undefined: OrderByParamDto, undefined: OrderTypeParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/indicator/:indicatorIndex')\n                \n            \n\n                    \n                        \n                            Defined in src/core/criterion/criterion.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                indicatorIndex\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getCriterionByRecopilation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCriterionByRecopilation(recopilationId: string, undefined: OrderByParamDto, undefined: OrderTypeParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/recopilation/:recopilationId')\n                \n            \n\n                    \n                        \n                            Defined in src/core/criterion/criterion.controller.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOneCriterion\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOneCriterion(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/criterion/criterion.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateCriterion\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCriterion(id: string, updateCriteriaDto: UpdateCriteriaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/criterion/criterion.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCriteriaDto\n                                            \n                                                            UpdateCriteriaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  Query,\n  HttpStatus,\n  HttpCode,\n  Patch\n} from '@nestjs/common'\nimport { CriterionService } from './criterion.service'\nimport { CreateCriteriaDto } from './dto/create-criteria.dto'\nimport { UpdateCriteriaDto } from './dto/update-criteria.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-criteria-by-param.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Criteria')\n@Controller('criteria')\n@Roles(Role.Coordinator, Role.Admin)\nexport class CriterionController {\n  constructor(private readonly criterionService: CriterionService) {}\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async createCriterion(@Body() createCriterionDto: CreateCriteriaDto) {\n    try {\n      const criterion =\n        await this.criterionService.createCriterion(createCriterionDto)\n      return criterion\n    } catch (e) {\n      console.log(e)\n      throw e\n    }\n  }\n\n  @Get()\n  async getAllCriteria(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { criteria, count } = await this.criterionService.getAllCriteria({\n      page,\n      itemsPerPage,\n      orderBy,\n      orderType,\n      filters\n    })\n\n    const paginatedItems = constructPaginatedItemsDto(\n      criteria,\n      count,\n      page,\n      itemsPerPage\n    )\n    return paginatedItems\n  }\n\n  @Get(':id')\n  async getOneCriterion(@Param('id') id: string) {\n    const criterion = await this.criterionService.getOneCriterion(Number(id))\n    return criterion\n  }\n\n  @Patch(':id')\n  async updateCriterion(\n    @Param('id') id: string,\n    @Body() updateCriteriaDto: UpdateCriteriaDto\n  ) {\n    const criterion = await this.criterionService.updateCriterion(\n      Number(id),\n      updateCriteriaDto\n    )\n    return criterion\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async deleteCriterion(@Param('id') id: string) {\n    await this.criterionService.deleteCriterion(Number(id))\n  }\n\n  @Get('/indicator/:indicatorIndex')\n  async getCriterionByIndicator(\n    @Param('indicatorIndex') indicatorIndex: string,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto\n  ) {\n    const criterion = await this.criterionService.criterionByIndicator(\n      Number(indicatorIndex),\n      { orderBy, orderType }\n    )\n    return criterion\n  }\n\n  @Get('/recopilation/:recopilationId')\n  async getCriterionByRecopilation(\n    @Param('recopilationId') recopilationId: string,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto\n  ) {\n    const criterion = await this.criterionService.criterionByRecopilation(\n      Number(recopilationId),\n      { orderBy, orderType }\n    )\n    return criterion\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CriterionModule.html":{"url":"modules/CriterionModule.html","title":"module - CriterionModule","body":"\n                   \n\n\n\n\n    Modules\n    CriterionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CriterionModule\n\n\n\ncluster_CriterionModule_providers\n\n\n\n\nCriterionService\n\nCriterionService\n\n\n\nCriterionModule\n\nCriterionModule\n\nCriterionModule -->\n\nCriterionService->CriterionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/criterion/criterion.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CriterionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CriterionController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { CriterionService } from './criterion.service'\nimport { CriterionController } from './criterion.controller'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { Indicator } from '../indicators/entities/indicator.entity'\nimport { Criteria } from './entities/criteria.entity'\nimport { CategorizedCriteria } from '../categorized-criteria/entities/categorized-criterion.entity'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Criteria, Indicator, CategorizedCriteria])\n  ],\n  controllers: [CriterionController],\n  providers: [CriterionService],\n  exports: [TypeOrmModule]\n})\nexport class CriterionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CriterionService.html":{"url":"injectables/CriterionService.html","title":"injectable - CriterionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CriterionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/criterion/criterion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCriterion\n                            \n                            \n                                    Async\n                                criterionByIndicator\n                            \n                            \n                                    Async\n                                criterionByRecopilation\n                            \n                            \n                                    Async\n                                deleteCriterion\n                            \n                            \n                                    Async\n                                getAllCriteria\n                            \n                            \n                                    Async\n                                getOneCriterion\n                            \n                            \n                                    Async\n                                updateCriterion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(criterionRepository: Repository, indicatorRepository: Repository, categorizedCriteriaRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/criterion/criterion.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        criterionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        indicatorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categorizedCriteriaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCriterion\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCriterion(createCriterionDto: CreateCriteriaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/criterion/criterion.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCriterionDto\n                                            \n                                                            CreateCriteriaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        criterionByIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    criterionByIndicator(indicatorId: number, undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/criterion/criterion.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                indicatorId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        criterionByRecopilation\n                        \n                    \n                \n            \n            \n                \n                        \n                    criterionByRecopilation(recopilationId: number, undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/criterion/criterion.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteCriterion\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCriterion(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/criterion/criterion.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllCriteria\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllCriteria(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/criterion/criterion.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOneCriterion\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOneCriterion(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/criterion/criterion.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateCriterion\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCriterion(id: number, updateCriteriaDto: UpdateCriteriaDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/criterion/criterion.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCriteriaDto\n                                            \n                                                            UpdateCriteriaDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { In, Repository } from 'typeorm'\nimport { CreateCriteriaDto } from './dto/create-criteria.dto'\nimport { UpdateCriteriaDto } from './dto/update-criteria.dto'\nimport { Criteria } from './entities/criteria.entity'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-criteria-by-param.dto'\nimport { Indicator } from '../indicators/entities/indicator.entity'\nimport { CategorizedCriteria } from '../categorized-criteria/entities/categorized-criterion.entity'\n\n@Injectable()\nexport class CriterionService {\n  constructor(\n    @InjectRepository(Criteria)\n    private readonly criterionRepository: Repository,\n    @InjectRepository(Indicator)\n    private readonly indicatorRepository: Repository,\n    @InjectRepository(CategorizedCriteria)\n    private readonly categorizedCriteriaRepository: Repository\n  ) {}\n\n  async createCriterion(\n    createCriterionDto: CreateCriteriaDto\n  ): Promise {\n    const indicator = await this.indicatorRepository.findOneByOrFail({\n      index: createCriterionDto.indicatorIndex\n    })\n\n    const criterion = this.criterionRepository.create({\n      ...createCriterionDto,\n      indicator\n    })\n\n    return this.criterionRepository.save(criterion)\n  }\n\n  async getAllCriteria({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [criteria, count] = await this.criterionRepository.findAndCount({\n      take: itemsPerPage,\n      skip: (page - 1) * itemsPerPage,\n      order: { [orderBy]: orderType },\n      where: parseFiltersToTypeOrm(filters),\n      relations: ['indicator']\n    })\n\n    return { criteria, count }\n  }\n\n  async getOneCriterion(id: number): Promise {\n    const criterion = await this.criterionRepository.findOneOrFail({\n      where: { id },\n      relations: ['indicator']\n    })\n    return criterion\n  }\n\n  async updateCriterion(\n    id: number,\n    updateCriteriaDto: UpdateCriteriaDto\n  ): Promise {\n    const indicator = await this.indicatorRepository.findOneByOrFail({\n      index: updateCriteriaDto.indicatorIndex\n    })\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { indicatorIndex: _, ...dtoWithoutIndicatorIndex } = updateCriteriaDto\n\n    const updatedCriteria = this.criterionRepository.create({\n      ...dtoWithoutIndicatorIndex,\n      indicator\n    })\n\n    await this.criterionRepository.update({ id }, updatedCriteria)\n\n    return await this.criterionRepository.findOneByOrFail({ id })\n  }\n\n  async deleteCriterion(id: number): Promise {\n    await this.criterionRepository.findOneByOrFail({ id })\n\n    await this.criterionRepository.softDelete({\n      id\n    })\n\n    return\n  }\n\n  async criterionByIndicator(\n    indicatorId: number,\n    { orderBy, orderType }: OrderByParamDto & OrderTypeParamDto\n  ): Promise {\n    const indicator = await this.indicatorRepository.findOneByOrFail({\n      index: indicatorId\n    })\n\n    const criteria = await this.criterionRepository.find({\n      where: { indicator: indicator },\n      order: { [orderBy]: orderType }\n    })\n\n    return criteria\n  }\n\n  async criterionByRecopilation(\n    recopilationId: number,\n    { orderBy, orderType }: OrderByParamDto & OrderTypeParamDto\n  ): Promise {\n    const categorizedCriterias = await this.categorizedCriteriaRepository.find({\n      where: { recopilation: { id: recopilationId } },\n      relations: ['criteria']\n    })\n\n    const criteria = await this.criterionRepository.find({\n      where: {\n        id: In(categorizedCriterias.map((c) => c.criteria.id))\n      },\n      order: { [orderBy]: orderType }\n    })\n\n    return criteria\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Department.html":{"url":"classes/Department.html","title":"class - Department","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Department\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/entities/department.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                informationCollections\n                            \n                            \n                                    \n                                recopilationsPerDepartment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        informationCollections\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InformationCollection[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, informationCollection => informationCollection.department)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/entities/department.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recopilationsPerDepartment\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DepartmentPerRecopilation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, departmentPerRecopilation => departmentPerRecopilation.department)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/entities/department.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChildEntity, OneToMany } from 'typeorm'\nimport { User } from './user.entity'\nimport { USER_TYPES } from '../users.constants'\nimport { DepartmentPerRecopilation } from 'src/core/departments-per-recopilations/entities/departments-per-recopilation.entity'\nimport { InformationCollection } from 'src/core/information-collections/entities/information-collection.entity'\n\n@ChildEntity(USER_TYPES.DEPARTMENT)\nexport class Department extends User {\n  @OneToMany(\n    () => InformationCollection,\n    (informationCollection) => informationCollection.department\n  )\n  informationCollections: InformationCollection[]\n\n  @OneToMany(\n    () => DepartmentPerRecopilation,\n    (departmentPerRecopilation) => departmentPerRecopilation.department\n  )\n  recopilationsPerDepartment: DepartmentPerRecopilation[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DepartmentPerRecopilation.html":{"url":"entities/DepartmentPerRecopilation.html","title":"entity - DepartmentPerRecopilation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DepartmentPerRecopilation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/departments-per-recopilations/entities/departments-per-recopilation.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                department\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                recommendations\n                            \n                            \n                                    \n                                recopilation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        department\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Department\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, department => department.recopilationsPerDepartment)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/departments-per-recopilations/entities/departments-per-recopilation.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/departments-per-recopilations/entities/departments-per-recopilation.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recommendations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Recommendation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, recommendation => recommendation.departmentPerRecopilation)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/departments-per-recopilations/entities/departments-per-recopilation.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recopilation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Recopilation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, recopilation => recopilation.departmentsPerRecopilation, {onDelete: 'CASCADE', onUpdate: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/departments-per-recopilations/entities/departments-per-recopilation.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  Unique,\n  OneToMany\n} from 'typeorm'\nimport { Recopilation } from 'src/core/recopilations/entities/recopilation.entity'\nimport { Department } from 'src/core/users/entities/department.entity'\nimport { Recommendation } from 'src/core/recommendations/entities/recommendation.entity'\n\n@Entity('departments_per_recopilations')\n@Unique(['recopilation', 'department'])\nexport class DepartmentPerRecopilation {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @OneToMany(\n    () => Recommendation,\n    (recommendation) => recommendation.departmentPerRecopilation\n  )\n  recommendations: Recommendation[]\n\n  @ManyToOne(\n    () => Recopilation,\n    (recopilation) => recopilation.departmentsPerRecopilation,\n    { onDelete: 'CASCADE', onUpdate: 'CASCADE' }\n  )\n  recopilation: Recopilation\n\n  @ManyToOne(\n    () => Department,\n    (department) => department.recopilationsPerDepartment\n  )\n  department: Department\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DepartmentToBeRecommended.html":{"url":"classes/DepartmentToBeRecommended.html","title":"class - DepartmentToBeRecommended","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DepartmentToBeRecommended\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/dto/recommend-categories.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                categories\n                            \n                            \n                                    \n                                    \n                                departmentId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryToRecommend[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested({each: true})@ArrayNotEmpty()@IsArray()@IsNotEmpty()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/recommend-categories.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        departmentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/recommend-categories.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  ValidateNested\n} from 'class-validator'\nimport { Type } from 'class-transformer'\n\nexport class RecommendCategoriesDto {\n  @IsNumber()\n  @IsNotEmpty()\n  recopilationId: number\n\n  @ValidateNested({ each: true })\n  @IsArray()\n  @Type(() => DepartmentToBeRecommended)\n  departments: DepartmentToBeRecommended[]\n}\n\nexport class DepartmentToBeRecommended {\n  @IsNumber()\n  @IsNotEmpty()\n  departmentId: number\n\n  @ValidateNested({ each: true })\n  @ArrayNotEmpty()\n  @IsArray()\n  @IsNotEmpty()\n  @Type(() => CategoryToRecommend)\n  categories: CategoryToRecommend[]\n}\n\nexport class CategoryToRecommend {\n  @IsNumber()\n  @IsNotEmpty()\n  categoryId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DepartmentsController.html":{"url":"controllers/DepartmentsController.html","title":"controller - DepartmentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DepartmentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/departments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                departments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getDepartmentsByRecopilationId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/users/departments.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/users/departments.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getDepartmentsByRecopilationId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDepartmentsByRecopilationId(recopilationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/recopilation/:recopilationId')\n                \n            \n\n                    \n                        \n                            Defined in src/core/users/departments.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { DepartmentsService } from './departments.service'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { OrderByParamDto } from './dto/order-users-by-param.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\n\n@ApiTags('Departments')\n@Controller('departments')\nexport class DepartmentsController {\n  constructor(private readonly departmentsService: DepartmentsService) {}\n\n  @Get()\n  async findAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { departments, count } = await this.departmentsService.findAll({\n      page,\n      itemsPerPage,\n      orderBy,\n      orderType,\n      filters\n    })\n\n    return constructPaginatedItemsDto(departments, count, page, itemsPerPage)\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.departmentsService.findOne(+id)\n  }\n\n  @Get('/recopilation/:recopilationId')\n  async getDepartmentsByRecopilationId(\n    @Param('recopilationId') recopilationId: string\n  ) {\n    return this.departmentsService.departmentsByRecopilation(+recopilationId)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DepartmentsPerRecopilationsController.html":{"url":"controllers/DepartmentsPerRecopilationsController.html","title":"controller - DepartmentsPerRecopilationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DepartmentsPerRecopilationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/departments-per-recopilations/departments-per-recopilations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                departments-per-recopilations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDepartmentsPerRecopilationDto: CreateDepartmentsPerRecopilationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/core/departments-per-recopilations/departments-per-recopilations.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDepartmentsPerRecopilationDto\n                                            \n                                                            CreateDepartmentsPerRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/departments-per-recopilations/departments-per-recopilations.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/departments-per-recopilations/departments-per-recopilations.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/departments-per-recopilations/departments-per-recopilations.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateDepartmentsPerRecopilationDto: UpdateDepartmentPerRecopilationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/departments-per-recopilations/departments-per-recopilations.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDepartmentsPerRecopilationDto\n                                            \n                                                            UpdateDepartmentPerRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Param,\n  Delete,\n  Query,\n  Patch,\n  Put\n} from '@nestjs/common'\nimport { DepartmentsPerRecopilationsService } from './departments-per-recopilations.service'\nimport { CreateDepartmentsPerRecopilationDto } from './dto/create-department-per-recopilation.dto'\nimport { UpdateDepartmentPerRecopilationDto } from './dto/update-department-per-recopilation.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-departments-per-recopilations-by-param.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Departments Per Recopilations')\n@Controller('departments-per-recopilations')\n@Roles(Role.Coordinator, Role.Admin)\nexport class DepartmentsPerRecopilationsController {\n  constructor(\n    private readonly departmentsPerRecopilationsService: DepartmentsPerRecopilationsService\n  ) {}\n\n  @Get()\n  async findAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { departmentsPerRecopilations, count } =\n      await this.departmentsPerRecopilationsService.findAll({\n        page,\n        itemsPerPage,\n        orderBy,\n        orderType,\n        filters\n      })\n\n    return constructPaginatedItemsDto(\n      departmentsPerRecopilations,\n      count,\n      page,\n      itemsPerPage\n    )\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number) {\n    return this.departmentsPerRecopilationsService.findOne(id)\n  }\n\n  @Put()\n  async create(\n    @Body()\n    createDepartmentsPerRecopilationDto: CreateDepartmentsPerRecopilationDto\n  ) {\n    return this.departmentsPerRecopilationsService.set(\n      createDepartmentsPerRecopilationDto\n    )\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: number,\n    @Body()\n    updateDepartmentsPerRecopilationDto: UpdateDepartmentPerRecopilationDto\n  ) {\n    return this.departmentsPerRecopilationsService.update(\n      id,\n      updateDepartmentsPerRecopilationDto\n    )\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: number) {\n    await this.departmentsPerRecopilationsService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DepartmentsPerRecopilationsModule.html":{"url":"modules/DepartmentsPerRecopilationsModule.html","title":"module - DepartmentsPerRecopilationsModule","body":"\n                   \n\n\n\n\n    Modules\n    DepartmentsPerRecopilationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DepartmentsPerRecopilationsModule\n\n\n\ncluster_DepartmentsPerRecopilationsModule_providers\n\n\n\n\nDepartmentsPerRecopilationsService\n\nDepartmentsPerRecopilationsService\n\n\n\nDepartmentsPerRecopilationsModule\n\nDepartmentsPerRecopilationsModule\n\nDepartmentsPerRecopilationsModule -->\n\nDepartmentsPerRecopilationsService->DepartmentsPerRecopilationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/departments-per-recopilations/departments-per-recopilations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DepartmentsPerRecopilationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DepartmentsPerRecopilationsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { DepartmentsPerRecopilationsService } from './departments-per-recopilations.service'\nimport { DepartmentsPerRecopilationsController } from './departments-per-recopilations.controller'\nimport { Department } from '../users/entities/department.entity'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { DepartmentPerRecopilation } from './entities/departments-per-recopilation.entity'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DepartmentPerRecopilation,\n      Department,\n      Recopilation\n    ])\n  ],\n  controllers: [DepartmentsPerRecopilationsController],\n  providers: [DepartmentsPerRecopilationsService]\n})\nexport class DepartmentsPerRecopilationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DepartmentsPerRecopilationsService.html":{"url":"injectables/DepartmentsPerRecopilationsService.html","title":"injectable - DepartmentsPerRecopilationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DepartmentsPerRecopilationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/departments-per-recopilations/departments-per-recopilations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                set\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(departmentsPerRecopilationRepository: Repository, recopilationRepository: Repository, departmentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/departments-per-recopilations/departments-per-recopilations.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        departmentsPerRecopilationRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recopilationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        departmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/departments-per-recopilations/departments-per-recopilations.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/departments-per-recopilations/departments-per-recopilations.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/departments-per-recopilations/departments-per-recopilations.service.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(createDepartmentsPerRecopilationDto: CreateDepartmentsPerRecopilationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/departments-per-recopilations/departments-per-recopilations.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDepartmentsPerRecopilationDto\n                                            \n                                                            CreateDepartmentsPerRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateDepartmentsPerRecopilationDto: UpdateDepartmentPerRecopilationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/departments-per-recopilations/departments-per-recopilations.service.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDepartmentsPerRecopilationDto\n                                            \n                                                            UpdateDepartmentPerRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { EntityNotFoundError, In, Not, Repository } from 'typeorm'\nimport { DepartmentPerRecopilation } from './entities/departments-per-recopilation.entity'\nimport { CreateDepartmentsPerRecopilationDto } from './dto/create-department-per-recopilation.dto'\nimport { UpdateDepartmentPerRecopilationDto } from './dto/update-department-per-recopilation.dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { Recopilation } from 'src/core/recopilations/entities/recopilation.entity'\nimport { Department } from '../users/entities/department.entity'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-departments-per-recopilations-by-param.dto'\n\n@Injectable()\nexport class DepartmentsPerRecopilationsService {\n  constructor(\n    @InjectRepository(DepartmentPerRecopilation)\n    private readonly departmentsPerRecopilationRepository: Repository,\n    @InjectRepository(Recopilation)\n    private readonly recopilationRepository: Repository,\n    @InjectRepository(Department)\n    private readonly departmentRepository: Repository\n  ) {}\n\n  async findAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [departmentsPerRecopilations, count] =\n      await this.departmentsPerRecopilationRepository.findAndCount({\n        take: Number(itemsPerPage),\n        skip: (Number(page) - 1) * Number(itemsPerPage),\n        relations: ['recopilation', 'department'],\n        order: { [orderBy]: orderType },\n        where: parseFiltersToTypeOrm(filters)\n      })\n\n    return { departmentsPerRecopilations, count }\n  }\n\n  async findOne(id: number): Promise {\n    return this.departmentsPerRecopilationRepository.findOneOrFail({\n      where: { id },\n      relations: ['recopilation', 'department']\n    })\n  }\n\n  async set(\n    createDepartmentsPerRecopilationDto: CreateDepartmentsPerRecopilationDto\n  ): Promise {\n    const { recopilationId, departmentsIds } =\n      createDepartmentsPerRecopilationDto\n\n    const recopilation = await this.recopilationRepository.findOneByOrFail({\n      id: recopilationId\n    })\n    const departments = await this.departmentRepository.findBy({\n      id: In(departmentsIds)\n    })\n\n    if (departments.length !== departmentsIds.length) {\n      throw new EntityNotFoundError(Department, { id: In(departmentsIds) })\n    }\n\n    await this.departmentsPerRecopilationRepository.delete({\n      recopilation: { id: recopilationId },\n      department: { id: Not(In(departmentsIds)) }\n    })\n\n    const alreadyInsertedDepartments =\n      await this.departmentsPerRecopilationRepository.find({\n        where: { recopilation },\n        relations: { department: true }\n      })\n\n    const departmentsToInsert = departments.filter(\n      (d) =>\n        !alreadyInsertedDepartments.some((aid) => aid.department.id === d.id)\n    )\n\n    return await this.departmentsPerRecopilationRepository.save(\n      departmentsToInsert.map((d) =>\n        this.departmentsPerRecopilationRepository.create({\n          recopilation,\n          department: d\n        })\n      )\n    )\n  }\n\n  async update(\n    id: number,\n    updateDepartmentsPerRecopilationDto: UpdateDepartmentPerRecopilationDto\n  ): Promise {\n    const departmentsPerRecopilation =\n      await this.departmentsPerRecopilationRepository.findOneOrFail({\n        where: { id },\n        relations: ['recopilation', 'department']\n      })\n\n    const { recopilationId, departmentsIds: departmentId } =\n      updateDepartmentsPerRecopilationDto\n\n    const recopilation = await this.recopilationRepository.findOneByOrFail({\n      id: recopilationId\n    })\n    departmentsPerRecopilation.recopilation = recopilation\n\n    const department = await this.departmentRepository.findOneByOrFail({\n      id: departmentId\n    })\n    departmentsPerRecopilation.department = department\n\n    await this.departmentsPerRecopilationRepository.save(\n      departmentsPerRecopilation\n    )\n\n    return this.departmentsPerRecopilationRepository.findOneOrFail({\n      where: { id },\n      relations: ['recopilation', 'department']\n    })\n  }\n\n  async remove(id: number): Promise {\n    const departmentsPerRecopilation =\n      await this.departmentsPerRecopilationRepository.findOneOrFail({\n        where: { id },\n        relations: ['recopilation', 'department']\n      })\n    await this.departmentsPerRecopilationRepository.remove(\n      departmentsPerRecopilation\n    )\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DepartmentsService.html":{"url":"injectables/DepartmentsService.html","title":"injectable - DepartmentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DepartmentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/departments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                departmentsByRecopilation\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(departmentsRepository: Repository, departmentsPerRecopilationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/users/departments.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        departmentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        departmentsPerRecopilationRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        departmentsByRecopilation\n                        \n                    \n                \n            \n            \n                \n                        \n                    departmentsByRecopilation(recopilationId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/users/departments.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/users/departments.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/users/departments.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { DepartmentPerRecopilation } from '../departments-per-recopilations/entities/departments-per-recopilation.entity'\nimport { Repository } from 'typeorm'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { OrderByParamDto } from './dto/order-users-by-param.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { Department } from './entities/department.entity'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\n\n@Injectable()\nexport class DepartmentsService {\n  constructor(\n    @InjectRepository(Department)\n    private readonly departmentsRepository: Repository,\n    @InjectRepository(DepartmentPerRecopilation)\n    private readonly departmentsPerRecopilationRepository: Repository\n  ) {}\n\n  async findAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [departments, count] = await this.departmentsRepository.findAndCount({\n      take: itemsPerPage,\n      skip: (page - 1) * itemsPerPage,\n      order: { [orderBy]: orderType },\n      where: parseFiltersToTypeOrm(filters),\n      select: ['id', 'fullName', 'email', 'type']\n    })\n\n    return { departments, count }\n  }\n\n  async findOne(id: number) {\n    const department = await this.departmentsRepository.findOneOrFail({\n      where: { id },\n      select: ['id', 'fullName', 'email', 'type']\n    })\n\n    return department\n  }\n\n  async departmentsByRecopilation(recopilationId: number) {\n    const departmentsPerRecopilation =\n      await this.departmentsPerRecopilationRepository.find({\n        where: { recopilation: { id: recopilationId } },\n        relations: ['department']\n      })\n\n    return departmentsPerRecopilation.map((dpr) => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: _, ...departmentWithoutPassword } = dpr.department\n      return departmentWithoutPassword\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Document.html":{"url":"classes/Document.html","title":"class - Document","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Document\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/entities/document.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                fileLink\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileLink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/entities/document.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChildEntity, Column } from 'typeorm'\nimport { Evidence } from './evidence.entity'\nimport { EvidenceType } from '../evidences.constants'\n\n@ChildEntity(EvidenceType.DOCUMENT)\nexport class Document extends Evidence {\n  @Column({ type: 'text' })\n  fileLink: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentsController.html":{"url":"controllers/DocumentsController.html","title":"controller - DocumentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/document.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                documents\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/document.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/document.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { DocumentsService } from './document.service'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { OrderByParamDto } from './dto/order-evidences-by-param.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\n\n@ApiTags('Documents')\n@Controller('documents')\nexport class DocumentsController {\n  constructor(private readonly documentsService: DocumentsService) {}\n\n  @Get()\n  async findAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { documents, count } = await this.documentsService.findAll({\n      page,\n      itemsPerPage,\n      orderBy,\n      orderType,\n      filters\n    })\n\n    return constructPaginatedItemsDto(documents, count, page, itemsPerPage)\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.documentsService.findOne(+id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DocumentsService.html":{"url":"injectables/DocumentsService.html","title":"injectable - DocumentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DocumentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/document.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(documentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/evidences/document.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        documentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/document.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/document.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { OrderByParamDto } from './dto/order-evidences-by-param.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { Document } from './entities/document.entity'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\n\n@Injectable()\nexport class DocumentsService {\n  constructor(\n    @InjectRepository(Document)\n    private readonly documentsRepository: Repository\n  ) {}\n\n  async findAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [documents, count] = await this.documentsRepository.findAndCount({\n      relations: ['collection'],\n      take: itemsPerPage,\n      skip: (page - 1) * itemsPerPage,\n      order: { [orderBy]: orderType },\n      where: parseFiltersToTypeOrm(filters)\n    })\n\n    return { documents, count }\n  }\n\n  async findOne(id: number) {\n    const document = await this.documentsRepository.findOneOrFail({\n      where: { id },\n      relations: ['collection']\n    })\n\n    return document\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Evidence.html":{"url":"entities/Evidence.html","title":"entity - Evidence","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Evidence\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/entities/evidence.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                collection\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                error\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InformationCollection\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, collection => collection.evidences, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/entities/evidence.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/entities/evidence.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/entities/evidence.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/entities/evidence.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/entities/evidence.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EvidenceType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: EvidenceType, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/entities/evidence.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  CreateDateColumn,\n  TableInheritance\n} from 'typeorm'\nimport { InformationCollection } from 'src/core/information-collections/entities/information-collection.entity'\nimport { EvidenceType } from '../evidences.constants'\n\n@Entity('evidences')\n@TableInheritance({\n  column: { type: 'enum', enum: EvidenceType, name: 'type' }\n})\nexport abstract class Evidence {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    nullable: false\n  })\n  createdAt: Date\n\n  @Column({ type: 'text', nullable: false })\n  description: string\n\n  @Column({ type: 'text', nullable: true })\n  error: string\n\n  @Column({\n    type: 'enum',\n    enum: EvidenceType,\n    nullable: false\n  })\n  type: EvidenceType\n\n  @ManyToOne(\n    () => InformationCollection,\n    (collection) => collection.evidences,\n    { onDelete: 'CASCADE' }\n  )\n  collection: InformationCollection\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EvidencesController.html":{"url":"controllers/EvidencesController.html","title":"controller - EvidencesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EvidencesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/evidences.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                evidences\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(fileLink: Express.Multer.File, createEvidenceDto: CreateEvidenceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/evidences.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileLink\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createEvidenceDto\n                                            \n                                                            CreateEvidenceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/evidences.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/evidences.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/evidences.controller.ts:178\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateEvidenceDto: UpdateEvidenceDto, fileLink: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/evidences.controller.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateEvidenceDto\n                                            \n                                                            UpdateEvidenceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                fileLink\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  HttpStatus,\n  HttpCode,\n  Query,\n  Patch,\n  UseInterceptors,\n  UploadedFile,\n  ParseFilePipeBuilder\n} from '@nestjs/common'\nimport { EvidencesService } from './evidences.service'\nimport { CreateEvidenceDto } from './dto/create-evidence.dto'\nimport { UpdateEvidenceDto } from './dto/update-evidence.dto'\nimport { ApiBody, ApiConsumes, ApiTags } from '@nestjs/swagger'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-evidences-by-param.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\nimport { FileInterceptor } from '@nestjs/platform-express'\nimport { diskStorage } from 'multer'\nimport { renameFile, fileFilter } from 'src/shared/file-upload'\nimport { ConfigService } from 'nestjs-config'\n\n@ApiTags('Evidences')\n@Controller('evidences')\n@Roles(Role.Coordinator, Role.Admin, Role.Department)\nexport class EvidencesController {\n  constructor(\n    private configService: ConfigService,\n    private readonly evidencesService: EvidencesService\n  ) {}\n\n  @Get()\n  async findAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { evidences, count } = await this.evidencesService.findAll({\n      page,\n      itemsPerPage,\n      orderBy,\n      orderType,\n      filters\n    })\n\n    const paginatedItems = constructPaginatedItemsDto(\n      evidences,\n      count,\n      page,\n      itemsPerPage\n    )\n    return paginatedItems\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    const evidence = await this.evidencesService.findOne(+id)\n    return evidence\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @UseInterceptors(\n    FileInterceptor('fileLink', {\n      storage: diskStorage({\n        destination: './uploads',\n        filename: renameFile\n      }),\n      limits: { fileSize: 2097152 },\n      fileFilter: fileFilter\n    })\n  )\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string'\n        },\n        error: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        externalLink: {\n          type: 'string'\n        },\n        fileLink: {\n          type: 'string',\n          format: 'binary'\n        },\n        collectionId: {\n          type: 'number'\n        }\n      }\n    }\n  })\n  async create(\n    @UploadedFile() fileLink: Express.Multer.File,\n    @Body() createEvidenceDto: CreateEvidenceDto\n  ) {\n    const name = this.configService.get('link')\n    createEvidenceDto.fileLink = `${name.URL_BACK}/uploads/${fileLink.filename}`\n    const newEvidence = await this.evidencesService.create(createEvidenceDto)\n    return newEvidence\n  }\n\n  @Patch(':id')\n  @UseInterceptors(\n    FileInterceptor('fileLink', {\n      storage: diskStorage({\n        destination: './uploads',\n        filename: renameFile\n      }),\n      limits: { fileSize: 2097152 }\n    })\n  )\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        description: {\n          type: 'string'\n        },\n        error: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        externalLink: {\n          type: 'string'\n        },\n        fileLink: {\n          type: 'string',\n          format: 'binary'\n        }\n      }\n    }\n  })\n  async update(\n    @Param('id') id: string,\n    @Body() updateEvidenceDto: UpdateEvidenceDto,\n    @UploadedFile(\n      new ParseFilePipeBuilder().build({\n        fileIsRequired: false\n      })\n    )\n    fileLink: Express.Multer.File\n  ) {\n    const name = this.configService.get('link')\n    if (fileLink !== undefined) {\n      updateEvidenceDto.fileLink = `${name.URL_BACK}/uploads/${fileLink.filename}`\n    }\n    const updatedEvidence = await this.evidencesService.update(\n      +id,\n      updateEvidenceDto\n    )\n\n    return updatedEvidence\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string) {\n    await this.evidencesService.remove(+id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EvidencesModule.html":{"url":"modules/EvidencesModule.html","title":"module - EvidencesModule","body":"\n                   \n\n\n\n\n    Modules\n    EvidencesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EvidencesModule\n\n\n\ncluster_EvidencesModule_providers\n\n\n\n\nDocumentsService\n\nDocumentsService\n\n\n\nEvidencesModule\n\nEvidencesModule\n\nEvidencesModule -->\n\nDocumentsService->EvidencesModule\n\n\n\n\n\nEvidencesService\n\nEvidencesService\n\nEvidencesModule -->\n\nEvidencesService->EvidencesModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nEvidencesModule -->\n\nImagesService->EvidencesModule\n\n\n\n\n\nLinksService\n\nLinksService\n\nEvidencesModule -->\n\nLinksService->EvidencesModule\n\n\n\n\n\nMailsService\n\nMailsService\n\nEvidencesModule -->\n\nMailsService->EvidencesModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nEvidencesModule -->\n\nNotificationsService->EvidencesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/evidences/evidences.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentsService\n                        \n                        \n                            EvidencesService\n                        \n                        \n                            ImagesService\n                        \n                        \n                            LinksService\n                        \n                        \n                            MailsService\n                        \n                        \n                            NotificationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EvidencesController\n                        \n                        \n                            DocumentsController\n                        \n                        \n                            ImagesController\n                        \n                        \n                            LinksController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { EvidencesService } from './evidences.service'\nimport { EvidencesController } from './evidences.controller'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { Evidence } from './entities/evidence.entity'\nimport { Document } from './entities/document.entity'\nimport { Image } from './entities/image.entity'\nimport { Link } from './entities/link.entity'\nimport { InformationCollection } from '../information-collections/entities/information-collection.entity'\nimport { DocumentsController } from './document.controller'\nimport { ImagesController } from './image.controller'\nimport { DocumentsService } from './document.service'\nimport { ImagesService } from './image.service'\nimport { LinksController } from './link.controller'\nimport { LinksService } from './link.service'\nimport { NotificationsService } from '../notifications/notifications.service'\nimport { Notification } from '../notifications/entities/notification.entity'\nimport { User } from '../users/entities/user.entity'\nimport { MailsService } from '../mails/mails.service'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Evidence,\n      Document,\n      Image,\n      Link,\n      InformationCollection,\n      Notification,\n      User\n    ])\n  ],\n  controllers: [\n    EvidencesController,\n    DocumentsController,\n    ImagesController,\n    LinksController\n  ],\n  providers: [\n    EvidencesService,\n    DocumentsService,\n    ImagesService,\n    LinksService,\n    NotificationsService,\n    MailsService\n  ]\n})\nexport class EvidencesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EvidencesService.html":{"url":"injectables/EvidencesService.html","title":"injectable - EvidencesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EvidencesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/evidences.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(evidenceRepository: Repository, documentRepository: Repository, imageRepository: Repository, linkRepository: Repository, informationCollectionRepository: Repository, notificationsService: NotificationsService, mailsService: MailsService)\n                    \n                \n                        \n                            \n                                Defined in src/core/evidences/evidences.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        evidenceRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        documentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imageRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        linkRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        informationCollectionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notificationsService\n                                                  \n                                                        \n                                                                        NotificationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailsService\n                                                  \n                                                        \n                                                                        MailsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEvidenceDto: CreateEvidenceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/evidences.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEvidenceDto\n                                            \n                                                            CreateEvidenceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/evidences.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/evidences.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/evidences.service.ts:210\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateEvidenceDto: UpdateEvidenceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/evidences.service.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateEvidenceDto\n                                            \n                                                            UpdateEvidenceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { Evidence } from './entities/evidence.entity'\nimport { Document } from './entities/document.entity'\nimport { Image } from './entities/image.entity'\nimport { Link } from './entities/link.entity'\nimport { EvidenceType } from './evidences.constants'\nimport { CreateEvidenceDto } from './dto/create-evidence.dto'\nimport { UpdateEvidenceDto } from './dto/update-evidence.dto'\nimport { InformationCollection } from '../information-collections/entities/information-collection.entity'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-evidences-by-param.dto'\nimport { NotificationsService } from '../notifications/notifications.service'\nimport { MailsService } from '../mails/mails.service'\nimport { NOTIFICATION_TYPES } from '../notifications/notifications.constants'\n\n@Injectable()\nexport class EvidencesService {\n  constructor(\n    @InjectRepository(Evidence)\n    private readonly evidenceRepository: Repository,\n    @InjectRepository(Document)\n    private readonly documentRepository: Repository,\n    @InjectRepository(Image)\n    private readonly imageRepository: Repository,\n    @InjectRepository(Link)\n    private readonly linkRepository: Repository,\n    @InjectRepository(InformationCollection)\n    private readonly informationCollectionRepository: Repository,\n    private notificationsService: NotificationsService,\n    private mailsService: MailsService\n  ) {}\n\n  async findAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [evidences, count] = await this.evidenceRepository.findAndCount({\n      relations: ['collection'],\n      take: itemsPerPage,\n      skip: (page - 1) * itemsPerPage,\n      order: { [orderBy]: orderType },\n      where: parseFiltersToTypeOrm(filters)\n    })\n\n    return { evidences, count }\n  }\n\n  async findOne(id: number): Promise {\n    return this.evidenceRepository.findOne({\n      where: { id },\n      relations: ['collection']\n    })\n  }\n\n  async create(createEvidenceDto: CreateEvidenceDto): Promise {\n    const collection = await this.informationCollectionRepository.findOneOrFail(\n      {\n        where: { id: createEvidenceDto.collectionId },\n        relations: ['recopilation', 'department', 'category']\n      }\n    )\n\n    if (!collection) {\n      throw new NotFoundException('Collection not found')\n    }\n\n    if (createEvidenceDto.error === '') {\n      createEvidenceDto.error = null\n    }\n    if (createEvidenceDto.externalLink === '') {\n      createEvidenceDto.externalLink = null\n    }\n\n    const { type } = createEvidenceDto\n    switch (type) {\n      case EvidenceType.DOCUMENT:\n        if (!createEvidenceDto.fileLink.match(/\\.(xls|xlsx|doc|docx|pdf)$/)) {\n          throw new Error('Invalid format type')\n        }\n        break\n\n      case EvidenceType.IMAGE:\n        if (!createEvidenceDto.fileLink.match(/\\.(jpeg|jpg|png|gif)$/)) {\n          throw new Error('Invalid format type')\n        }\n        break\n    }\n    let evidence: Evidence\n\n    const data = {\n      departmentId: collection.department.id,\n      departmentName: collection.department.fullName,\n      collectionId: collection.id,\n      collectionName: collection.name,\n      recopilationId: collection.recopilation.id,\n      recopilationName: collection.recopilation.name,\n      categoryId: collection.category.id,\n      categoryName: collection.category.name\n    }\n\n    const notificationDTO = {\n      data: data,\n      type: NOTIFICATION_TYPES.EVIDENCE_CREATION,\n      userId: collection.department.id\n    }\n\n    await this.notificationsService.createAll(notificationDTO)\n\n    switch (type) {\n      case EvidenceType.DOCUMENT:\n        evidence = this.documentRepository.create({\n          ...createEvidenceDto,\n          collection\n        })\n        return this.documentRepository.save(evidence)\n      case EvidenceType.IMAGE:\n        evidence = this.imageRepository.create({\n          ...createEvidenceDto,\n          collection\n        })\n        return this.imageRepository.save(evidence)\n      case EvidenceType.LINK:\n        evidence = this.linkRepository.create({\n          ...createEvidenceDto,\n          collection\n        })\n        return this.linkRepository.save(evidence)\n    }\n  }\n\n  async update(\n    id: number,\n    updateEvidenceDto: UpdateEvidenceDto\n  ): Promise {\n    await this.evidenceRepository.update(id, updateEvidenceDto)\n\n    const collection = await this.informationCollectionRepository.findOneOrFail(\n      {\n        where: { id: updateEvidenceDto.collectionId },\n        relations: ['recopilation', 'department', 'category']\n      }\n    )\n\n    if (\n      updateEvidenceDto.error === null ||\n      updateEvidenceDto.error === '' ||\n      updateEvidenceDto.error === undefined\n    ) {\n      const data = {\n        departmentId: collection.department.id,\n        departmentName: collection.department.fullName,\n        collectionId: collection.id,\n        collectionName: collection.name,\n        recopilationId: collection.recopilation.id,\n        recopilationName: collection.recopilation.name,\n        categoryId: collection.category.id,\n        categoryName: collection.category.name\n      }\n\n      const notificationDTO = {\n        data: data,\n        type: NOTIFICATION_TYPES.EVIDENCE_EDITION,\n        userId: collection.department.id\n      }\n\n      await this.notificationsService.createAll(notificationDTO)\n    } else {\n      const evidenceNotification =\n        await this.evidenceRepository.findOneByOrFail({ id })\n      const data = {\n        evidenceId: evidenceNotification.id,\n        evidenceName: evidenceNotification.description,\n        departmentId: collection.department.id,\n        departmentName: collection.department.fullName,\n        collectionId: collection.id,\n        collectionName: collection.name,\n        recopilationId: collection.recopilation.id,\n        recopilationName: collection.recopilation.name,\n        categoryId: collection.category.id,\n        categoryName: collection.category.name\n      }\n\n      const notificationDTO = {\n        data: data,\n        type: NOTIFICATION_TYPES.EVIDENCE_ERROR,\n        userId: collection.department.id\n      }\n      const description = `Tienes un error en la evidencia: ${evidenceNotification.description}, de la colección de información: ${collection.name}, de la recopilación: ${collection.recopilation.name}, asociada a la categoría: ${collection.category.name}`\n      await this.notificationsService.create(notificationDTO)\n      this.mailsService.sendNotification(\n        collection.department.email,\n        description\n      )\n    }\n\n    return this.evidenceRepository.findOneByOrFail({ id })\n  }\n\n  async remove(id: number): Promise {\n    await this.evidenceRepository.delete(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Filter.html":{"url":"interfaces/Filter.html","title":"interface - Filter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Filter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/filtering/filter.type.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            delimiter\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            operator\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        delimiter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delimiter:         Delimiter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Delimiter\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operator:         Operator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Operator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Delimiter, Operator } from './constants'\n\nexport interface Filter {\n  field: string\n  value: string\n  operator: Operator\n  delimiter: Delimiter\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FiltersSegmentDto.html":{"url":"classes/FiltersSegmentDto.html","title":"class - FiltersSegmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FiltersSegmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/filtering/filters-segment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                filters\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        filters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Filter[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, required: false, externalDocs: undefined, description: 'More info (https://github.com/AlejandroJRosas/green-summary-202425/tree/main/apps/server/src/shared/filtering).'})@Transform(segment => , {toClassOnly: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/filtering/filters-segment.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform } from 'class-transformer'\nimport { parseFiltersSegment } from './parse-filters-segment'\nimport { Filter } from './filter.type'\nimport { ApiProperty } from '@nestjs/swagger'\nimport { IsOptional } from 'class-validator'\n\nexport class FiltersSegmentDto {\n  @ApiProperty({\n    type: String,\n    required: false,\n    externalDocs: {\n      description: 'Filtering Segment API Documentation',\n      url: 'https://github.com/AlejandroJRosas/green-summary-202425/tree/main/apps/server/src/shared/filtering'\n    },\n    description:\n      'More info (https://github.com/AlejandroJRosas/green-summary-202425/tree/main/apps/server/src/shared/filtering).'\n  })\n  @Transform(\n    (segment) => {\n      return parseFiltersSegment(segment.value)\n    },\n    { toClassOnly: true }\n  )\n  @IsOptional()\n  filters: Filter[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneParams.html":{"url":"classes/FindOneParams.html","title":"class - FindOneParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/dto/find-one-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/dto/find-one-params.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator'\n\nexport class FindOneParams {\n  @IsNumberString()\n  id: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/errors/http-exception.filter.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpException\n} from '@nestjs/common'\nimport { Response } from 'express'\nimport { constructHttpResponse } from 'src/shared/construct-http-response'\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  public catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp()\n    const response = ctx.getResponse()\n\n    const exceptionResponse = exception.getResponse()\n\n    const message =\n      exceptionResponse['message'] ?? 'An unexpected error occurred'\n    const statusCode = exception.getStatus()\n\n    return response\n      .status(statusCode)\n      .json(constructHttpResponse(statusCode, exceptionResponse, message))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Image.html":{"url":"classes/Image.html","title":"class - Image","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Image\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/entities/image.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                externalLink\n                            \n                            \n                                    \n                                fileLink\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        externalLink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/entities/image.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileLink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/entities/image.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChildEntity, Column } from 'typeorm'\nimport { Evidence } from './evidence.entity'\nimport { EvidenceType } from '../evidences.constants'\n\n@ChildEntity(EvidenceType.IMAGE)\nexport class Image extends Evidence {\n  @Column({ type: 'text' })\n  fileLink: string\n\n  @Column({ type: 'text', nullable: true })\n  externalLink?: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ImagesController.html":{"url":"controllers/ImagesController.html","title":"controller - ImagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ImagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/image.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                images\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/image.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/image.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { ImagesService } from './image.service'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { OrderByParamDto } from './dto/order-evidences-by-param.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\n\n@ApiTags('Images')\n@Controller('images')\nexport class ImagesController {\n  constructor(private readonly imagesService: ImagesService) {}\n\n  @Get()\n  async findAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { images, count } = await this.imagesService.findAll({\n      page,\n      itemsPerPage,\n      orderBy,\n      orderType,\n      filters\n    })\n\n    return constructPaginatedItemsDto(images, count, page, itemsPerPage)\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.imagesService.findOne(+id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImagesService.html":{"url":"injectables/ImagesService.html","title":"injectable - ImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/image.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(imagesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/evidences/image.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        imagesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/image.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/image.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { OrderByParamDto } from './dto/order-evidences-by-param.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { Image } from './entities/image.entity'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\n\n@Injectable()\nexport class ImagesService {\n  constructor(\n    @InjectRepository(Image)\n    private readonly imagesRepository: Repository\n  ) {}\n\n  async findAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [images, count] = await this.imagesRepository.findAndCount({\n      relations: ['collection'],\n      take: itemsPerPage,\n      skip: (page - 1) * itemsPerPage,\n      order: { [orderBy]: orderType },\n      where: parseFiltersToTypeOrm(filters)\n    })\n\n    return { images, count }\n  }\n\n  async findOne(id: number) {\n    const image = await this.imagesRepository.findOneOrFail({\n      where: { id },\n      relations: ['collection']\n    })\n\n    return image\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Indicator.html":{"url":"entities/Indicator.html","title":"entity - Indicator","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Indicator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/indicators/entities/indicator.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                alias\n                            \n                            \n                                    \n                                categories\n                            \n                            \n                                    \n                                criterion\n                            \n                            \n                                    \n                                helpText\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                recopilationsPerIndicator\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/entities/indicator.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, category => category.indicator)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/entities/indicator.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        criterion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Criteria[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, criteria => criteria.indicator)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/entities/indicator.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        helpText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/entities/indicator.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/entities/indicator.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/entities/indicator.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recopilationsPerIndicator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IndicatorPerRecopilation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, indicatorPorRecopilations => indicatorPorRecopilations.indicator)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/entities/indicator.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Category } from 'src/core/categories/entities/category.entity'\nimport { Criteria } from 'src/core/criterion/entities/criteria.entity'\nimport { IndicatorPerRecopilation } from 'src/core/indicators-per-recopilations/entities/indicator-per-recopilatio.entity'\nimport { Entity, Column, OneToMany, PrimaryColumn } from 'typeorm'\n\n@Entity('indicators')\nexport class Indicator {\n  @PrimaryColumn()\n  index: number\n\n  @Column({ type: 'varchar', length: 255, nullable: false, unique: true })\n  name: string\n\n  @Column({ type: 'varchar', length: 255, nullable: false })\n  alias: string\n\n  @Column({ type: 'text', nullable: false })\n  helpText: string\n\n  @OneToMany(() => Category, (category) => category.indicator)\n  categories: Category[]\n\n  @OneToMany(() => Criteria, (criteria) => criteria.indicator)\n  criterion: Criteria[]\n\n  @OneToMany(\n    () => IndicatorPerRecopilation,\n    (indicatorPorRecopilations) => indicatorPorRecopilations.indicator\n  )\n  recopilationsPerIndicator: IndicatorPerRecopilation[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IndicatorPerRecopilation.html":{"url":"entities/IndicatorPerRecopilation.html","title":"entity - IndicatorPerRecopilation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IndicatorPerRecopilation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/indicators-per-recopilations/entities/indicator-per-recopilatio.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                indicator\n                            \n                            \n                                    \n                                recopilation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators-per-recopilations/entities/indicator-per-recopilatio.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        indicator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Indicator\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, indicator => indicator.recopilationsPerIndicator, {onDelete: 'CASCADE', onUpdate: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators-per-recopilations/entities/indicator-per-recopilatio.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recopilation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Recopilation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, recopilation => recopilation.indicatorsPerRecopilations, {onDelete: 'CASCADE', onUpdate: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators-per-recopilations/entities/indicator-per-recopilatio.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, ManyToOne, Unique } from 'typeorm'\nimport { Indicator } from 'src/core/indicators/entities/indicator.entity'\nimport { Recopilation } from 'src/core/recopilations/entities/recopilation.entity'\n\n@Entity('indicators_per_recopilations')\n@Unique(['recopilation', 'indicator'])\nexport class IndicatorPerRecopilation {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @ManyToOne(\n    () => Recopilation,\n    (recopilation) => recopilation.indicatorsPerRecopilations,\n    {\n      onDelete: 'CASCADE',\n      onUpdate: 'CASCADE'\n    }\n  )\n  recopilation: Recopilation\n\n  @ManyToOne(\n    () => Indicator,\n    (indicator) => indicator.recopilationsPerIndicator,\n    {\n      onDelete: 'CASCADE',\n      onUpdate: 'CASCADE'\n    }\n  )\n  indicator: Indicator\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IndicatorToRelate.html":{"url":"classes/IndicatorToRelate.html","title":"class - IndicatorToRelate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IndicatorToRelate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                criterion\n                            \n                            \n                                    \n                                    \n                                indicatorId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        criterion\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CriteriaToRelate[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested({each: true})@ArrayNotEmpty()@IsArray()@IsNotEmpty()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        indicatorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  ValidateNested\n} from 'class-validator'\nimport { Type } from 'class-transformer'\n\nexport class RelateIndicatorsToRecopilationDto {\n  @IsNumber()\n  @IsNotEmpty()\n  recopilationId: number\n\n  @ValidateNested({ each: true })\n  @ArrayNotEmpty()\n  @IsArray()\n  @IsNotEmpty()\n  @Type(() => IndicatorToRelate)\n  indicators: IndicatorToRelate[]\n}\n\nexport class IndicatorToRelate {\n  @IsNumber()\n  @IsNotEmpty()\n  indicatorId: number\n\n  @ValidateNested({ each: true })\n  @ArrayNotEmpty()\n  @IsArray()\n  @IsNotEmpty()\n  @Type(() => CriteriaToRelate)\n  criterion: CriteriaToRelate[]\n}\n\nexport class CriteriaToRelate {\n  @IsNumber()\n  @IsNotEmpty()\n  criteriaId: number\n\n  @IsNumber()\n  @IsNotEmpty()\n  categoryId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IndicatorsController.html":{"url":"controllers/IndicatorsController.html","title":"controller - IndicatorsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IndicatorsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/indicators/indicators.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                indicators\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createIndicator\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteIndicator\n                            \n                            \n                                    \n                                    Async\n                                getAllIndicators\n                            \n                            \n                                    \n                                    Async\n                                getIndicator\n                            \n                            \n                                    \n                                    Async\n                                getIndicatorsByRecopilation\n                            \n                            \n                                    \n                                    Async\n                                updateIndicator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    createIndicator(newIndicador: CreateIndicatorDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/core/indicators/indicators.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newIndicador\n                                            \n                                                            CreateIndicatorDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIndicator(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/core/indicators/indicators.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllIndicators\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllIndicators(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/indicators/indicators.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIndicator(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/indicators/indicators.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getIndicatorsByRecopilation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIndicatorsByRecopilation(recopilationId: string, undefined: OrderByParamDto, undefined: OrderTypeParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/recopilation/:recopilationId')\n                \n            \n\n                    \n                        \n                            Defined in src/core/indicators/indicators.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateIndicator(id: string, updatedIndicador: UpdateIndicatorDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/indicators/indicators.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatedIndicador\n                                            \n                                                            UpdateIndicatorDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  Param,\n  Post,\n  Query,\n  HttpStatus,\n  Patch\n} from '@nestjs/common'\nimport { IndicatorsService } from './indicators.service'\nimport { CreateIndicatorDto } from './dto/create-indicator.dto'\nimport { UpdateIndicatorDto } from './dto/update-indicator.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-indicators-by-param.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Indicators')\n@Controller('indicators')\n@Roles(Role.Coordinator, Role.Admin)\nexport class IndicatorsController {\n  constructor(private readonly indicatorsService: IndicatorsService) {}\n\n  @Get()\n  async getAllIndicators(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'index' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { indicators, count } = await this.indicatorsService.getAllIndicators(\n      {\n        page,\n        itemsPerPage,\n        orderBy,\n        orderType,\n        filters\n      }\n    )\n\n    const paginatedItems = constructPaginatedItemsDto(\n      indicators,\n      count,\n      page,\n      itemsPerPage\n    )\n    return paginatedItems\n  }\n\n  @Get('/:id')\n  async getIndicator(@Param('id') id: string) {\n    const indicator = await this.indicatorsService.getOneIndicator(Number(id))\n    return indicator\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async createIndicator(@Body() newIndicador: CreateIndicatorDto) {\n    const createdIndicator =\n      await this.indicatorsService.createIndicator(newIndicador)\n    return createdIndicator\n  }\n\n  @Patch('/:id')\n  async updateIndicator(\n    @Param('id') id: string,\n    @Body() updatedIndicador: UpdateIndicatorDto\n  ) {\n    const indicator = await this.indicatorsService.updateIndicator(\n      Number(id),\n      updatedIndicador\n    )\n    return indicator\n  }\n\n  @Delete('/:id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async deleteIndicator(@Param('id') id: string) {\n    await this.indicatorsService.deleteIndicator(Number(id))\n  }\n\n  @Get('/recopilation/:recopilationId')\n  async getIndicatorsByRecopilation(\n    @Param('recopilationId') recopilationId: string,\n    @Query() { orderBy = 'index' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto\n  ) {\n    const indicators = this.indicatorsService.indicatorsByRecopilation(\n      +recopilationId,\n      { orderBy, orderType }\n    )\n\n    return indicators\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IndicatorsModule.html":{"url":"modules/IndicatorsModule.html","title":"module - IndicatorsModule","body":"\n                   \n\n\n\n\n    Modules\n    IndicatorsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IndicatorsModule\n\n\n\ncluster_IndicatorsModule_providers\n\n\n\n\nIndicatorsService\n\nIndicatorsService\n\n\n\nIndicatorsModule\n\nIndicatorsModule\n\nIndicatorsModule -->\n\nIndicatorsService->IndicatorsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/indicators/indicators.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IndicatorsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IndicatorsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { IndicatorsService } from './indicators.service'\nimport { IndicatorsController } from './indicators.controller'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { Indicator } from './entities/indicator.entity'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Indicator])],\n  controllers: [IndicatorsController],\n  providers: [IndicatorsService],\n  exports: [TypeOrmModule]\n})\nexport class IndicatorsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IndicatorsPerRecopilationsController.html":{"url":"controllers/IndicatorsPerRecopilationsController.html","title":"controller - IndicatorsPerRecopilationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IndicatorsPerRecopilationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/indicators-per-recopilations/indicators-per-recopilations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                indicators-per-recopilations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createIndicatorsPerRecopilationsDto: CreateIndicatorPerRecopilationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/core/indicators-per-recopilations/indicators-per-recopilations.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createIndicatorsPerRecopilationsDto\n                                            \n                                                            CreateIndicatorPerRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/indicators-per-recopilations/indicators-per-recopilations.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/indicators-per-recopilations/indicators-per-recopilations.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/indicators-per-recopilations/indicators-per-recopilations.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateIndicatorsPerRecopilationsDto: UpdateIndicatorPerRecopilationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/indicators-per-recopilations/indicators-per-recopilations.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateIndicatorsPerRecopilationsDto\n                                            \n                                                            UpdateIndicatorPerRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  Query,\n  Patch\n} from '@nestjs/common'\nimport { IndicatorsPerRecopilationsService } from './indicators-per-recopilations.service'\nimport { CreateIndicatorPerRecopilationDto } from './dto/create-indicator-per-recopilation.dto'\nimport { UpdateIndicatorPerRecopilationDto } from './dto/update-indicator-per-recopilation.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Indicators Per Recopilations')\n@Controller('indicators-per-recopilations')\n@Roles(Role.Coordinator, Role.Admin)\nexport class IndicatorsPerRecopilationsController {\n  constructor(\n    private readonly indicatorsPerRecopilationsService: IndicatorsPerRecopilationsService\n  ) {}\n\n  @Get()\n  async findAll(@Query() { page = 1, itemsPerPage = 10 }: PaginationParams) {\n    const { indicatorsPerRecopilations, count } =\n      await this.indicatorsPerRecopilationsService.findAll({\n        page,\n        itemsPerPage\n      })\n\n    return constructPaginatedItemsDto(\n      indicatorsPerRecopilations,\n      count,\n      page,\n      itemsPerPage\n    )\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number) {\n    return this.indicatorsPerRecopilationsService.findOne(id)\n  }\n\n  @Post()\n  async create(\n    @Body()\n    createIndicatorsPerRecopilationsDto: CreateIndicatorPerRecopilationDto\n  ) {\n    return this.indicatorsPerRecopilationsService.create(\n      createIndicatorsPerRecopilationsDto\n    )\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: number,\n    @Body()\n    updateIndicatorsPerRecopilationsDto: UpdateIndicatorPerRecopilationDto\n  ) {\n    return this.indicatorsPerRecopilationsService.update(\n      id,\n      updateIndicatorsPerRecopilationsDto\n    )\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: number) {\n    await this.indicatorsPerRecopilationsService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IndicatorsPerRecopilationsModule.html":{"url":"modules/IndicatorsPerRecopilationsModule.html","title":"module - IndicatorsPerRecopilationsModule","body":"\n                   \n\n\n\n\n    Modules\n    IndicatorsPerRecopilationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IndicatorsPerRecopilationsModule\n\n\n\ncluster_IndicatorsPerRecopilationsModule_providers\n\n\n\n\nIndicatorsPerRecopilationsService\n\nIndicatorsPerRecopilationsService\n\n\n\nIndicatorsPerRecopilationsModule\n\nIndicatorsPerRecopilationsModule\n\nIndicatorsPerRecopilationsModule -->\n\nIndicatorsPerRecopilationsService->IndicatorsPerRecopilationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/indicators-per-recopilations/indicators-per-recopilations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            IndicatorsPerRecopilationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            IndicatorsPerRecopilationsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { IndicatorsPerRecopilationsService } from './indicators-per-recopilations.service'\nimport { IndicatorsPerRecopilationsController } from './indicators-per-recopilations.controller'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { Indicator } from '../indicators/entities/indicator.entity'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\nimport { IndicatorPerRecopilation } from './entities/indicator-per-recopilatio.entity'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      IndicatorPerRecopilation,\n      Indicator,\n      Recopilation\n    ])\n  ],\n  controllers: [IndicatorsPerRecopilationsController],\n  providers: [IndicatorsPerRecopilationsService]\n})\nexport class IndicatorsPerRecopilationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IndicatorsPerRecopilationsService.html":{"url":"injectables/IndicatorsPerRecopilationsService.html","title":"injectable - IndicatorsPerRecopilationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IndicatorsPerRecopilationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/indicators-per-recopilations/indicators-per-recopilations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(indicatorsPerRecopilationsRepository: Repository, indicatorRepository: Repository, recopilationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/indicators-per-recopilations/indicators-per-recopilations.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        indicatorsPerRecopilationsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        indicatorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recopilationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createIndicatorsPerRecopilationsDto: CreateIndicatorPerRecopilationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/indicators-per-recopilations/indicators-per-recopilations.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createIndicatorsPerRecopilationsDto\n                                            \n                                                            CreateIndicatorPerRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/indicators-per-recopilations/indicators-per-recopilations.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/indicators-per-recopilations/indicators-per-recopilations.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/indicators-per-recopilations/indicators-per-recopilations.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateIndicatorsPerRecopilationsDto: UpdateIndicatorPerRecopilationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/indicators-per-recopilations/indicators-per-recopilations.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateIndicatorsPerRecopilationsDto\n                                            \n                                                            UpdateIndicatorPerRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { IndicatorPerRecopilation } from './entities/indicator-per-recopilatio.entity'\nimport { CreateIndicatorPerRecopilationDto } from './dto/create-indicator-per-recopilation.dto'\nimport { UpdateIndicatorPerRecopilationDto } from './dto/update-indicator-per-recopilation.dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { Indicator } from '../indicators/entities/indicator.entity'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\n\n@Injectable()\nexport class IndicatorsPerRecopilationsService {\n  constructor(\n    @InjectRepository(IndicatorPerRecopilation)\n    private readonly indicatorsPerRecopilationsRepository: Repository,\n    @InjectRepository(Indicator)\n    private readonly indicatorRepository: Repository,\n    @InjectRepository(Recopilation)\n    private readonly recopilationRepository: Repository\n  ) {}\n\n  async findAll({ page, itemsPerPage }: PaginationParams): Promise {\n    const [indicatorsPerRecopilations, count] =\n      await this.indicatorsPerRecopilationsRepository.findAndCount({\n        take: Number(itemsPerPage),\n        skip: (Number(page) - 1) * Number(itemsPerPage),\n        relations: ['recopilation', 'indicator']\n      })\n\n    return { indicatorsPerRecopilations, count }\n  }\n\n  async findOne(id: number): Promise {\n    return this.indicatorsPerRecopilationsRepository.findOneOrFail({\n      where: { id },\n      relations: ['recopilation', 'indicator']\n    })\n  }\n\n  async create(\n    createIndicatorsPerRecopilationsDto: CreateIndicatorPerRecopilationDto\n  ): Promise {\n    const { recopilationId: IDRecopilacion, indicatorIndex: IndiceIndicador } =\n      createIndicatorsPerRecopilationsDto\n\n    const recopilation = await this.recopilationRepository.findOneByOrFail({\n      id: IDRecopilacion\n    })\n    const indicator = await this.indicatorRepository.findOneByOrFail({\n      index: IndiceIndicador\n    })\n\n    const indicatorsPerRecopilations =\n      this.indicatorsPerRecopilationsRepository.create({\n        recopilation,\n        indicator\n      })\n\n    return this.indicatorsPerRecopilationsRepository.save(\n      indicatorsPerRecopilations\n    )\n  }\n\n  async update(\n    id: number,\n    updateIndicatorsPerRecopilationsDto: UpdateIndicatorPerRecopilationDto\n  ): Promise {\n    const indicatorsPerRecopilations =\n      await this.indicatorsPerRecopilationsRepository.findOneOrFail({\n        where: { id },\n        relations: ['recopilation', 'indicator']\n      })\n\n    const { recopilationId: IDRecopilacion, indicatorIndex: IndiceIndicador } =\n      updateIndicatorsPerRecopilationsDto\n\n    const recopilation = await this.recopilationRepository.findOneByOrFail({\n      id: IDRecopilacion\n    })\n    indicatorsPerRecopilations.recopilation = recopilation\n\n    const indicator = await this.indicatorRepository.findOneByOrFail({\n      index: IndiceIndicador\n    })\n    indicatorsPerRecopilations.indicator = indicator\n\n    await this.indicatorsPerRecopilationsRepository.save(\n      indicatorsPerRecopilations\n    )\n\n    return this.indicatorsPerRecopilationsRepository.findOneOrFail({\n      where: { id },\n      relations: ['recopilation', 'indicator']\n    })\n  }\n\n  async remove(id: number): Promise {\n    const indicatorsPerRecopilations =\n      await this.indicatorsPerRecopilationsRepository.findOneOrFail({\n        where: { id },\n        relations: ['recopilation', 'indicator']\n      })\n    await this.indicatorsPerRecopilationsRepository.remove(\n      indicatorsPerRecopilations\n    )\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IndicatorsService.html":{"url":"injectables/IndicatorsService.html","title":"injectable - IndicatorsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IndicatorsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/indicators/indicators.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createIndicator\n                            \n                            \n                                    Async\n                                deleteIndicator\n                            \n                            \n                                    Async\n                                getAllIndicators\n                            \n                            \n                                    Async\n                                getOneIndicator\n                            \n                            \n                                    Async\n                                indicatorsByRecopilation\n                            \n                            \n                                    Async\n                                updateIndicator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(indicatorRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/indicators/indicators.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        indicatorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    createIndicator(createIndicatorDto: CreateIndicatorDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/indicators/indicators.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createIndicatorDto\n                                            \n                                                            CreateIndicatorDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIndicator(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/indicators/indicators.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllIndicators\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllIndicators(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/indicators/indicators.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOneIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOneIndicator(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/indicators/indicators.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        indicatorsByRecopilation\n                        \n                    \n                \n            \n            \n                \n                        \n                    indicatorsByRecopilation(recopilationId: number, undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/indicators/indicators.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateIndicator\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateIndicator(index: number, updateIndicatorDto: UpdateIndicatorDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/indicators/indicators.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateIndicatorDto\n                                            \n                                                            UpdateIndicatorDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { Indicator } from './entities/indicator.entity'\nimport { CreateIndicatorDto } from './dto/create-indicator.dto'\nimport { UpdateIndicatorDto } from './dto/update-indicator.dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-indicators-by-param.dto'\n\n@Injectable()\nexport class IndicatorsService {\n  constructor(\n    @InjectRepository(Indicator)\n    private readonly indicatorRepository: Repository\n  ) {}\n\n  async createIndicator(\n    createIndicatorDto: CreateIndicatorDto\n  ): Promise {\n    const indicator = this.indicatorRepository.create(createIndicatorDto)\n    await this.indicatorRepository.insert(indicator)\n    return indicator\n  }\n\n  async getAllIndicators({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [indicators, count] = await this.indicatorRepository.findAndCount({\n      take: itemsPerPage,\n      skip: (page - 1) * itemsPerPage,\n      order: { [orderBy]: orderType },\n      where: parseFiltersToTypeOrm(filters)\n    })\n\n    return { indicators, count }\n  }\n\n  async getOneIndicator(index: number): Promise {\n    const indicator = await this.indicatorRepository.findOneByOrFail({ index })\n    return indicator\n  }\n\n  async indicatorsByRecopilation(\n    recopilationId: number,\n    { orderBy, orderType }: OrderByParamDto & OrderTypeParamDto\n  ) {\n    const indicators = await this.indicatorRepository.find({\n      where: {\n        recopilationsPerIndicator: {\n          recopilation: {\n            id: recopilationId\n          }\n        }\n      },\n      withDeleted: true,\n      relations: {\n        recopilationsPerIndicator: {\n          recopilation: {\n            categorizedCriterion: {\n              category: true,\n              criteria: {\n                indicator: true\n              }\n            }\n          }\n        }\n      },\n      order: {\n        [orderBy]: orderType,\n        recopilationsPerIndicator: {\n          indicator: { index: 'ASC' },\n          recopilation: {\n            categorizedCriterion: {\n              category: { id: 'ASC' },\n              criteria: { id: 'ASC' }\n            }\n          }\n        }\n      }\n    })\n\n    const formattedIndicators = indicators.map((i) => {\n      const categories = []\n      i.recopilationsPerIndicator[0].recopilation.categorizedCriterion.forEach(\n        (cc) => {\n          if (cc.criteria.indicator.index !== i.index) return\n\n          const category = cc.category\n          const { indicator, ...criterion } = cc.criteria\n\n          const alreadyInsertedCategory = categories.find(\n            (c) => c.id === category.id\n          )\n\n          if (alreadyInsertedCategory) {\n            alreadyInsertedCategory.criteria.push(criterion)\n          } else {\n            categories.push({ ...category, criteria: [criterion] })\n          }\n        }\n      )\n\n      return {\n        index: i.index,\n        name: i.name,\n        alias: i.alias,\n        helpText: i.helpText,\n        categories: categories\n      }\n    })\n\n    return formattedIndicators\n  }\n\n  async updateIndicator(\n    index: number,\n    updateIndicatorDto: UpdateIndicatorDto\n  ): Promise {\n    await this.indicatorRepository.update(index, updateIndicatorDto)\n    const updatedIndicador = await this.indicatorRepository.findOneByOrFail({\n      index: updateIndicatorDto.index ?? index\n    })\n    return updatedIndicador\n  }\n\n  async deleteIndicator(index: number): Promise {\n    const result = await this.indicatorRepository.delete(index)\n    if (result.affected === 0) {\n      throw new NotFoundException(`Indicador with ID ${index} not found`)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/InformationCollection.html":{"url":"entities/InformationCollection.html","title":"entity - InformationCollection","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  InformationCollection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/information-collections/entities/information-collection.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                department\n                            \n                            \n                                    \n                                evidences\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isApproved\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                recopilation\n                            \n                            \n                                    \n                                summary\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, category => category.informationCollections)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/entities/information-collection.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6), nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/entities/information-collection.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        department\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Department\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, department => department.informationCollections)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/entities/information-collection.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        evidences\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Evidence[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, evidence => evidence.collection)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/entities/information-collection.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/entities/information-collection.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isApproved\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'bool', nullable: false, default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/entities/information-collection.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/entities/information-collection.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recopilation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Recopilation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, recopilation => recopilation.informationCollections)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/entities/information-collection.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        summary\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/entities/information-collection.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Category } from 'src/core/categories/entities/category.entity'\nimport { Evidence } from 'src/core/evidences/entities/evidence.entity'\nimport { Recopilation } from 'src/core/recopilations/entities/recopilation.entity'\nimport { Department } from 'src/core/users/entities/department.entity'\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  OneToMany,\n  CreateDateColumn,\n  ManyToOne\n} from 'typeorm'\n\n@Entity('information_collections')\nexport class InformationCollection {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @ManyToOne(\n    () => Recopilation,\n    (recopilation) => recopilation.informationCollections\n  )\n  recopilation: Recopilation\n\n  @ManyToOne(\n    () => Department,\n    (department) => department.informationCollections\n  )\n  department: Department\n\n  @ManyToOne(() => Category, (category) => category.informationCollections)\n  category: Category\n\n  @Column({ type: 'text', nullable: false })\n  name: string\n\n  @Column({ type: 'text', nullable: false })\n  summary: string\n\n  @Column({ type: 'bool', nullable: false, default: false })\n  isApproved: boolean\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)',\n    nullable: false\n  })\n  createdAt: Date\n\n  @OneToMany(() => Evidence, (evidence) => evidence.collection)\n  evidences: Evidence[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InformationCollectionsController.html":{"url":"controllers/InformationCollectionsController.html","title":"controller - InformationCollectionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InformationCollectionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/information-collections/information-collections.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                information-collections\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                getAllDepartmentsAnswers\n                            \n                            \n                                    \n                                    Async\n                                getDepartmentAnswer\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createInformationCollectionDto: CreateInformationCollectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createInformationCollectionDto\n                                            \n                                                            CreateInformationCollectionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllDepartmentsAnswers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllDepartmentsAnswers(recopilationId: number, categoryId: number, undefined: OrderByParamDto, undefined: OrderTypeParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('department-answer/:recopilationId/:categoryId')\n                \n            \n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                categoryId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getDepartmentAnswer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDepartmentAnswer(recopilationId: number, categoryId: number, departmentId: number, undefined: OrderByParamDto, undefined: OrderTypeParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('department-answer/:recopilationId/:categoryId/:departmentId')\n                \n            \n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                categoryId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                departmentId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.controller.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(request: Request, id: number, updateInformationCollectionDto: UpdateInformationCollectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.controller.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateInformationCollectionDto\n                                            \n                                                            UpdateInformationCollectionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  HttpStatus,\n  HttpCode,\n  Query,\n  Patch,\n  Req\n} from '@nestjs/common'\nimport { InformationCollectionsService } from './information-collections.service'\nimport { CreateInformationCollectionDto } from './dto/create-information-collection.dto'\nimport { UpdateInformationCollectionDto } from './dto/update-information-collection.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-information-collections-by-param.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Information Collections')\n@Controller('information-collections')\n@Roles(Role.Coordinator, Role.Admin, Role.Department)\nexport class InformationCollectionsController {\n  constructor(\n    private readonly informationCollectionsService: InformationCollectionsService\n  ) {}\n\n  @Get()\n  async findAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { informationCollection, count } =\n      await this.informationCollectionsService.findAll({\n        page,\n        itemsPerPage,\n        orderBy,\n        orderType,\n        filters\n      })\n\n    const paginatedItems = constructPaginatedItemsDto(\n      informationCollection,\n      count,\n      page,\n      itemsPerPage\n    )\n    return paginatedItems\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number) {\n    const collection = await this.informationCollectionsService.findOne(id)\n\n    return collection\n  }\n\n  @Get('department-answer/:recopilationId/:categoryId')\n  async getAllDepartmentsAnswers(\n    @Param('recopilationId') recopilationId: number,\n    @Param('categoryId') categoryId: number,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto\n  ) {\n    return this.informationCollectionsService.getAllDepartmentsAnswers(\n      recopilationId,\n      categoryId,\n      { orderBy, orderType }\n    )\n  }\n\n  @Get('department-answer/:recopilationId/:categoryId/:departmentId')\n  async getDepartmentAnswer(\n    @Param('recopilationId') recopilationId: number,\n    @Param('categoryId') categoryId: number,\n    @Param('departmentId') departmentId: number,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto\n  ) {\n    return this.informationCollectionsService.getDepartmentAnswer(\n      recopilationId,\n      categoryId,\n      departmentId,\n      { orderBy, orderType }\n    )\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async create(\n    @Body() createInformationCollectionDto: CreateInformationCollectionDto\n  ) {\n    const newCollection = await this.informationCollectionsService.create(\n      createInformationCollectionDto\n    )\n    return newCollection\n  }\n\n  @Patch(':id')\n  async update(\n    @Req() request: Request,\n    @Param('id') id: number,\n    @Body() updateInformationCollectionDto: UpdateInformationCollectionDto\n  ) {\n    const notifyCoordinators = request['user'].type === Role.Department\n\n    const updatedCollection = await this.informationCollectionsService.update(\n      id,\n      updateInformationCollectionDto,\n      notifyCoordinators\n    )\n\n    return updatedCollection\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: number) {\n    await this.informationCollectionsService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InformationCollectionsModule.html":{"url":"modules/InformationCollectionsModule.html","title":"module - InformationCollectionsModule","body":"\n                   \n\n\n\n\n    Modules\n    InformationCollectionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_InformationCollectionsModule\n\n\n\ncluster_InformationCollectionsModule_providers\n\n\n\n\nInformationCollectionsService\n\nInformationCollectionsService\n\n\n\nInformationCollectionsModule\n\nInformationCollectionsModule\n\nInformationCollectionsModule -->\n\nInformationCollectionsService->InformationCollectionsModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nInformationCollectionsModule -->\n\nNotificationsService->InformationCollectionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/information-collections/information-collections.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InformationCollectionsService\n                        \n                        \n                            NotificationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InformationCollectionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { InformationCollectionsService } from './information-collections.service'\nimport { InformationCollectionsController } from './information-collections.controller'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { InformationCollection } from './entities/information-collection.entity'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\nimport { Department } from '../users/entities/department.entity'\nimport { Category } from '../categories/entities/category.entity'\nimport { NotificationsService } from '../notifications/notifications.service'\nimport { Notification } from '../notifications/entities/notification.entity'\nimport { User } from '../users/entities/user.entity'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      InformationCollection,\n      Recopilation,\n      Department,\n      Category,\n      Notification,\n      User\n    ])\n  ],\n  controllers: [InformationCollectionsController],\n  providers: [InformationCollectionsService, NotificationsService]\n})\nexport class InformationCollectionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InformationCollectionsService.html":{"url":"injectables/InformationCollectionsService.html","title":"injectable - InformationCollectionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InformationCollectionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/information-collections/information-collections.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getAllDepartmentsAnswers\n                            \n                            \n                                    Async\n                                getDepartmentAnswer\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(informationCollectionsRepository: Repository, recopilationRepository: Repository, departmentRepository: Repository, categoryRepository: Repository, notificationsService: NotificationsService)\n                    \n                \n                        \n                            \n                                Defined in src/core/information-collections/information-collections.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        informationCollectionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recopilationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        departmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notificationsService\n                                                  \n                                                        \n                                                                        NotificationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createInformationCollectionDto: CreateInformationCollectionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createInformationCollectionDto\n                                            \n                                                            CreateInformationCollectionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllDepartmentsAnswers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllDepartmentsAnswers(recopilationId: number, categoryId: number, undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                categoryId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDepartmentAnswer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDepartmentAnswer(recopilationId: number, categoryId: number, departmentId: number, undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                categoryId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                departmentId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.service.ts:227\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateInformationCollectionDto: UpdateInformationCollectionDto, notifyCoordinators: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/information-collections/information-collections.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateInformationCollectionDto\n                                            \n                                                            UpdateInformationCollectionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notifyCoordinators\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { InformationCollection } from './entities/information-collection.entity'\nimport { CreateInformationCollectionDto } from './dto/create-information-collection.dto'\nimport { UpdateInformationCollectionDto } from './dto/update-information-collection.dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-information-collections-by-param.dto'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\nimport { Department } from '../users/entities/department.entity'\nimport { Category } from '../categories/entities/category.entity'\nimport { NotificationsService } from '../notifications/notifications.service'\nimport { NOTIFICATION_TYPES } from '../notifications/notifications.constants'\n\n@Injectable()\nexport class InformationCollectionsService {\n  constructor(\n    @InjectRepository(InformationCollection)\n    private informationCollectionsRepository: Repository,\n    @InjectRepository(Recopilation)\n    private recopilationRepository: Repository,\n    @InjectRepository(Department)\n    private departmentRepository: Repository,\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n    private notificationsService: NotificationsService\n  ) {}\n\n  async findAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [informationCollection, count] =\n      await this.informationCollectionsRepository.findAndCount({\n        take: itemsPerPage,\n        skip: (page - 1) * itemsPerPage,\n        order: { [orderBy]: orderType },\n        where: parseFiltersToTypeOrm(filters),\n        relations: ['evidences', 'recopilation', 'department', 'category']\n      })\n\n    return { informationCollection, count }\n  }\n\n  async findOne(id: number): Promise {\n    return await this.informationCollectionsRepository.findOneOrFail({\n      where: { id },\n      relations: ['evidences', 'recopilation', 'department', 'category']\n    })\n  }\n\n  async getDepartmentAnswer(\n    recopilationId: number,\n    categoryId: number,\n    departmentId: number,\n    { orderBy, orderType }: OrderByParamDto & OrderTypeParamDto\n  ) {\n    const informationCollections = this.informationCollectionsRepository.find({\n      relations: ['evidences'],\n      where: {\n        recopilation: { id: recopilationId },\n        category: { id: categoryId },\n        department: { id: departmentId }\n      },\n      order: {\n        [orderBy]: orderType\n      }\n    })\n\n    return informationCollections\n  }\n\n  async getAllDepartmentsAnswers(\n    recopilationId: number,\n    categoryId: number,\n    { orderBy, orderType }: OrderByParamDto & OrderTypeParamDto\n  ) {\n    const informationCollections =\n      await this.informationCollectionsRepository.find({\n        relations: { department: true, evidences: true },\n        where: {\n          recopilation: { id: recopilationId },\n          category: { id: categoryId }\n        },\n        order: {\n          [orderBy]: orderType\n        }\n      })\n\n    const formattedInformationCollections = []\n\n    informationCollections.forEach((ic) => {\n      const department = ic.department\n\n      const alreadyInsertedDepartment = formattedInformationCollections.find(\n        (d) => d.department.id === department.id\n      )\n\n      if (alreadyInsertedDepartment) {\n        alreadyInsertedDepartment.informationCollections.push(ic)\n      } else {\n        formattedInformationCollections.push({\n          department,\n          informationCollections: [ic]\n        })\n      }\n    })\n\n    return formattedInformationCollections\n  }\n\n  async create(\n    createInformationCollectionDto: CreateInformationCollectionDto\n  ): Promise {\n    const { recopilationId, categoryId, departmentId } =\n      createInformationCollectionDto\n\n    const [recopilation, category, department] = await Promise.all([\n      this.recopilationRepository.findOneByOrFail({\n        id: recopilationId\n      }),\n      this.categoryRepository.findOneByOrFail({ id: categoryId }),\n      this.departmentRepository.findOneByOrFail({ id: departmentId })\n    ])\n\n    const informationCollection = this.informationCollectionsRepository.create({\n      ...createInformationCollectionDto,\n      recopilation,\n      category,\n      department\n    })\n\n    const data = {\n      departmentId: department.id,\n      departmentName: department.fullName,\n      recopilationId: recopilation.id,\n      recopilationName: recopilation.name,\n      categoryId: category.id,\n      categoryName: category.name\n    }\n\n    const notificationDTO = {\n      data: data,\n      type: NOTIFICATION_TYPES.INFORMATION_COLLECTION_CREATION,\n      userId: department.id\n    }\n    await this.notificationsService.createAll(notificationDTO)\n\n    return await this.informationCollectionsRepository.save(\n      informationCollection\n    )\n  }\n\n  async update(\n    id: number,\n    updateInformationCollectionDto: UpdateInformationCollectionDto,\n    notifyCoordinators: boolean\n  ): Promise {\n    const { recopilationId, categoryId, departmentId } =\n      updateInformationCollectionDto\n\n    const [recopilation, category, department] = await Promise.all([\n      this.recopilationRepository.findOneBy({\n        id: recopilationId\n      }),\n      this.categoryRepository.findOneBy({ id: categoryId }),\n      this.departmentRepository.findOneBy({ id: departmentId })\n    ])\n\n    const dataToUpdate: Record = {}\n\n    if (updateInformationCollectionDto.name) {\n      dataToUpdate.name = updateInformationCollectionDto.name\n    }\n    if (updateInformationCollectionDto.summary) {\n      dataToUpdate.summary = updateInformationCollectionDto.summary\n    }\n    if (updateInformationCollectionDto.isApproved) {\n      dataToUpdate.isApproved = updateInformationCollectionDto.isApproved\n    }\n    if (updateInformationCollectionDto.recopilationId) {\n      dataToUpdate.recopilation = recopilation\n    }\n    if (updateInformationCollectionDto.categoryId) {\n      dataToUpdate.category = category\n    }\n    if (updateInformationCollectionDto.departmentId) {\n      dataToUpdate.department = department\n    }\n\n    await this.informationCollectionsRepository.update(id, dataToUpdate)\n\n    const collectionData =\n      await this.informationCollectionsRepository.findOneByOrFail({ id })\n    const data = {\n      collectionId: collectionData.id,\n      collectionName: collectionData.name,\n      departmentId: department.id,\n      departmentName: department.fullName,\n      recopilationId: recopilation.id,\n      recopilationName: recopilation.name,\n      categoryId: category.id,\n      categoryName: category.name\n    }\n\n    if (notifyCoordinators) {\n      const notificationDTO = {\n        data: data,\n        type: NOTIFICATION_TYPES.INFORMATION_COLLECTION_EDITION,\n        userId: department.id\n      }\n      await this.notificationsService.createAll(notificationDTO)\n    }\n\n    return this.informationCollectionsRepository.findOneByOrFail({ id })\n  }\n\n  async remove(id: number): Promise {\n    await this.informationCollectionsRepository.delete(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Link.html":{"url":"classes/Link.html","title":"class - Link","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Link\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/entities/link.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                externalLink\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        externalLink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/entities/link.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ChildEntity, Column } from 'typeorm'\nimport { Evidence } from './evidence.entity'\nimport { EvidenceType } from '../evidences.constants'\n\n@ChildEntity(EvidenceType.LINK)\nexport class Link extends Evidence {\n  @Column({ type: 'text' })\n  externalLink: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LinksController.html":{"url":"controllers/LinksController.html","title":"controller - LinksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LinksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/link.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                links\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEvidenceDto: CreateEvidenceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/link.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEvidenceDto\n                                            \n                                                            CreateEvidenceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/link.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/link.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/link.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateEvidenceDto: UpdateEvidenceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/evidences/link.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateEvidenceDto\n                                            \n                                                            UpdateEvidenceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  HttpStatus,\n  HttpCode,\n  Query,\n  Patch\n} from '@nestjs/common'\nimport { LinksService } from './link.service'\nimport { CreateEvidenceDto } from './dto/create-evidence.dto'\nimport { UpdateEvidenceDto } from './dto/update-evidence.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-evidences-by-param.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Links')\n@Controller('links')\n@Roles(Role.Coordinator, Role.Admin, Role.Department)\nexport class LinksController {\n  constructor(private readonly linksService: LinksService) {}\n\n  @Get()\n  async findAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { links, count } = await this.linksService.findAll({\n      page,\n      itemsPerPage,\n      orderBy,\n      orderType,\n      filters\n    })\n\n    const paginatedItems = constructPaginatedItemsDto(\n      links,\n      count,\n      page,\n      itemsPerPage\n    )\n    return paginatedItems\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    const evidence = await this.linksService.findOne(+id)\n    return evidence\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async create(@Body() createEvidenceDto: CreateEvidenceDto) {\n    const newEvidence = await this.linksService.create(createEvidenceDto)\n    return newEvidence\n  }\n\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateEvidenceDto: UpdateEvidenceDto\n  ) {\n    const updatedEvidence = await this.linksService.update(\n      +id,\n      updateEvidenceDto\n    )\n\n    return updatedEvidence\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string) {\n    await this.linksService.remove(+id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LinksService.html":{"url":"injectables/LinksService.html","title":"injectable - LinksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LinksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/link.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(linkRepository: Repository, informationCollectionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/evidences/link.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        linkRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        informationCollectionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createEvidenceDto: CreateEvidenceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/link.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createEvidenceDto\n                                            \n                                                            CreateEvidenceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/link.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/link.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/link.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateEvidenceDto: UpdateEvidenceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/evidences/link.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateEvidenceDto\n                                            \n                                                            UpdateEvidenceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { Link } from './entities/link.entity'\nimport { CreateEvidenceDto } from './dto/create-evidence.dto'\nimport { UpdateEvidenceDto } from './dto/update-evidence.dto'\nimport { InformationCollection } from '../information-collections/entities/information-collection.entity'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-evidences-by-param.dto'\n\n@Injectable()\nexport class LinksService {\n  constructor(\n    @InjectRepository(Link)\n    private readonly linkRepository: Repository,\n    @InjectRepository(InformationCollection)\n    private readonly informationCollectionRepository: Repository\n  ) {}\n\n  async findAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [links, count] = await this.linkRepository.findAndCount({\n      relations: ['collection'],\n      take: itemsPerPage,\n      skip: (page - 1) * itemsPerPage,\n      order: { [orderBy]: orderType },\n      where: parseFiltersToTypeOrm(filters)\n    })\n\n    return { links, count }\n  }\n\n  async findOne(id: number): Promise {\n    return this.linkRepository.findOne({\n      where: { id },\n      relations: ['collection']\n    })\n  }\n\n  async create(createEvidenceDto: CreateEvidenceDto): Promise {\n    const coleccion =\n      await this.informationCollectionRepository.findOneByOrFail({\n        id: createEvidenceDto.collectionId\n      })\n\n    if (!coleccion) {\n      throw new NotFoundException('Collection not found')\n    }\n\n    const evidence = this.linkRepository.create({\n      ...createEvidenceDto,\n      collection: coleccion\n    })\n    return this.linkRepository.save(evidence)\n  }\n\n  async update(\n    id: number,\n    updateEvidenceDto: UpdateEvidenceDto\n  ): Promise {\n    await this.linkRepository.update(id, updateEvidenceDto)\n    return this.linkRepository.findOneByOrFail({ id })\n  }\n\n  async remove(id: number): Promise {\n    await this.linkRepository.delete(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginAuthDto.html":{"url":"classes/LoginAuthDto.html","title":"class - LoginAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/dto/login-auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/login-auth.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/login-auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator'\n\nexport class LoginAuthDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string\n\n  @IsString()\n  @IsNotEmpty()\n  password: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailsModule.html":{"url":"modules/MailsModule.html","title":"module - MailsModule","body":"\n                   \n\n\n\n\n    Modules\n    MailsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailsModule\n\n\n\ncluster_MailsModule_providers\n\n\n\n\nMailsService\n\nMailsService\n\n\n\nMailsModule\n\nMailsModule\n\nMailsModule -->\n\nMailsService->MailsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/mails/mails.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { MailsService } from './mails.service'\nimport { MailerModule } from '@nestjs-modules/mailer'\nimport { ConfigService, ConfigModule } from 'nestjs-config'\n\n@Module({\n  imports: [\n    ConfigModule,\n    MailerModule.forRootAsync({\n      useFactory: (config: ConfigService) => ({\n        transport: {\n          host: config.get('host').HOST,\n          secure: false,\n          auth: {\n            user: config.get('user').USER,\n            pass: config.get('password').PASSWORD\n          }\n        },\n        defaults: {\n          from: `\"Green Summary\" `\n        }\n      }),\n      inject: [ConfigService]\n    })\n  ],\n  providers: [MailsService]\n})\nexport class MailsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailsService.html":{"url":"injectables/MailsService.html","title":"injectable - MailsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/mails/mails.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMail\n                            \n                            \n                                    Async\n                                sendNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/mails/mails.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMail(user: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/mails/mails.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendNotification(user: string, notification: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/mails/mails.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { MailerService } from '@nestjs-modules/mailer'\nimport { constructLoginDataMail } from './login-data-mail'\n\n@Injectable()\nexport class MailsService {\n  constructor(private mailerService: MailerService) {}\n\n  async sendMail(user: string, password: string) {\n    await this.mailerService.sendMail({\n      to: user,\n      subject: 'Datos para iniciar sesión',\n      html: constructLoginDataMail(user, password)\n    })\n  }\n\n  async sendNotification(user: string, notification: string) {\n    await this.mailerService.sendMail({\n      to: user,\n      subject: 'Notificación',\n      html: `${notification}`\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Notification.html":{"url":"entities/Notification.html","title":"entity - Notification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/notifications/entities/notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                seen\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp', default: () => CURRENT_TIMESTAMP(6)})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/notifications/entities/notification.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: true, transformer: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/notifications/entities/notification.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/notifications/entities/notification.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        seen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/notifications/entities/notification.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', nullable: false, enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/notifications/entities/notification.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.notifications)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/notifications/entities/notification.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from 'src/core/users/entities/user.entity'\nimport {\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  Entity,\n  CreateDateColumn\n} from 'typeorm'\nimport {\n  NOTIFICATION_TYPES,\n  NotificationType\n} from '../notifications.constants'\n\n@Entity({ name: 'notifications' })\nexport class Notification {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({ type: 'boolean', default: false, nullable: false })\n  seen: boolean\n\n  @Column({\n    type: 'enum',\n    nullable: false,\n    enum: Object.values(NOTIFICATION_TYPES)\n  })\n  type: NotificationType\n\n  @Column({\n    type: 'json',\n    nullable: true,\n    transformer: {\n      to: (data: Record) => JSON.stringify(data),\n      from: (data: string) => JSON.parse(data)\n    }\n  })\n  data: Record\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP(6)'\n  })\n  createdAt: Date\n\n  @ManyToOne(() => User, (user) => user.notifications)\n  user: User\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationsController.html":{"url":"controllers/NotificationsController.html","title":"controller - NotificationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/notifications/notifications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                getOne\n                            \n                            \n                                    \n                                    Async\n                                getOwn\n                            \n                            \n                                    \n                                    Async\n                                getOwnUnseen\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createNotificationDto: CreateNotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/core/notifications/notifications.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createNotificationDto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/core/notifications/notifications.controller.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/notifications/notifications.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/notifications/notifications.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOwn\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOwn(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/own')\n                \n            \n\n                    \n                        \n                            Defined in src/core/notifications/notifications.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOwnUnseen\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOwnUnseen(request: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/own/unseen')\n                \n            \n\n                    \n                        \n                            Defined in src/core/notifications/notifications.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/notifications/notifications.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  HttpCode,\n  Query,\n  HttpStatus,\n  Patch,\n  Req\n} from '@nestjs/common'\nimport { NotificationsService } from './notifications.service'\nimport { CreateNotificationDto } from './dto/create-notification.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-notifications-by-param.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Notifications')\n@Controller('notifications')\n@Roles(Role.Coordinator, Role.Admin, Role.Department)\nexport class NotificationsController {\n  constructor(private readonly notificationsService: NotificationsService) {}\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async create(@Body() createNotificationDto: CreateNotificationDto) {\n    const createdNotification = await this.notificationsService.create(\n      createNotificationDto\n    )\n    return createdNotification\n  }\n\n  @Get()\n  async getAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { notifications, count } = await this.notificationsService.getAll({\n      page,\n      itemsPerPage,\n      orderBy,\n      orderType,\n      filters\n    })\n\n    const paginatedItems = constructPaginatedItemsDto(\n      notifications,\n      count,\n      page,\n      itemsPerPage\n    )\n    return paginatedItems\n  }\n\n  @Get('/own')\n  async getOwn(@Req() request: Request) {\n    const notifications = await this.notificationsService.getByUserId(\n      request['user'].id\n    )\n    return notifications\n  }\n\n  @Get('/own/unseen')\n  async getOwnUnseen(@Req() request: Request) {\n    const notifications = await this.notificationsService.getByUserId(\n      request['user'].id,\n      true\n    )\n    return notifications\n  }\n\n  @Get('/:id')\n  async getOne(@Param('id') id: string) {\n    const notification = await this.notificationsService.getOne(Number(id))\n    return notification\n  }\n\n  @Patch('/:id')\n  async update(@Param('id') id: string) {\n    const notification = await this.notificationsService.update(Number(id))\n    return notification\n  }\n\n  @Delete('/:id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async delete(@Param('id') id: string) {\n    await this.notificationsService.delete(Number(id))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationsModule.html":{"url":"modules/NotificationsModule.html","title":"module - NotificationsModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_providers\n\n\n\n\nNotificationsService\n\nNotificationsService\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/notifications/notifications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { NotificationsService } from './notifications.service'\nimport { NotificationsController } from './notifications.controller'\nimport { Notification } from './entities/notification.entity'\nimport { User } from '../users/entities/user.entity'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Notification, User])],\n  controllers: [NotificationsController],\n  providers: [NotificationsService]\n})\nexport class NotificationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationsService.html":{"url":"injectables/NotificationsService.html","title":"injectable - NotificationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/notifications/notifications.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createAll\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getByUserId\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/notifications/notifications.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createNotificationDto: CreateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/notifications/notifications.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createNotificationDto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAll(createNotificationDto: CreateNotificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/notifications/notifications.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createNotificationDto\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/notifications/notifications.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/notifications/notifications.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByUserId(userId: number, unseen: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/notifications/notifications.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                unseen\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/notifications/notifications.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/notifications/notifications.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { CreateNotificationDto } from './dto/create-notification.dto'\nimport { Notification } from './entities/notification.entity'\nimport { User } from '../users/entities/user.entity'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-notifications-by-param.dto'\n\n@Injectable()\nexport class NotificationsService {\n  constructor(\n    @InjectRepository(Notification)\n    private readonly notificationRepository: Repository,\n    @InjectRepository(User)\n    private readonly userRepository: Repository\n  ) {}\n\n  async create(\n    createNotificationDto: CreateNotificationDto\n  ): Promise {\n    const user = await this.userRepository.findOneByOrFail({\n      id: createNotificationDto.userId\n    })\n\n    const notification = this.notificationRepository.create({\n      ...createNotificationDto,\n      user: user\n    })\n\n    return this.notificationRepository.save(notification)\n  }\n\n  async createAll(createNotificationDto: CreateNotificationDto): Promise {\n    const users = await this.userRepository.find({\n      where: {\n        type: 'coordinator'\n      }\n    })\n\n    let notification\n    users.forEach((user) => {\n      notification = this.notificationRepository.create({\n        data: createNotificationDto.data,\n        type: createNotificationDto.type,\n        user: user\n      })\n      this.notificationRepository.save(notification)\n    })\n  }\n\n  async getAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [notifications, count] =\n      await this.notificationRepository.findAndCount({\n        relations: ['user'],\n        take: itemsPerPage,\n        skip: (page - 1) * itemsPerPage,\n        order: { [orderBy]: orderType },\n        where: parseFiltersToTypeOrm(filters)\n      })\n\n    return { notifications, count }\n  }\n\n  async getByUserId(userId: number, unseen: boolean = false) {\n    if (!unseen) {\n      const notifications = await this.notificationRepository.find({\n        where: {\n          user: {\n            id: userId\n          }\n        },\n        order: {\n          createdAt: 'DESC'\n        }\n      })\n\n      return notifications\n    } else {\n      const unseenNotifications = await this.notificationRepository.find({\n        where: {\n          user: {\n            id: userId\n          },\n          seen: false\n        },\n        order: {\n          createdAt: 'DESC'\n        }\n      })\n\n      return unseenNotifications\n    }\n  }\n\n  async getOne(id: number): Promise {\n    const notification = await this.notificationRepository.findOneOrFail({\n      where: { id },\n      relations: ['user']\n    })\n\n    return notification\n  }\n\n  async update(id: number): Promise {\n    const change = await this.notificationRepository.findOneOrFail({\n      where: { id }\n    })\n    change.seen = true\n\n    await this.notificationRepository.update(id, change)\n\n    const notification = await this.notificationRepository.findOneOrFail({\n      where: { id },\n      relations: ['user']\n    })\n\n    return notification\n  }\n\n  async delete(id: number): Promise {\n    await this.notificationRepository.findOneByOrFail({ id })\n\n    await this.notificationRepository.delete(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByParamDto.html":{"url":"classes/OrderByParamDto.html","title":"class - OrderByParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/criterion/dto/order-criteria-by-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortableField\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SORTABLE_FIELDS})@ApiPropertyOptional()@IsEnum(SORTABLE_FIELDS)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/criterion/dto/order-criteria-by-param.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsEnum, IsOptional, IsString } from 'class-validator'\nimport { SORTABLE_FIELDS, SortableField } from '../criterion.constants'\n\nexport class OrderByParamDto {\n  @ApiProperty({ enum: SORTABLE_FIELDS })\n  @ApiPropertyOptional()\n  @IsEnum(SORTABLE_FIELDS)\n  @IsString()\n  @IsOptional()\n  orderBy: SortableField\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByParamDto-1.html":{"url":"classes/OrderByParamDto-1.html","title":"class - OrderByParamDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categorized-criteria/dto/order-categorized-criteria-by-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortableField\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SORTABLE_FIELDS})@ApiPropertyOptional()@IsEnum(SORTABLE_FIELDS)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categorized-criteria/dto/order-categorized-criteria-by-param.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsEnum, IsOptional, IsString } from 'class-validator'\nimport {\n  SORTABLE_FIELDS,\n  SortableField\n} from '../categorized-criteria.constants'\n\nexport class OrderByParamDto {\n  @ApiProperty({ enum: SORTABLE_FIELDS })\n  @ApiPropertyOptional()\n  @IsEnum(SORTABLE_FIELDS)\n  @IsString()\n  @IsOptional()\n  orderBy: SortableField\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByParamDto-10.html":{"url":"classes/OrderByParamDto-10.html","title":"class - OrderByParamDto-10","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/dto/order-users-by-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortableField\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SORTABLE_FIELDS})@ApiPropertyOptional()@IsEnum(SORTABLE_FIELDS)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/dto/order-users-by-param.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsEnum, IsOptional, IsString } from 'class-validator'\nimport { SORTABLE_FIELDS, SortableField } from '../users.constants'\n\nexport class OrderByParamDto {\n  @ApiProperty({ enum: SORTABLE_FIELDS })\n  @ApiPropertyOptional()\n  @IsEnum(SORTABLE_FIELDS)\n  @IsString()\n  @IsOptional()\n  orderBy: SortableField\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByParamDto-2.html":{"url":"classes/OrderByParamDto-2.html","title":"class - OrderByParamDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categories/dto/order-categories-by-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortableField\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SORTABLE_FIELDS})@ApiPropertyOptional()@IsEnum(SORTABLE_FIELDS)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/dto/order-categories-by-param.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsEnum, IsOptional, IsString } from 'class-validator'\nimport { SORTABLE_FIELDS, SortableField } from '../categories.constants'\n\nexport class OrderByParamDto {\n  @ApiProperty({ enum: SORTABLE_FIELDS })\n  @ApiPropertyOptional()\n  @IsEnum(SORTABLE_FIELDS)\n  @IsString()\n  @IsOptional()\n  orderBy: SortableField\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByParamDto-3.html":{"url":"classes/OrderByParamDto-3.html","title":"class - OrderByParamDto-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/departments-per-recopilations/dto/order-departments-per-recopilations-by-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortableField\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SORTABLE_FIELDS})@ApiPropertyOptional()@IsEnum(SORTABLE_FIELDS)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/departments-per-recopilations/dto/order-departments-per-recopilations-by-param.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsEnum, IsOptional, IsString } from 'class-validator'\nimport {\n  SORTABLE_FIELDS,\n  SortableField\n} from '../departments-per-recopilations.constants'\n\nexport class OrderByParamDto {\n  @ApiProperty({ enum: SORTABLE_FIELDS })\n  @ApiPropertyOptional()\n  @IsEnum(SORTABLE_FIELDS)\n  @IsString()\n  @IsOptional()\n  orderBy: SortableField\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByParamDto-4.html":{"url":"classes/OrderByParamDto-4.html","title":"class - OrderByParamDto-4","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/dto/order-evidences-by-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortableField\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SORTABLE_FIELDS})@ApiPropertyOptional()@IsEnum(SORTABLE_FIELDS)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/evidences/dto/order-evidences-by-param.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsEnum, IsOptional, IsString } from 'class-validator'\nimport { SORTABLE_FIELDS, SortableField } from '../evidences.constants'\n\nexport class OrderByParamDto {\n  @ApiProperty({ enum: SORTABLE_FIELDS })\n  @ApiPropertyOptional()\n  @IsEnum(SORTABLE_FIELDS)\n  @IsString()\n  @IsOptional()\n  orderBy: SortableField\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByParamDto-5.html":{"url":"classes/OrderByParamDto-5.html","title":"class - OrderByParamDto-5","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/indicators/dto/order-indicators-by-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortableField\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SORTABLE_FIELDS})@ApiPropertyOptional()@IsEnum(SORTABLE_FIELDS)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/dto/order-indicators-by-param.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsEnum, IsOptional, IsString } from 'class-validator'\nimport { SORTABLE_FIELDS, SortableField } from '../indicators.constants'\n\nexport class OrderByParamDto {\n  @ApiProperty({ enum: SORTABLE_FIELDS })\n  @ApiPropertyOptional()\n  @IsEnum(SORTABLE_FIELDS)\n  @IsString()\n  @IsOptional()\n  orderBy: SortableField\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByParamDto-6.html":{"url":"classes/OrderByParamDto-6.html","title":"class - OrderByParamDto-6","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/information-collections/dto/order-information-collections-by-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortableField\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SORTABLE_FIELDS})@ApiPropertyOptional()@IsEnum(SORTABLE_FIELDS)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/dto/order-information-collections-by-param.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsEnum, IsOptional, IsString } from 'class-validator'\nimport {\n  SORTABLE_FIELDS,\n  SortableField\n} from '../information-collections.constants'\n\nexport class OrderByParamDto {\n  @ApiProperty({ enum: SORTABLE_FIELDS })\n  @ApiPropertyOptional()\n  @IsEnum(SORTABLE_FIELDS)\n  @IsString()\n  @IsOptional()\n  orderBy: SortableField\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByParamDto-7.html":{"url":"classes/OrderByParamDto-7.html","title":"class - OrderByParamDto-7","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/dto/order-recopilations-by-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortableField\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SORTABLE_FIELDS})@ApiPropertyOptional()@IsEnum(SORTABLE_FIELDS)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/order-recopilations-by-param.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsEnum, IsOptional, IsString } from 'class-validator'\nimport { SORTABLE_FIELDS, SortableField } from '../recopilations.constants'\n\nexport class OrderByParamDto {\n  @ApiProperty({ enum: SORTABLE_FIELDS })\n  @ApiPropertyOptional()\n  @IsEnum(SORTABLE_FIELDS)\n  @IsString()\n  @IsOptional()\n  orderBy: SortableField\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByParamDto-8.html":{"url":"classes/OrderByParamDto-8.html","title":"class - OrderByParamDto-8","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/notifications/dto/order-notifications-by-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortableField\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SORTABLE_FIELDS})@ApiPropertyOptional()@IsEnum(SORTABLE_FIELDS)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/notifications/dto/order-notifications-by-param.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsEnum, IsOptional, IsString } from 'class-validator'\nimport { SORTABLE_FIELDS, SortableField } from '../notifications.constants'\n\nexport class OrderByParamDto {\n  @ApiProperty({ enum: SORTABLE_FIELDS })\n  @ApiPropertyOptional()\n  @IsEnum(SORTABLE_FIELDS)\n  @IsString()\n  @IsOptional()\n  orderBy: SortableField\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByParamDto-9.html":{"url":"classes/OrderByParamDto-9.html","title":"class - OrderByParamDto-9","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recommendations/dto/order-recommendations-by-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                orderBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SortableField\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SORTABLE_FIELDS})@ApiPropertyOptional()@IsEnum(SORTABLE_FIELDS)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recommendations/dto/order-recommendations-by-param.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsEnum, IsOptional, IsString } from 'class-validator'\nimport { SORTABLE_FIELDS, SortableField } from '../recommendations.constants'\n\nexport class OrderByParamDto {\n  @ApiProperty({ enum: SORTABLE_FIELDS })\n  @ApiPropertyOptional()\n  @IsEnum(SORTABLE_FIELDS)\n  @IsString()\n  @IsOptional()\n  orderBy: SortableField\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderTypeParamDto.html":{"url":"classes/OrderTypeParamDto.html","title":"class - OrderTypeParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderTypeParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/sorting/order-type-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                orderType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        orderType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: undefined})@ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/sorting/order-type-param.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'\nimport { IsOptional, IsString } from 'class-validator'\n\nexport class OrderTypeParamDto {\n  @ApiProperty({ enum: ['ASC', 'DESC'] })\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  orderType: 'ASC' | 'DESC'\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedItems.html":{"url":"classes/PaginatedItems.html","title":"class - PaginatedItems","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedItems\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/pagination/paginated-items.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentPage\n                            \n                            \n                                hasNextPage\n                            \n                            \n                                hasPreviousPage\n                            \n                            \n                                items\n                            \n                            \n                                itemsPerPage\n                            \n                            \n                                totalItems\n                            \n                            \n                                totalPages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/pagination/paginated-items.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/pagination/paginated-items.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/pagination/paginated-items.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/pagination/paginated-items.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        itemsPerPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/pagination/paginated-items.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/pagination/paginated-items.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/pagination/paginated-items.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PaginatedItems {\n  currentPage: number\n  itemsPerPage: number\n  hasNextPage: boolean\n  hasPreviousPage: boolean\n  totalPages: number\n  totalItems: number\n  items: T[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/pagination/pagination-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                itemsPerPage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        itemsPerPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Min(1)@IsNumber()@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/pagination/pagination-params.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@Min(1)@IsNumber()@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/pagination/pagination-params.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger'\nimport { Type } from 'class-transformer'\nimport { IsNumber, IsOptional, Min } from 'class-validator'\n\nexport class PaginationParams {\n  @ApiPropertyOptional()\n  @Min(1)\n  @IsNumber()\n  @Type(() => Number)\n  @IsOptional()\n  itemsPerPage: number\n\n  @ApiPropertyOptional()\n  @Min(1)\n  @IsNumber()\n  @Type(() => Number)\n  @IsOptional()\n  page: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecommendCategoriesDto.html":{"url":"classes/RecommendCategoriesDto.html","title":"class - RecommendCategoriesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecommendCategoriesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/dto/recommend-categories.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                departments\n                            \n                            \n                                    \n                                    \n                                recopilationId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        departments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DepartmentToBeRecommended[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested({each: true})@IsArray()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/recommend-categories.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        recopilationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/recommend-categories.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  ValidateNested\n} from 'class-validator'\nimport { Type } from 'class-transformer'\n\nexport class RecommendCategoriesDto {\n  @IsNumber()\n  @IsNotEmpty()\n  recopilationId: number\n\n  @ValidateNested({ each: true })\n  @IsArray()\n  @Type(() => DepartmentToBeRecommended)\n  departments: DepartmentToBeRecommended[]\n}\n\nexport class DepartmentToBeRecommended {\n  @IsNumber()\n  @IsNotEmpty()\n  departmentId: number\n\n  @ValidateNested({ each: true })\n  @ArrayNotEmpty()\n  @IsArray()\n  @IsNotEmpty()\n  @Type(() => CategoryToRecommend)\n  categories: CategoryToRecommend[]\n}\n\nexport class CategoryToRecommend {\n  @IsNumber()\n  @IsNotEmpty()\n  categoryId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Recommendation.html":{"url":"entities/Recommendation.html","title":"entity - Recommendation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Recommendation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recommendations/entities/recommendation.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                departmentPerRecopilation\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, category => category.recommendations)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recommendations/entities/recommendation.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        departmentPerRecopilation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DepartmentPerRecopilation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, departmentPerRecopilation => departmentPerRecopilation.recommendations, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recommendations/entities/recommendation.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recommendations/entities/recommendation.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, ManyToOne, PrimaryGeneratedColumn, Unique } from 'typeorm'\nimport { Category } from 'src/core/categories/entities/category.entity'\nimport { DepartmentPerRecopilation } from 'src/core/departments-per-recopilations/entities/departments-per-recopilation.entity'\n\n@Entity('recommendations')\n@Unique(['departmentPerRecopilation', 'category'])\nexport class Recommendation {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @ManyToOne(\n    () => DepartmentPerRecopilation,\n    (departmentPerRecopilation) => departmentPerRecopilation.recommendations,\n    { onDelete: 'CASCADE' }\n  )\n  departmentPerRecopilation: DepartmentPerRecopilation\n\n  @ManyToOne(() => Category, (category) => category.recommendations)\n  category: Category\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RecommendationsController.html":{"url":"controllers/RecommendationsController.html","title":"controller - RecommendationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RecommendationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recommendations/recommendations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                recommendations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createRecommendDto: CreateRecommendationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/core/recommendations/recommendations.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRecommendDto\n                                            \n                                                            CreateRecommendationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/recommendations/recommendations.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/recommendations/recommendations.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/core/recommendations/recommendations.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  HttpStatus,\n  Query,\n  HttpCode\n} from '@nestjs/common'\nimport { RecommendationsService } from './recommendations.service'\nimport { CreateRecommendationDto } from './dto/create-recommendation.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-recommendations-by-param.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Recommendations')\n@Controller('recommendations')\n@Roles(Role.Coordinator, Role.Admin)\nexport class RecommendationsController {\n  constructor(private readonly recommendService: RecommendationsService) {}\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async create(@Body() createRecommendDto: CreateRecommendationDto) {\n    try {\n      const result = await this.recommendService.create(createRecommendDto)\n      return result\n    } catch (e) {\n      console.log(e)\n      throw e\n    }\n  }\n\n  @Get()\n  async findAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { recommendations, count } = await this.recommendService.findAll({\n      page,\n      itemsPerPage,\n      orderBy,\n      orderType,\n      filters\n    })\n\n    const paginatedItems = constructPaginatedItemsDto(\n      recommendations,\n      count,\n      page,\n      itemsPerPage\n    )\n    return paginatedItems\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: number) {\n    const result = await this.recommendService.findOne(id)\n    return result\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: number) {\n    await this.recommendService.remove(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecommendationsModule.html":{"url":"modules/RecommendationsModule.html","title":"module - RecommendationsModule","body":"\n                   \n\n\n\n\n    Modules\n    RecommendationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecommendationsModule\n\n\n\ncluster_RecommendationsModule_providers\n\n\n\n\nMailsService\n\nMailsService\n\n\n\nRecommendationsModule\n\nRecommendationsModule\n\nRecommendationsModule -->\n\nMailsService->RecommendationsModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nRecommendationsModule -->\n\nNotificationsService->RecommendationsModule\n\n\n\n\n\nRecommendationsService\n\nRecommendationsService\n\nRecommendationsModule -->\n\nRecommendationsService->RecommendationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/recommendations/recommendations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailsService\n                        \n                        \n                            NotificationsService\n                        \n                        \n                            RecommendationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecommendationsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { RecommendationsService } from './recommendations.service'\nimport { RecommendationsController } from './recommendations.controller'\nimport { Recommendation } from './entities/recommendation.entity'\nimport { Category } from '../categories/entities/category.entity'\nimport { Department } from '../users/entities/department.entity'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\nimport { DepartmentPerRecopilation } from '../departments-per-recopilations/entities/departments-per-recopilation.entity'\nimport { NotificationsService } from '../notifications/notifications.service'\nimport { Notification } from '../notifications/entities/notification.entity'\nimport { User } from '../users/entities/user.entity'\nimport { MailsService } from '../mails/mails.service'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Recommendation,\n      Department,\n      Category,\n      Recopilation,\n      DepartmentPerRecopilation,\n      Notification,\n      User\n    ])\n  ],\n  providers: [RecommendationsService, NotificationsService, MailsService],\n  controllers: [RecommendationsController]\n})\nexport class RecommendationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecommendationsService.html":{"url":"injectables/RecommendationsService.html","title":"injectable - RecommendationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecommendationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recommendations/recommendations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recommendationsRepository: Repository, departmentsRepository: Repository, categoriesRepository: Repository, recopilationsRepository: Repository, departmentsPerRecopilationsRepository: Repository, notificationsService: NotificationsService, mailsService: MailsService)\n                    \n                \n                        \n                            \n                                Defined in src/core/recommendations/recommendations.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recommendationsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        departmentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recopilationsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        departmentsPerRecopilationsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notificationsService\n                                                  \n                                                        \n                                                                        NotificationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailsService\n                                                  \n                                                        \n                                                                        MailsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createRecommendationDto: CreateRecommendationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recommendations/recommendations.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createRecommendationDto\n                                            \n                                                            CreateRecommendationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recommendations/recommendations.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recommendations/recommendations.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recommendations/recommendations.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { Recommendation } from './entities/recommendation.entity'\nimport { CreateRecommendationDto } from './dto/create-recommendation.dto'\nimport { Category } from 'src/core/categories/entities/category.entity'\nimport { Department } from '../users/entities/department.entity'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-recommendations-by-param.dto'\nimport { DepartmentPerRecopilation } from '../departments-per-recopilations/entities/departments-per-recopilation.entity'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\nimport { NotificationsService } from '../notifications/notifications.service'\nimport { MailsService } from '../mails/mails.service'\nimport { NOTIFICATION_TYPES } from '../notifications/notifications.constants'\n\n@Injectable()\nexport class RecommendationsService {\n  constructor(\n    @InjectRepository(Recommendation)\n    private readonly recommendationsRepository: Repository,\n    @InjectRepository(Department)\n    private readonly departmentsRepository: Repository,\n    @InjectRepository(Category)\n    private readonly categoriesRepository: Repository,\n    @InjectRepository(Recopilation)\n    private readonly recopilationsRepository: Repository,\n    @InjectRepository(DepartmentPerRecopilation)\n    private readonly departmentsPerRecopilationsRepository: Repository,\n    private notificationsService: NotificationsService,\n    private mailsService: MailsService\n  ) {}\n\n  async create(\n    createRecommendationDto: CreateRecommendationDto\n  ): Promise {\n    const { recopilationId, departmentId, categoryId } = createRecommendationDto\n\n    const [departmentPerRecopilation, category] = await Promise.all([\n      this.departmentsPerRecopilationsRepository.findOneByOrFail({\n        department: { id: departmentId },\n        recopilation: { id: recopilationId }\n      }),\n      this.categoriesRepository.findOneByOrFail({\n        id: categoryId\n      })\n    ])\n\n    const recommendation = this.recommendationsRepository.create({\n      departmentPerRecopilation,\n      category\n    })\n\n    const notificationCategory =\n      await this.categoriesRepository.findOneByOrFail({ id: categoryId })\n    const data = {\n      categoryId: notificationCategory.id,\n      categoryName: notificationCategory.name\n    }\n    const notificationDTO = {\n      data: data,\n      type: NOTIFICATION_TYPES.RECOMMENDATION,\n      userId: departmentId\n    }\n    await this.notificationsService.create(notificationDTO)\n\n    const description = `Se te recomendó la categoría ${categoryId}`\n    const department = await this.departmentsRepository.findOneByOrFail({\n      id: departmentId\n    })\n    this.mailsService.sendNotification(department.email, description)\n\n    return this.recommendationsRepository.save(recommendation)\n  }\n\n  async findAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [recommendations, count] =\n      await this.recommendationsRepository.findAndCount({\n        relations: ['category', 'departmentPerRecopilation'],\n        take: itemsPerPage,\n        skip: (page - 1) * itemsPerPage,\n        order: { [orderBy]: orderType },\n        where: parseFiltersToTypeOrm(filters)\n      })\n\n    return { recommendations, count }\n  }\n\n  async findOne(id: number): Promise {\n    return await this.recommendationsRepository.findOneOrFail({\n      where: { id },\n      relations: ['categoria', 'departmentPerRecopilation']\n    })\n  }\n\n  async remove(id: number): Promise {\n    const recommend = await this.recommendationsRepository.findOneByOrFail({\n      id\n    })\n\n    await this.recommendationsRepository.remove(recommend)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Recopilation.html":{"url":"entities/Recopilation.html","title":"entity - Recopilation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Recopilation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/entities/recopilation.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                categorizedCriterion\n                            \n                            \n                                    \n                                departmentEndDate\n                            \n                            \n                                    \n                                departmentsPerRecopilation\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                endDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                indicatorsPerRecopilations\n                            \n                            \n                                    \n                                informationCollections\n                            \n                            \n                                    \n                                isReady\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categorizedCriterion\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CategorizedCriteria[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, categorizedCriteria => categorizedCriteria.recopilation)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/entities/recopilation.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        departmentEndDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/entities/recopilation.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        departmentsPerRecopilation\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DepartmentPerRecopilation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, departmentsPerRecopilation => departmentsPerRecopilation.recopilation)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/entities/recopilation.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/entities/recopilation.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/entities/recopilation.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/entities/recopilation.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        indicatorsPerRecopilations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IndicatorPerRecopilation[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, indicatorsPerRecopilations => indicatorsPerRecopilations.recopilation)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/entities/recopilation.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        informationCollections\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InformationCollection[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, informationCollection => informationCollection.recopilation)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/entities/recopilation.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isReady\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/entities/recopilation.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/entities/recopilation.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/entities/recopilation.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from 'typeorm'\nimport { IndicatorPerRecopilation } from 'src/core/indicators-per-recopilations/entities/indicator-per-recopilatio.entity'\nimport { CategorizedCriteria } from 'src/core/categorized-criteria/entities/categorized-criterion.entity'\nimport { DepartmentPerRecopilation } from 'src/core/departments-per-recopilations/entities/departments-per-recopilation.entity'\nimport { InformationCollection } from 'src/core/information-collections/entities/information-collection.entity'\n\n@Entity('recopilations')\nexport class Recopilation {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({ type: 'varchar', length: 30, nullable: false })\n  name: string\n\n  @Column({ type: 'text', nullable: false })\n  description: string\n\n  @Column({ type: 'date', nullable: false })\n  startDate: Date\n\n  @Column({ type: 'date', nullable: false })\n  departmentEndDate: Date\n\n  @Column({ type: 'date', nullable: false })\n  endDate: Date\n\n  @Column({ default: false })\n  isReady: boolean\n\n  @OneToMany(\n    () => IndicatorPerRecopilation,\n    (indicatorsPerRecopilations) => indicatorsPerRecopilations.recopilation\n  )\n  indicatorsPerRecopilations: IndicatorPerRecopilation[]\n\n  @OneToMany(\n    () => CategorizedCriteria,\n    (categorizedCriteria) => categorizedCriteria.recopilation\n  )\n  categorizedCriterion: CategorizedCriteria[]\n\n  @OneToMany(\n    () => InformationCollection,\n    (informationCollection) => informationCollection.recopilation\n  )\n  informationCollections: InformationCollection[]\n\n  @OneToMany(\n    () => DepartmentPerRecopilation,\n    (departmentsPerRecopilation) => departmentsPerRecopilation.recopilation\n  )\n  departmentsPerRecopilation: DepartmentPerRecopilation[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RecopilationDto.html":{"url":"interfaces/RecopilationDto.html","title":"interface - RecopilationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RecopilationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/dto/recopilation.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            departmentEndDate\n                                        \n                                \n                                \n                                        \n                                            departments\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            endDate\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            indicators\n                                        \n                                \n                                \n                                        \n                                            isReady\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            startDate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        departmentEndDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        departmentEndDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        departments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        departments:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        indicators\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        indicators:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isReady\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isReady:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category } from 'src/core/categories/entities/category.entity'\nimport { Criteria } from 'src/core/criterion/entities/criteria.entity'\nimport { Indicator } from 'src/core/indicators/entities/indicator.entity'\nimport { Department } from 'src/core/users/entities/department.entity'\n\nexport interface RecopilationDto {\n  id: number\n  name: string\n  description: string\n  startDate: Date\n  endDate: Date\n  departmentEndDate: Date\n  isReady: boolean\n  departments: {\n    department: Department\n    recommendedCategories: Category[]\n  }[]\n  indicators: {\n    indicator: Indicator\n    criteria: {\n      criterion: Criteria\n      category: Category\n    }[]\n  }[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RecopilationsController.html":{"url":"controllers/RecopilationsController.html","title":"controller - RecopilationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RecopilationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/recopilations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                recopilations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findActive\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOneDetailed\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOneMatrix\n                            \n                            \n                                    \n                                    \n                                    Async\n                                recommendCategoriesToDepartments\n                            \n                            \n                                    \n                                    \n                                    Async\n                                relateIndicatorsToRecopilation\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                setAsReady\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateOrCreate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(recopilationData: CreateRecopilationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin)@Post()@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationData\n                                            \n                                                            CreateRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    findActive(request: Request, undefined: OrderByParamDto, undefined: OrderTypeParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin, Role.Department)@Get('active')\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin, Role.Department)@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin, Role.Department)@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOneDetailed\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneDetailed(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin, Role.Department)@Get(':id/detailed')\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOneMatrix\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneMatrix(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin, Role.Department)@Get(':id/matrix')\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        recommendCategoriesToDepartments\n                        \n                    \n                \n            \n            \n                \n                        \n                    recommendCategoriesToDepartments(recommendCategoriesDto: RecommendCategoriesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin)@Put('recommend-categories')\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recommendCategoriesDto\n                                            \n                                                            RecommendCategoriesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        relateIndicatorsToRecopilation\n                        \n                    \n                \n            \n            \n                \n                        \n                    relateIndicatorsToRecopilation(relateIndicatorsToRecopilationDto: RelateIndicatorsToRecopilationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin)@Put('relate-indicators')\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                relateIndicatorsToRecopilationDto\n                                            \n                                                            RelateIndicatorsToRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin)@Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        setAsReady\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAsReady(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin)@Patch(':id/set-as-ready')\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:195\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, recopilationData: UpdateRecopilationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                recopilationData\n                                            \n                                                            UpdateRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateOrCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOrCreate(recopilationData: UpdateRecopilationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.Coordinator, Role.Admin)@Put()\n                \n            \n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationData\n                                            \n                                                            UpdateRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  HttpStatus,\n  HttpCode,\n  Query,\n  Patch,\n  Put,\n  Req\n} from '@nestjs/common'\nimport { RecopilationsService } from './recopilations.service'\nimport { CreateRecopilationDto } from './dto/create-recopilation.dto'\nimport { UpdateRecopilationDto } from './dto/update-recopilation.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-recopilations-by-param.dto'\nimport { RelateIndicatorsToRecopilationDto } from './dto/relate-indicators-to-recopilation.dto'\nimport { RecommendCategoriesDto } from './dto/recommend-categories.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\nimport { Repository } from 'typeorm'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Recopilation } from './entities/recopilation.entity'\n\n@ApiTags('Recopilations')\n@Controller('recopilations')\nexport class RecopilationsController {\n  constructor(\n    private readonly recopilationsService: RecopilationsService,\n    @InjectRepository(Recopilation)\n    private readonly recopilationsRepository: Repository\n  ) {}\n\n  @Roles(Role.Coordinator, Role.Admin, Role.Department)\n  @Get()\n  async findAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { recopilation, count } = await this.recopilationsService.findAll({\n      page,\n      itemsPerPage,\n      orderBy,\n      orderType,\n      filters\n    })\n\n    const paginatedItems = constructPaginatedItemsDto(\n      recopilation,\n      count,\n      page,\n      itemsPerPage\n    )\n    return paginatedItems\n  }\n\n  @Roles(Role.Coordinator, Role.Admin, Role.Department)\n  @Get('active')\n  async findActive(\n    @Req() request: Request,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto\n  ) {\n    let departmentId: number | undefined = undefined\n\n    if (request['user'].type === 'department') {\n      departmentId = request['user'].id\n    }\n\n    const activeRecopilations =\n      await this.recopilationsService.getActiveRecopilations(\n        {\n          orderBy,\n          orderType\n        },\n        departmentId\n      )\n\n    return activeRecopilations\n  }\n\n  @Roles(Role.Coordinator, Role.Admin, Role.Department)\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    const recopilation = await this.recopilationsService.findOne(+id)\n\n    return recopilation\n  }\n\n  @Roles(Role.Coordinator, Role.Admin, Role.Department)\n  @Get(':id/detailed')\n  async findOneDetailed(@Param('id') id: string) {\n    const recopilation = await this.recopilationsService.findOneDetailed(+id)\n\n    return recopilation\n  }\n\n  @Roles(Role.Coordinator, Role.Admin, Role.Department)\n  @Get(':id/matrix')\n  async findOneMatrix(@Param('id') id: string) {\n    const recopilation = await this.recopilationsService.findOneMatrix(+id)\n\n    return recopilation\n  }\n\n  @Roles(Role.Coordinator, Role.Admin)\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  async create(@Body() recopilationData: CreateRecopilationDto) {\n    const createdRecopilation =\n      await this.recopilationsService.create(recopilationData)\n\n    return createdRecopilation\n  }\n\n  @Roles(Role.Coordinator, Role.Admin)\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() recopilationData: UpdateRecopilationDto\n  ) {\n    const updatedRecopilation = await this.recopilationsService.update(\n      +id,\n      recopilationData\n    )\n\n    return updatedRecopilation\n  }\n\n  @Roles(Role.Coordinator, Role.Admin)\n  @Put()\n  async updateOrCreate(@Body() recopilationData: UpdateRecopilationDto) {\n    if (!recopilationData.id) {\n      return await this.recopilationsService.create(\n        recopilationData as CreateRecopilationDto\n      )\n    }\n\n    const updatedRecopilation = await this.recopilationsService.update(\n      recopilationData.id,\n      recopilationData\n    )\n\n    return updatedRecopilation\n  }\n\n  @Roles(Role.Coordinator, Role.Admin)\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string) {\n    return await this.recopilationsService.remove(+id)\n  }\n\n  @Roles(Role.Coordinator, Role.Admin)\n  @Put('relate-indicators')\n  async relateIndicatorsToRecopilation(\n    @Body() relateIndicatorsToRecopilationDto: RelateIndicatorsToRecopilationDto\n  ) {\n    try {\n      return await this.recopilationsService.relateToIndicators(\n        relateIndicatorsToRecopilationDto\n      )\n    } catch (e) {\n      console.log(e)\n      throw e\n    }\n  }\n\n  @Roles(Role.Coordinator, Role.Admin)\n  @Put('recommend-categories')\n  async recommendCategoriesToDepartments(\n    @Body() recommendCategoriesDto: RecommendCategoriesDto\n  ) {\n    try {\n      return await this.recopilationsService.recommendCategories(\n        recommendCategoriesDto\n      )\n    } catch (e) {\n      console.log(e)\n      throw e\n    }\n  }\n\n  @Roles(Role.Coordinator, Role.Admin)\n  @Patch(':id/set-as-ready')\n  async setAsReady(@Param('id') id: string) {\n    const recopilation = await this.recopilationsRepository.findOneByOrFail({\n      id: +id\n    })\n\n    recopilation.isReady = true\n\n    await this.recopilationsRepository.save(recopilation)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecopilationsModule.html":{"url":"modules/RecopilationsModule.html","title":"module - RecopilationsModule","body":"\n                   \n\n\n\n\n    Modules\n    RecopilationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecopilationsModule\n\n\n\ncluster_RecopilationsModule_providers\n\n\n\n\nRecopilationsService\n\nRecopilationsService\n\n\n\nRecopilationsModule\n\nRecopilationsModule\n\nRecopilationsModule -->\n\nRecopilationsService->RecopilationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/recopilations/recopilations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecopilationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecopilationsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { RecopilationsService } from './recopilations.service'\nimport { RecopilationsController } from './recopilations.controller'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { Recopilation } from './entities/recopilation.entity'\nimport { Indicator } from '../indicators/entities/indicator.entity'\nimport { Criteria } from '../criterion/entities/criteria.entity'\nimport { Category } from '../categories/entities/category.entity'\nimport { IndicatorPerRecopilation } from '../indicators-per-recopilations/entities/indicator-per-recopilatio.entity'\nimport { CategorizedCriteria } from '../categorized-criteria/entities/categorized-criterion.entity'\nimport { Recommendation } from '../recommendations/entities/recommendation.entity'\nimport { Department } from '../users/entities/department.entity'\nimport { DepartmentPerRecopilation } from '../departments-per-recopilations/entities/departments-per-recopilation.entity'\nimport { InformationCollection } from '../information-collections/entities/information-collection.entity'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Recopilation,\n      Indicator,\n      Category,\n      Criteria,\n      Department,\n      IndicatorPerRecopilation,\n      CategorizedCriteria,\n      Recommendation,\n      DepartmentPerRecopilation,\n      InformationCollection\n    ])\n  ],\n  controllers: [RecopilationsController],\n  providers: [RecopilationsService],\n  exports: [TypeOrmModule]\n})\nexport class RecopilationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecopilationsService.html":{"url":"injectables/RecopilationsService.html","title":"injectable - RecopilationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecopilationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/recopilations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneDetailed\n                            \n                            \n                                    Async\n                                findOneMatrix\n                            \n                            \n                                    Async\n                                getActiveRecopilations\n                            \n                            \n                                    Private\n                                    Async\n                                getDepartmentAnswer\n                            \n                            \n                                    Async\n                                recommendCategories\n                            \n                            \n                                    Async\n                                relateToIndicators\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recopilationsRepository: Repository, indicatorsRepository: Repository, criterionRepository: Repository, categoriesRepository: Repository, departmentsRepository: Repository, indicatorsPerRecopilationRepository: Repository, categorizedCriteriaRepository: Repository, recommendationRepository: Repository, departmentsPerRecopilationsRepository: Repository, informationCollectionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/recopilations/recopilations.service.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recopilationsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        indicatorsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        criterionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        departmentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        indicatorsPerRecopilationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categorizedCriteriaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recommendationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        departmentsPerRecopilationsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        informationCollectionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(recopilationData: CreateRecopilationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.service.ts:295\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationData\n                                            \n                                                            CreateRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneDetailed\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneDetailed(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneMatrix\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneMatrix(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.service.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getActiveRecopilations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getActiveRecopilations(undefined, departmentId: number | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.service.ts:445\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                departmentId\n                                            \n                                                        number | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getDepartmentAnswer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDepartmentAnswer(recopilationId: number, categoryId: number, departmentId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.service.ts:272\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recopilationId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                categoryId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                departmentId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        recommendCategories\n                        \n                    \n                \n            \n            \n                \n                        \n                    recommendCategories(recommendCategoriesDto: RecommendCategoriesDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.service.ts:397\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recommendCategoriesDto\n                                            \n                                                            RecommendCategoriesDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        relateToIndicators\n                        \n                    \n                \n            \n            \n                \n                        \n                    relateToIndicators(relateIndicatorsToRecopilationDto: RelateIndicatorsToRecopilationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.service.ts:322\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                relateIndicatorsToRecopilationDto\n                                            \n                                                            RelateIndicatorsToRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.service.ts:314\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, recopilationData: UpdateRecopilationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/recopilations/recopilations.service.ts:301\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                recopilationData\n                                            \n                                                            UpdateRecopilationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport {\n  EntityNotFoundError,\n  Equal,\n  In,\n  LessThanOrEqual,\n  MoreThan,\n  Repository\n} from 'typeorm'\nimport { Recopilation } from './entities/recopilation.entity'\nimport { UpdateRecopilationDto } from './dto/update-recopilation.dto'\nimport { CreateRecopilationDto } from './dto/create-recopilation.dto'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-recopilations-by-param.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport { RelateIndicatorsToRecopilationDto } from './dto/relate-indicators-to-recopilation.dto'\nimport { Indicator } from '../indicators/entities/indicator.entity'\nimport { Criteria } from '../criterion/entities/criteria.entity'\nimport { Category } from '../categories/entities/category.entity'\nimport { IndicatorPerRecopilation } from '../indicators-per-recopilations/entities/indicator-per-recopilatio.entity'\nimport { CategorizedCriteria } from '../categorized-criteria/entities/categorized-criterion.entity'\nimport { RecommendCategoriesDto } from './dto/recommend-categories.dto'\nimport { Department } from '../users/entities/department.entity'\nimport { Recommendation } from '../recommendations/entities/recommendation.entity'\nimport { DepartmentPerRecopilation } from '../departments-per-recopilations/entities/departments-per-recopilation.entity'\nimport { RecopilationDto } from './dto/recopilation.dto'\nimport { InformationCollection } from '../information-collections/entities/information-collection.entity'\n\n@Injectable()\nexport class RecopilationsService {\n  constructor(\n    @InjectRepository(Recopilation)\n    private recopilationsRepository: Repository,\n    @InjectRepository(Indicator)\n    private indicatorsRepository: Repository,\n    @InjectRepository(Criteria)\n    private criterionRepository: Repository,\n    @InjectRepository(Category)\n    private categoriesRepository: Repository,\n    @InjectRepository(Department)\n    private departmentsRepository: Repository,\n    @InjectRepository(IndicatorPerRecopilation)\n    private indicatorsPerRecopilationRepository: Repository,\n    @InjectRepository(CategorizedCriteria)\n    private categorizedCriteriaRepository: Repository,\n    @InjectRepository(Recommendation)\n    private recommendationRepository: Repository,\n    @InjectRepository(DepartmentPerRecopilation)\n    private departmentsPerRecopilationsRepository: Repository,\n    @InjectRepository(InformationCollection)\n    private informationCollectionsRepository: Repository\n  ) {}\n\n  async findAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [recopilation, count] =\n      await this.recopilationsRepository.findAndCount({\n        take: itemsPerPage,\n        skip: (page - 1) * itemsPerPage,\n        order: { [orderBy]: orderType },\n        where: parseFiltersToTypeOrm(filters)\n      })\n\n    return { recopilation, count }\n  }\n\n  async findOne(id: number): Promise {\n    const recopilation = await this.recopilationsRepository.findOneByOrFail({\n      id\n    })\n\n    return recopilation\n  }\n\n  async findOneDetailed(id: number) {\n    const recopilation = await this.recopilationsRepository.findOneOrFail({\n      where: { id },\n      relations: [\n        'departmentsPerRecopilation.department',\n        'departmentsPerRecopilation.recommendations.category',\n        'categorizedCriterion.criteria.indicator',\n        'categorizedCriterion.category',\n        'indicatorsPerRecopilations.indicator'\n      ],\n      withDeleted: true\n    })\n\n    const recommendations = recopilation.departmentsPerRecopilation.map(\n      (dpr) => ({\n        department: dpr.department,\n        recommendedCategories: dpr.recommendations.map((r) => r.category)\n      })\n    )\n\n    const indicators = recopilation.indicatorsPerRecopilations.map((ipr) => {\n      const { indicator } = ipr\n      const categorizedCriteria = recopilation.categorizedCriterion\n        .filter((cc) => cc.criteria.indicator.index === indicator.index)\n        .map((cc) => {\n          const { indicator: _, ...criterionWithoutIndicator } = cc.criteria\n          return {\n            criterion: criterionWithoutIndicator as Criteria,\n            category: cc.category\n          }\n        })\n      return {\n        indicator,\n        criteria: categorizedCriteria\n      }\n    })\n\n    const recopilationDto: RecopilationDto = {\n      id: recopilation.id,\n      name: recopilation.name,\n      description: recopilation.description,\n      startDate: recopilation.startDate,\n      endDate: recopilation.endDate,\n      departmentEndDate: recopilation.departmentEndDate,\n      isReady: recopilation.isReady,\n      departments: recommendations,\n      indicators: indicators\n    }\n\n    return recopilationDto\n  }\n\n  async findOneMatrix(id: number) {\n    const recopilation = await this.recopilationsRepository.findOneOrFail({\n      where: { id },\n      withDeleted: true,\n      relations: {\n        departmentsPerRecopilation: {\n          department: true,\n          recommendations: {\n            category: true\n          }\n        },\n        categorizedCriterion: {\n          category: true,\n          criteria: {\n            indicator: true\n          }\n        },\n        indicatorsPerRecopilations: {\n          indicator: true\n        }\n      },\n      order: {\n        departmentsPerRecopilation: {\n          recommendations: {\n            category: {\n              id: 'ASC'\n            }\n          }\n        },\n        indicatorsPerRecopilations: {\n          indicator: {\n            index: 'ASC'\n          }\n        },\n        categorizedCriterion: {\n          category: {\n            id: 'ASC'\n          },\n          criteria: {\n            id: 'ASC'\n          }\n        }\n      }\n    })\n\n    const indicators = recopilation.indicatorsPerRecopilations.map((ipr) => {\n      const { indicator } = ipr\n      const categorizedCriteria = recopilation.categorizedCriterion\n        .filter((cc) => cc.criteria.indicator.index === indicator.index)\n        .map((cc) => {\n          const { indicator: _, ...criterionWithoutIndicator } = cc.criteria\n          return {\n            criterion: criterionWithoutIndicator as Criteria,\n            category: cc.category\n          }\n        })\n\n      const categories = []\n\n      categorizedCriteria.forEach((cc) => {\n        const alreadyInsertedCategory = categories.find(\n          (c) => c.id === cc.category.id\n        )\n\n        if (alreadyInsertedCategory) {\n          alreadyInsertedCategory.criteria.push(cc.criterion)\n        } else {\n          categories.push({ ...cc.category, criteria: [cc.criterion] })\n        }\n      })\n\n      return {\n        ...indicator,\n        categories\n      }\n    })\n\n    const allCategories = indicators\n      .map((i) => i.categories)\n      .flat()\n      .sort((a, b) => a.id - b.id) as Category[]\n\n    const departments = await Promise.all(\n      recopilation.departmentsPerRecopilation.map(async (dpr) => ({\n        department: dpr.department,\n        answers: await Promise.all(\n          allCategories.map(async (c) => {\n            const isRecommended = dpr.recommendations?.some(\n              (r) => r.category.id === c.id\n            )\n\n            const informationCollections = await this.getDepartmentAnswer(\n              recopilation.id,\n              c.id,\n              dpr.department.id\n            )\n\n            const isAnswered = informationCollections.length > 0\n\n            const isApproved =\n              isAnswered && informationCollections.every((ic) => ic.isApproved)\n\n            let hasError = false\n            informationCollections.forEach((ic) => {\n              if (ic.evidences?.some((e) => e.error !== null)) hasError = true\n            })\n\n            return {\n              categoryId: c.id,\n              isRecommended,\n              isAnswered,\n              isApproved,\n              hasError\n            }\n          })\n        )\n      }))\n    )\n\n    const recopilationDto = {\n      id: recopilation.id,\n      name: recopilation.name,\n      description: recopilation.description,\n      startDate: recopilation.startDate,\n      endDate: recopilation.endDate,\n      departmentEndDate: recopilation.departmentEndDate,\n      isReady: recopilation.isReady,\n      indicators,\n      departments\n    }\n\n    return recopilationDto\n  }\n\n  private async getDepartmentAnswer(\n    recopilationId: number,\n    categoryId: number,\n    departmentId: number\n  ) {\n    const informationCollections =\n      await this.informationCollectionsRepository.find({\n        where: {\n          recopilation: { id: recopilationId },\n          category: { id: categoryId },\n          department: { id: departmentId }\n        },\n        relations: {\n          evidences: true\n        },\n        order: {\n          createdAt: 'ASC'\n        }\n      })\n\n    return informationCollections\n  }\n\n  async create(recopilationData: CreateRecopilationDto): Promise {\n    const recopilation = this.recopilationsRepository.create(recopilationData)\n\n    return this.recopilationsRepository.save(recopilation)\n  }\n\n  async update(\n    id: number,\n    recopilationData: UpdateRecopilationDto\n  ): Promise {\n    await this.recopilationsRepository.findOneByOrFail({\n      id\n    })\n\n    await this.recopilationsRepository.update(id, recopilationData)\n\n    return this.recopilationsRepository.findOneByOrFail({ id })\n  }\n\n  async remove(id: number): Promise {\n    const recopilation = await this.recopilationsRepository.findOneByOrFail({\n      id\n    })\n\n    await this.recopilationsRepository.remove([recopilation])\n  }\n\n  async relateToIndicators(\n    relateIndicatorsToRecopilationDto: RelateIndicatorsToRecopilationDto\n  ) {\n    const { recopilationId, indicators } = relateIndicatorsToRecopilationDto\n\n    const recopilation = await this.recopilationsRepository.findOneOrFail({\n      where: { id: recopilationId },\n      relations: ['categorizedCriterion', 'indicatorsPerRecopilations']\n    })\n\n    let categorizedCriteriaToInsert: CategorizedCriteria[] = []\n    let indicatorsPerRecopilationsToInsert: IndicatorPerRecopilation[] = []\n\n    for (const i of indicators) {\n      const indicator = await this.indicatorsRepository.findOneOrFail({\n        where: { index: i.indicatorId },\n        relations: ['categories', 'criterion']\n      })\n\n      for (const c of i.criterion) {\n        const [criteria, category] = await Promise.all([\n          this.criterionRepository.findOneByOrFail({ id: c.criteriaId }),\n          this.categoriesRepository.findOneByOrFail({ id: c.categoryId })\n        ])\n\n        if (!indicator.criterion.some((c) => c.id === criteria.id)) {\n          throw new EntityNotFoundError(Criteria, criteria.id)\n        }\n\n        if (!indicator.categories.some((c) => c.id === category.id)) {\n          throw new EntityNotFoundError(Category, category.id)\n        }\n\n        const categorizedCriteria = this.categorizedCriteriaRepository.create({\n          criteria,\n          category,\n          recopilation\n        })\n\n        categorizedCriteriaToInsert.push(categorizedCriteria)\n      }\n\n      const indicatorPerRecopilation =\n        this.indicatorsPerRecopilationRepository.create({\n          indicator,\n          recopilation\n        })\n\n      indicatorsPerRecopilationsToInsert.push(indicatorPerRecopilation)\n    }\n\n    await Promise.all([\n      await this.categorizedCriteriaRepository.remove(\n        recopilation.categorizedCriterion\n      ),\n      await this.indicatorsPerRecopilationRepository.remove(\n        recopilation.indicatorsPerRecopilations\n      )\n    ])\n\n    await Promise.all([\n      await this.categorizedCriteriaRepository.save(\n        categorizedCriteriaToInsert\n      ),\n      await this.indicatorsPerRecopilationRepository.save(\n        indicatorsPerRecopilationsToInsert\n      )\n    ])\n\n    recopilation.categorizedCriterion = categorizedCriteriaToInsert\n    recopilation.indicatorsPerRecopilations = indicatorsPerRecopilationsToInsert\n\n    return recopilation\n  }\n\n  async recommendCategories(recommendCategoriesDto: RecommendCategoriesDto) {\n    const { recopilationId, departments } = recommendCategoriesDto\n\n    const recommendations: Recommendation[] = []\n\n    for (const dep of departments) {\n      const departmentPerRecopilation =\n        await this.departmentsPerRecopilationsRepository.findOneOrFail({\n          where: {\n            department: { id: dep.departmentId },\n            recopilation: { id: recopilationId }\n          }\n        })\n\n      for (const cat of dep.categories) {\n        const categorizedCriteria =\n          await this.categorizedCriteriaRepository.findOneOrFail({\n            where: {\n              recopilation: { id: recopilationId },\n              category: { id: cat.categoryId }\n            },\n            relations: ['category']\n          })\n\n        recommendations.push(\n          this.recommendationRepository.create({\n            category: categorizedCriteria.category,\n            departmentPerRecopilation\n          })\n        )\n      }\n    }\n\n    const oldRecommendations = await this.recommendationRepository.find({\n      relations: ['departmentPerRecopilation'],\n      where: {\n        departmentPerRecopilation: {\n          recopilation: { id: recopilationId },\n          department: { id: In(departments.map((d) => d.departmentId)) }\n        }\n      }\n    })\n\n    await this.recommendationRepository.remove(oldRecommendations)\n\n    return await this.recommendationRepository.save(recommendations)\n  }\n\n  async getActiveRecopilations(\n    { orderBy, orderType }: OrderByParamDto & OrderTypeParamDto,\n    departmentId: number | undefined\n  ) {\n    const currentDate = new Date()\n    currentDate.setHours(0, 0, 0, 0)\n\n    if (departmentId === undefined) {\n      return this.recopilationsRepository.find({\n        where: {\n          startDate: LessThanOrEqual(currentDate),\n          endDate: MoreThan(currentDate),\n          isReady: Equal(true)\n        },\n        order: { [orderBy]: orderType }\n      })\n    }\n\n    return this.recopilationsRepository.find({\n      where: {\n        startDate: LessThanOrEqual(currentDate),\n        endDate: MoreThan(currentDate),\n        departmentEndDate: MoreThan(currentDate),\n        isReady: Equal(true),\n        departmentsPerRecopilation: {\n          department: { id: departmentId }\n        }\n      },\n      order: { [orderBy]: orderType }\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RelateIndicatorsToRecopilationDto.html":{"url":"classes/RelateIndicatorsToRecopilationDto.html","title":"class - RelateIndicatorsToRecopilationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RelateIndicatorsToRecopilationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                indicators\n                            \n                            \n                                    \n                                    \n                                recopilationId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        indicators\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IndicatorToRelate[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested({each: true})@ArrayNotEmpty()@IsArray()@IsNotEmpty()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        recopilationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArrayNotEmpty,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  ValidateNested\n} from 'class-validator'\nimport { Type } from 'class-transformer'\n\nexport class RelateIndicatorsToRecopilationDto {\n  @IsNumber()\n  @IsNotEmpty()\n  recopilationId: number\n\n  @ValidateNested({ each: true })\n  @ArrayNotEmpty()\n  @IsArray()\n  @IsNotEmpty()\n  @Type(() => IndicatorToRelate)\n  indicators: IndicatorToRelate[]\n}\n\nexport class IndicatorToRelate {\n  @IsNumber()\n  @IsNotEmpty()\n  indicatorId: number\n\n  @ValidateNested({ each: true })\n  @ArrayNotEmpty()\n  @IsArray()\n  @IsNotEmpty()\n  @Type(() => CriteriaToRelate)\n  criterion: CriteriaToRelate[]\n}\n\nexport class CriteriaToRelate {\n  @IsNumber()\n  @IsNotEmpty()\n  criteriaId: number\n\n  @IsNumber()\n  @IsNotEmpty()\n  categoryId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/auth/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/roles.guard.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common'\nimport { Reflector } from '@nestjs/core'\nimport { Role } from './role.enum'\nimport { ROLES_KEY } from './roles.decorator'\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass()\n    ])\n    if (!requiredRoles) {\n      return true\n    }\n    const { user } = context.switchToHttp().getRequest()\n    return requiredRoles.some((role) => user.type?.includes(role))\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SuccessfulResponseBuilderInterceptor.html":{"url":"injectables/SuccessfulResponseBuilderInterceptor.html","title":"injectable - SuccessfulResponseBuilderInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SuccessfulResponseBuilderInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/succesful-response-builder/successful-response-builder.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler<>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/succesful-response-builder/successful-response-builder.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor\n} from '@nestjs/common'\nimport { Observable, map } from 'rxjs'\nimport { Response as ExpressResponse } from 'express'\nimport { constructHttpResponse } from 'src/shared/construct-http-response'\nimport { HttpResponse } from 'src/shared/http-response.type'\n\n@Injectable()\nexport class SuccessfulResponseBuilderInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler\n  ): Observable> {\n    const response = context.switchToHttp().getResponse()\n\n    const statusCode = response.statusCode\n\n    return next\n      .handle()\n      .pipe(map((data) => constructHttpResponse(statusCode, data)))\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SummaryInformationController.html":{"url":"controllers/SummaryInformationController.html","title":"controller - SummaryInformationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SummaryInformationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/summary-information/summary-information.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                summary-information\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                findInformationCollections\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findInformationCollections\n                        \n                    \n                \n            \n            \n                \n                        \n                    findInformationCollections(idCrit: string, idRecop: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':idCrit/:idRecop')\n                \n            \n\n                    \n                        \n                            Defined in src/core/summary-information/summary-information.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idCrit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                idRecop\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common'\nimport { SummaryInformationService } from './summary-information.service'\nimport { ApiTags } from '@nestjs/swagger'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Summary-information')\n@Controller('summary-information')\n@Roles(Role.Coordinator, Role.Admin)\nexport class SummaryInformationController {\n  constructor(\n    private readonly summaryInformationService: SummaryInformationService\n  ) {}\n\n  @Get(':idCrit/:idRecop')\n  async findInformationCollections(\n    @Param('idCrit') idCrit: string,\n    @Param('idRecop') idRecop: string\n  ) {\n    return await this.summaryInformationService.findInformationCollections(\n      +idCrit,\n      +idRecop\n    )\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SummaryInformationModule.html":{"url":"modules/SummaryInformationModule.html","title":"module - SummaryInformationModule","body":"\n                   \n\n\n\n\n    Modules\n    SummaryInformationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SummaryInformationModule\n\n\n\ncluster_SummaryInformationModule_providers\n\n\n\n\nSummaryInformationService\n\nSummaryInformationService\n\n\n\nSummaryInformationModule\n\nSummaryInformationModule\n\nSummaryInformationModule -->\n\nSummaryInformationService->SummaryInformationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/summary-information/summary-information.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SummaryInformationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SummaryInformationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { SummaryInformationService } from './summary-information.service'\nimport { SummaryInformationController } from './summary-information.controller'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { InformationCollection } from '../information-collections/entities/information-collection.entity'\nimport { CategorizedCriteria } from '../categorized-criteria/entities/categorized-criterion.entity'\nimport { Criteria } from '../criterion/entities/criteria.entity'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      InformationCollection,\n      CategorizedCriteria,\n      Criteria,\n      Recopilation\n    ])\n  ],\n  controllers: [SummaryInformationController],\n  providers: [SummaryInformationService]\n})\nexport class SummaryInformationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SummaryInformationService.html":{"url":"injectables/SummaryInformationService.html","title":"injectable - SummaryInformationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SummaryInformationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/summary-information/summary-information.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findInformationCollections\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(informationCollectionsRepository: Repository, criteriaRepository: Repository, recopilationRepository: Repository, categorizedCriteriaRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/summary-information/summary-information.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        informationCollectionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        criteriaRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recopilationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categorizedCriteriaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findInformationCollections\n                        \n                    \n                \n            \n            \n                \n                        \n                    findInformationCollections(idCrit: number, idRecop: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/summary-information/summary-information.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idCrit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                idRecop\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { InformationCollection } from '../information-collections/entities/information-collection.entity'\nimport { CategorizedCriteria } from '../categorized-criteria/entities/categorized-criterion.entity'\nimport { Criteria } from '../criterion/entities/criteria.entity'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\n\n@Injectable()\nexport class SummaryInformationService {\n  constructor(\n    @InjectRepository(InformationCollection)\n    private informationCollectionsRepository: Repository,\n    @InjectRepository(Criteria)\n    private criteriaRepository: Repository,\n    @InjectRepository(Recopilation)\n    private recopilationRepository: Repository,\n    @InjectRepository(CategorizedCriteria)\n    private categorizedCriteriaRepository: Repository\n  ) {}\n\n  async findInformationCollections(idCrit: number, idRecop: number) {\n    const [recopilation, criterion] = await Promise.all([\n      this.recopilationRepository.findOneByOrFail({\n        id: idRecop\n      }),\n      this.criteriaRepository.findOneByOrFail({\n        id: idCrit\n      })\n    ])\n\n    const categorizedCriteria =\n      await this.categorizedCriteriaRepository.findOneOrFail({\n        where: {\n          recopilation: { id: recopilation.id },\n          criteria: { id: criterion.id }\n        },\n        relations: ['recopilation', 'category', 'criteria']\n      })\n\n    const informationCollections =\n      await this.informationCollectionsRepository.find({\n        where: {\n          recopilation: (await categorizedCriteria).recopilation,\n          category: (await categorizedCriteria).category\n        },\n        relations: ['department', 'evidences']\n      })\n\n    return { criterion, recopilation, informationCollections }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeORMExceptionFilter.html":{"url":"classes/TypeORMExceptionFilter.html","title":"class - TypeORMExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeORMExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/type-orm-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/errors/type-orm-exception.filter.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  ExceptionFilter,\n  ArgumentsHost,\n  HttpStatus\n} from '@nestjs/common'\nimport {\n  CannotCreateEntityIdMapError,\n  EntityNotFoundError,\n  QueryFailedError,\n  TypeORMError\n} from 'typeorm'\nimport { Response } from 'express'\nimport { constructHttpResponse } from 'src/shared/construct-http-response'\n\nconst POSTGRES_UNIQUE_CONSTRAINT_VIOLATION_CODE = '23505'\n\n@Catch(TypeORMError)\nexport class TypeORMExceptionFilter implements ExceptionFilter {\n  public catch(exception: any, host: ArgumentsHost) {\n    const ctx = host.switchToHttp()\n    const response = ctx.getResponse()\n\n    let error: string\n    let statusCode: number\n\n    switch (exception.constructor) {\n      case EntityNotFoundError:\n        error = 'Entity not found'\n        statusCode = HttpStatus.NOT_FOUND\n        break\n      case QueryFailedError:\n        if (\n          exception.driverError.code ===\n          POSTGRES_UNIQUE_CONSTRAINT_VIOLATION_CODE\n        ) {\n          error = 'Duplicate key value violates unique constraint'\n          statusCode = HttpStatus.CONFLICT\n          exception.message =\n            '¡Parece que ya existe esa información en el sistema! Intenta ingresando algo diferente.'\n          break\n        }\n        error = 'Query failed error'\n        statusCode = HttpStatus.UNPROCESSABLE_ENTITY\n        break\n      case CannotCreateEntityIdMapError:\n        error = 'Cannot create entity id map error'\n        statusCode = HttpStatus.UNPROCESSABLE_ENTITY\n        break\n      default:\n        error = 'Internal Server Error'\n        statusCode = HttpStatus.INTERNAL_SERVER_ERROR\n        break\n    }\n\n    return response.status(statusCode).json(\n      constructHttpResponse(statusCode, {\n        error,\n        message: exception.message\n      })\n    )\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategorizedCriterionDto.html":{"url":"classes/UpdateCategorizedCriterionDto.html","title":"class - UpdateCategorizedCriterionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategorizedCriterionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categorized-criteria/dto/update-categorized-criterion.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(\n  CreateCategorizedCriteriaDto\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateCategorizedCriteriaDto } from './create-categorized-criterion.dto'\n\nexport class UpdateCategorizedCriterionDto extends PartialType(\n  CreateCategorizedCriteriaDto\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                helpText\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                indicatorIndex\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        helpText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/dto/update-category.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        indicatorIndex\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/dto/update-category.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/categories/dto/update-category.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional, IsString } from 'class-validator'\n\nexport class UpdateCategoryDto {\n  @IsString()\n  @IsOptional()\n  name?: string\n\n  @IsString()\n  @IsOptional()\n  helpText?: string\n\n  @IsInt()\n  @IsOptional()\n  indicatorIndex?: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCriteriaDto.html":{"url":"classes/UpdateCriteriaDto.html","title":"class - UpdateCriteriaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCriteriaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/criterion/dto/update-criteria.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateCriteriaDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types'\nimport { CreateCriteriaDto } from './create-criteria.dto'\n\nexport class UpdateCriteriaDto extends PartialType(CreateCriteriaDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDepartmentPerRecopilationDto.html":{"url":"classes/UpdateDepartmentPerRecopilationDto.html","title":"class - UpdateDepartmentPerRecopilationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDepartmentPerRecopilationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/departments-per-recopilations/dto/update-department-per-recopilation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                departmentsIds\n                            \n                            \n                                    \n                                    \n                                recopilationId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        departmentsIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/departments-per-recopilations/dto/update-department-per-recopilation.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        recopilationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/departments-per-recopilations/dto/update-department-per-recopilation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber } from 'class-validator'\n\nexport class UpdateDepartmentPerRecopilationDto {\n  @IsNumber()\n  @IsNotEmpty()\n  recopilationId: number\n\n  @IsNumber()\n  @IsNotEmpty()\n  departmentsIds: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEvidenceDto.html":{"url":"classes/UpdateEvidenceDto.html","title":"class - UpdateEvidenceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEvidenceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/evidences/dto/update-evidence.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateEvidenceDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateEvidenceDto } from './create-evidence.dto'\n\nexport class UpdateEvidenceDto extends PartialType(CreateEvidenceDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateIndicatorDto.html":{"url":"classes/UpdateIndicatorDto.html","title":"class - UpdateIndicatorDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateIndicatorDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/indicators/dto/update-indicator.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                alias\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                helpText\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                index\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(VALUES.nameAliasMinAmount)@MaxLength(VALUES.indicatorNameAliasMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/dto/update-indicator.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        helpText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(VALUES.helpTextMinAmount)@MaxLength(VALUES.helpTextMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/dto/update-indicator.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/dto/update-indicator.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(VALUES.nameAliasMinAmount)@MaxLength(VALUES.indicatorNameAliasMaxAmount)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/indicators/dto/update-indicator.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNumber,\n  IsOptional,\n  IsString,\n  MaxLength,\n  MinLength\n} from 'class-validator'\nimport { VALUES } from 'shared/validations'\n\nexport class UpdateIndicatorDto {\n  @IsNumber()\n  @IsOptional()\n  index?: number\n\n  @IsString()\n  @IsOptional()\n  @MinLength(VALUES.nameAliasMinAmount)\n  @MaxLength(VALUES.indicatorNameAliasMaxAmount)\n  name?: string\n\n  @IsString()\n  @IsOptional()\n  @MinLength(VALUES.nameAliasMinAmount)\n  @MaxLength(VALUES.indicatorNameAliasMaxAmount)\n  alias?: string\n\n  @IsString()\n  @IsOptional()\n  @MinLength(VALUES.helpTextMinAmount)\n  @MaxLength(VALUES.helpTextMaxAmount)\n  helpText?: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateIndicatorPerRecopilationDto.html":{"url":"classes/UpdateIndicatorPerRecopilationDto.html","title":"class - UpdateIndicatorPerRecopilationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateIndicatorPerRecopilationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/indicators-per-recopilations/dto/update-indicator-per-recopilation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  CreateIndicatorPerRecopilationDto\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateIndicatorPerRecopilationDto } from './create-indicator-per-recopilation.dto'\n\nexport class UpdateIndicatorPerRecopilationDto extends PartialType(\n  CreateIndicatorPerRecopilationDto\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInformationCollectionDto.html":{"url":"classes/UpdateInformationCollectionDto.html","title":"class - UpdateInformationCollectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInformationCollectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/information-collections/dto/update-information-collection.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  CreateInformationCollectionDto\n)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                isApproved\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isApproved\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/information-collections/dto/update-information-collection.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateInformationCollectionDto } from './create-information-collection.dto'\nimport { IsBoolean, IsOptional } from 'class-validator'\n\nexport class UpdateInformationCollectionDto extends PartialType(\n  CreateInformationCollectionDto\n) {\n  @IsBoolean()\n  @IsOptional()\n  isApproved: boolean\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNotificationDto.html":{"url":"classes/UpdateNotificationDto.html","title":"class - UpdateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/notifications/dto/update-notification.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateNotificationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateNotificationDto } from './create-notification.dto'\n\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRecopilationDto.html":{"url":"classes/UpdateRecopilationDto.html","title":"class - UpdateRecopilationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRecopilationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/recopilations/dto/update-recopilation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateRecopilationDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/recopilations/dto/update-recopilation.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger'\nimport { CreateRecopilationDto } from './create-recopilation.dto'\nimport { IsInt, IsOptional } from 'class-validator'\n\nexport class UpdateRecopilationDto extends PartialType(CreateRecopilationDto) {\n  @IsInt()\n  @IsOptional()\n  id: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types'\nimport { CreateUserDto } from './create-user.dto'\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                fullName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, notifications => notifications.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  TableInheritance,\n  OneToMany,\n  Unique,\n  DeleteDateColumn,\n  Index\n} from 'typeorm'\nimport { USER_TYPES, UserType } from '../users.constants'\nimport { Notification } from 'src/core/notifications/entities/notification.entity'\n\n@Entity({ name: 'users' })\n@Index(['email'], { unique: true, where: '\"deletedAt\" IS NULL' })\n@Index(['fullName'], { unique: true, where: '\"deletedAt\" IS NULL' })\n@TableInheritance({\n  column: { type: 'enum', enum: Object.values(USER_TYPES), name: 'type' }\n})\nexport abstract class User {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column({ nullable: false })\n  fullName: string\n\n  @Column({ nullable: false })\n  email: string\n\n  @Column({ nullable: false, select: false })\n  password: string\n\n  @OneToMany(() => Notification, (notifications) => notifications.user)\n  notifications: Notification[]\n\n  @Column({ type: 'enum', enum: Object.values(USER_TYPES), nullable: false })\n  type: UserType\n\n  @DeleteDateColumn()\n  deletedAt: Date\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                passwordChange\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)\n                \n            \n\n                    \n                        \n                            Defined in src/core/users/users.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined: PaginationParams, undefined: OrderByParamDto, undefined: OrderTypeParamDto, undefined: FiltersSegmentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/core/users/users.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            PaginationParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderByParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            OrderTypeParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            FiltersSegmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/users/users.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            FindOneParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        passwordChange\n                        \n                    \n                \n            \n            \n                \n                        \n                    passwordChange(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('password-change/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/users/users.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            FindOneParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n                    \n                        \n                            Defined in src/core/users/users.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            FindOneParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: FindOneParams, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/core/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            FindOneParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpStatus,\n  HttpCode,\n  Query\n} from '@nestjs/common'\nimport { UsersService } from './users.service'\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\nimport { FindOneParams } from './dto/find-one-params.dto'\nimport { ApiTags } from '@nestjs/swagger'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { constructPaginatedItemsDto } from 'src/shared/pagination/construct-paginated-items-dto'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-users-by-param.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Users')\n@Controller('users')\n@Roles(Role.Coordinator, Role.Admin)\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto)\n  }\n\n  @Get()\n  async findAll(\n    @Query() { page = 1, itemsPerPage = 10 }: PaginationParams,\n    @Query() { orderBy = 'id' }: OrderByParamDto,\n    @Query() { orderType = 'ASC' }: OrderTypeParamDto,\n    @Query() { filters = [] }: FiltersSegmentDto\n  ) {\n    const { users, count } = await this.usersService.findAll({\n      page,\n      itemsPerPage,\n      orderBy,\n      orderType,\n      filters\n    })\n\n    return constructPaginatedItemsDto(users, count, page, itemsPerPage)\n  }\n\n  @Get(':id')\n  findOne(@Param() { id }: FindOneParams) {\n    return this.usersService.findOne(+id)\n  }\n\n  @Patch(':id')\n  async update(\n    @Param() { id }: FindOneParams,\n    @Body() updateUserDto: UpdateUserDto\n  ) {\n    return this.usersService.update(+id, updateUserDto)\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param() { id }: FindOneParams) {\n    await this.usersService.remove(+id)\n  }\n\n  @Patch('password-change/:id')\n  async passwordChange(@Param() { id }: FindOneParams) {\n    return this.usersService.passwordChange(+id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nMailsModule\n\nMailsModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nMailsModule->UsersModule\n\n\n\n\n\nDepartmentsService\n\nDepartmentsService\n\nUsersModule -->\n\nDepartmentsService->UsersModule\n\n\n\n\n\nMailsService\n\nMailsService\n\nUsersModule -->\n\nMailsService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DepartmentsService\n                        \n                        \n                            MailsService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            DepartmentsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { UsersService } from './users.service'\nimport { UsersController } from './users.controller'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { User } from './entities/user.entity'\nimport { Coordinator } from './entities/coordinator.entity'\nimport { Department } from './entities/department.entity'\nimport { Admin } from './entities/admin.entity'\nimport { DepartmentsService } from './departments.service'\nimport { DepartmentPerRecopilation } from '../departments-per-recopilations/entities/departments-per-recopilation.entity'\nimport { DepartmentsController } from './departments.controller'\nimport { MailsModule } from '../mails/mails.module'\nimport { MailsService } from '../mails/mails.service'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      User,\n      Admin,\n      Coordinator,\n      Department,\n      DepartmentPerRecopilation\n    ]),\n    MailsModule\n  ],\n  controllers: [UsersController, DepartmentsController],\n  providers: [UsersService, DepartmentsService, MailsService],\n  exports: [TypeOrmModule]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                    Async\n                                encryptPassword\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                generatePassword\n                            \n                            \n                                    Async\n                                passwordChange\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, adminRepository: Repository, coordinatorRepository: Repository, departmentRepository: Repository, mailsService: MailsService)\n                    \n                \n                        \n                            \n                                Defined in src/core/users/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        adminRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        coordinatorRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        departmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailsService\n                                                  \n                                                        \n                                                                        MailsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/users/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        encryptPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    encryptPassword(pass: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/users/users.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pass\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/users/users.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/users/users.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    generatePassword()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/users/users.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        passwordChange\n                        \n                    \n                \n            \n            \n                \n                        \n                    passwordChange(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/users/users.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/users/users.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/users/users.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { PaginationParams } from 'src/shared/pagination/pagination-params.dto'\nimport { Coordinator } from './entities/coordinator.entity'\nimport { Department } from './entities/department.entity'\nimport { Admin } from './entities/admin.entity'\nimport { USER_TYPES } from './users.constants'\nimport { User } from './entities/user.entity'\nimport { OrderTypeParamDto } from 'src/shared/sorting/order-type-param.dto'\nimport { OrderByParamDto } from './dto/order-users-by-param.dto'\nimport { FiltersSegmentDto } from 'src/shared/filtering/filters-segment.dto'\nimport { parseFiltersToTypeOrm } from 'src/shared/filtering/parse-filters-to-type-orm'\nimport * as generator from 'generate-password'\nimport * as bcrypt from 'bcrypt'\nimport { MailsService } from '../mails/mails.service'\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    @InjectRepository(Admin)\n    private adminRepository: Repository,\n    @InjectRepository(Coordinator)\n    private coordinatorRepository: Repository,\n    @InjectRepository(Department)\n    private departmentRepository: Repository,\n    private mailsService: MailsService\n  ) {}\n\n  async create(createUserDto: CreateUserDto) {\n    const { type, ...createUserDtoWithoutType } = createUserDto\n\n    const generatedPassword = this.generatePassword()\n    const passwordToUse = createUserDto.password || generatedPassword\n    const encryptedPassword = await this.encryptPassword(passwordToUse)\n\n    let user: User\n\n    switch (type) {\n      case USER_TYPES.ADMIN:\n        user = await this.adminRepository.save({\n          ...createUserDtoWithoutType,\n          password: encryptedPassword\n        })\n        break\n      case USER_TYPES.COORDINATOR:\n        user = await this.coordinatorRepository.save({\n          ...createUserDtoWithoutType,\n          password: encryptedPassword\n        })\n        break\n      case USER_TYPES.DEPARTMENT:\n        user = await this.departmentRepository.save({\n          ...createUserDtoWithoutType,\n          password: encryptedPassword\n        })\n    }\n\n    this.mailsService.sendMail(createUserDto.email, passwordToUse)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: _, ...userWithoutPassword } = user\n\n    if (passwordToUse === generatedPassword)\n      return { ...userWithoutPassword, password: generatedPassword }\n\n    return userWithoutPassword\n  }\n\n  async findAll({\n    page,\n    itemsPerPage,\n    orderBy,\n    orderType,\n    filters\n  }: PaginationParams &\n    OrderByParamDto &\n    OrderTypeParamDto &\n    FiltersSegmentDto) {\n    const [users, count] = await this.usersRepository.findAndCount({\n      take: itemsPerPage,\n      skip: (page - 1) * itemsPerPage,\n      order: { [orderBy]: orderType },\n      where: parseFiltersToTypeOrm(filters)\n    })\n\n    return { users, count }\n  }\n\n  async findOne(id: number) {\n    const user = await this.usersRepository.findOneByOrFail({ id })\n\n    return user\n  }\n\n  async update(id: number, updateUserDto: UpdateUserDto) {\n    await this.usersRepository.findOneByOrFail({ id })\n\n    await this.usersRepository.update(id, updateUserDto)\n\n    return this.usersRepository.findOneByOrFail({ id })\n  }\n\n  async remove(id: number) {\n    const user = await this.usersRepository.findOneByOrFail({ id })\n\n    if (user.type === 'department') {\n      await this.usersRepository.softRemove(user)\n    } else {\n      await this.usersRepository.remove([user])\n    }\n  }\n\n  async passwordChange(id: number) {\n    const user = await this.usersRepository.findOneByOrFail({ id })\n    const generatedPassword = this.generatePassword()\n    const encryptedPassword = await this.encryptPassword(generatedPassword)\n    user.password = encryptedPassword\n    await this.usersRepository.update(id, user)\n\n    this.mailsService.sendMail(user.email, generatedPassword)\n\n    return generatedPassword\n  }\n\n  private async encryptPassword(pass: string) {\n    return await bcrypt.hash(pass, 10)\n  }\n\n  private generatePassword() {\n    return generator.generate({\n      length: 12,\n      numbers: true\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WordController.html":{"url":"controllers/WordController.html","title":"controller - WordController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WordController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/word/word.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                word\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                generateWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        generateWord\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateWord(CriterionId: string, RecopilationId: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':CriterionId/:RecopilationId')\n                \n            \n\n                    \n                        \n                            Defined in src/core/word/word.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                CriterionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                RecopilationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Res } from '@nestjs/common'\nimport { WordService } from './word.service'\nimport { ApiTags } from '@nestjs/swagger'\nimport { Roles } from '../auth/roles.decorator'\nimport { Role } from '../auth/role.enum'\n\n@ApiTags('Word')\n@Controller('word')\n@Roles(Role.Coordinator, Role.Admin)\nexport class WordController {\n  constructor(private readonly wordService: WordService) {}\n\n  @Get(':CriterionId/:RecopilationId')\n  async generateWord(\n    @Param('CriterionId') CriterionId: string,\n    @Param('RecopilationId') RecopilationId: string,\n    @Res() res\n  ) {\n    try {\n      // const prueba = await this.wordService.findInformationCollections(\n      //   +CriterionId,\n      //   +RecopilationId\n      // )\n      // res.send(prueba)\n\n      const buffer = await this.wordService.generateWord(\n        +CriterionId,\n        +RecopilationId\n      )\n      res.set({\n        'Content-Type': 'application/docx',\n        'Content-Disposition':\n          'attachment; filename=Andres Bello Guayana Catholic University_Venezuela_' +\n          buffer.index +\n          '_' +\n          buffer.subIndex +\n          '_' +\n          buffer.criterionName +\n          '.docx',\n        'Content-Length': buffer.buffer.length,\n        'Access-Control-Expose-Headers': 'Content-Disposition'\n      })\n      res.send(buffer.buffer)\n    } catch (e) {\n      console.log(e)\n      throw e\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WordModule.html":{"url":"modules/WordModule.html","title":"module - WordModule","body":"\n                   \n\n\n\n\n    Modules\n    WordModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_WordModule\n\n\n\ncluster_WordModule_providers\n\n\n\n\nWordService\n\nWordService\n\n\n\nWordModule\n\nWordModule\n\nWordModule -->\n\nWordService->WordModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/word/word.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WordService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WordController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { WordService } from './word.service'\nimport { WordController } from './word.controller'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { InformationCollection } from '../information-collections/entities/information-collection.entity'\nimport { CategorizedCriteria } from '../categorized-criteria/entities/categorized-criterion.entity'\nimport { Criteria } from '../criterion/entities/criteria.entity'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      InformationCollection,\n      CategorizedCriteria,\n      Criteria,\n      Recopilation\n    ])\n  ],\n  controllers: [WordController],\n  providers: [WordService]\n})\nexport class WordModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WordService.html":{"url":"injectables/WordService.html","title":"injectable - WordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/word/word.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createEvidences\n                            \n                            \n                                    Async\n                                findInformationCollections\n                            \n                            \n                                    Async\n                                generateWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(informationCollectionsRepository: Repository, criteriaRepository: Repository, recopilationRepository: Repository, categorizedCriteriaRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/word/word.service.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        informationCollectionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        criteriaRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recopilationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categorizedCriteriaRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createEvidences\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEvidences(collections: InformationCollection[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/word/word.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                collections\n                                            \n                                                            InformationCollection[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Paragraph[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findInformationCollections\n                        \n                    \n                \n            \n            \n                \n                        \n                    findInformationCollections(idCrit: number, idRecop: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/word/word.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idCrit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                idRecop\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateWord\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateWord(idCrit: number, idRecop: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/word/word.service.ts:349\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idCrit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                idRecop\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport {\n  Document,\n  Packer,\n  Paragraph,\n  SectionType,\n  TextRun,\n  ImageRun,\n  HorizontalPositionAlign,\n  VerticalPositionAlign,\n  HorizontalPositionRelativeFrom,\n  VerticalPositionRelativeFrom,\n  ExternalHyperlink,\n  Header\n} from 'docx'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { InformationCollection } from '../information-collections/entities/information-collection.entity'\nimport { CategorizedCriteria } from '../categorized-criteria/entities/categorized-criterion.entity'\nimport { Criteria } from '../criterion/entities/criteria.entity'\nimport { Recopilation } from '../recopilations/entities/recopilation.entity'\nimport { Image } from '../evidences/entities/image.entity'\nimport { Link } from '../evidences/entities/link.entity'\nimport * as evidenceDocument from '../evidences/entities/document.entity'\nimport * as fs from 'fs'\nimport { Evidence } from '../evidences/entities/evidence.entity'\n\n@Injectable()\nexport class WordService {\n  constructor(\n    @InjectRepository(InformationCollection)\n    private informationCollectionsRepository: Repository,\n    @InjectRepository(Criteria)\n    private criteriaRepository: Repository,\n    @InjectRepository(Recopilation)\n    private recopilationRepository: Repository,\n    @InjectRepository(CategorizedCriteria)\n    private categorizedCriteriaRepository: Repository\n  ) {}\n\n  async findInformationCollections(idCrit: number, idRecop: number) {\n    const [recopilation, criterion] = await Promise.all([\n      this.recopilationRepository.findOneByOrFail({\n        id: idRecop\n      }),\n      this.criteriaRepository.findOneOrFail({\n        where: {\n          id: idCrit\n        },\n        relations: ['indicator']\n      })\n    ])\n\n    const categorizedCriteria =\n      await this.categorizedCriteriaRepository.findOneOrFail({\n        where: {\n          recopilation: { id: recopilation.id },\n          criteria: { id: criterion.id }\n        },\n        relations: ['recopilation', 'category', 'criteria']\n      })\n\n    const arrayInfCol = await this.informationCollectionsRepository.find({\n      where: {\n        recopilation: categorizedCriteria.recopilation,\n        category: categorizedCriteria.category\n      },\n      relations: ['department', 'evidences']\n    })\n\n    const informationCollections: InformationCollection[] = []\n    let dep: string\n    let flag = 0\n    let order: Evidence[]\n    let verify = 0\n    let type: string\n\n    //Para ordenar las colecciones de información por departamento\n    arrayInfCol.forEach((informationCollection, index) => {\n      if (index === 0) {\n        informationCollections.push(informationCollection)\n      }\n      dep = informationCollection.department.fullName\n\n      arrayInfCol.forEach((infCol) => {\n        if (dep === infCol.department.fullName) {\n          informationCollections.forEach((info) => {\n            if (info.id === infCol.id) {\n              flag = 1\n            }\n          })\n          if (flag === 0) {\n            informationCollections.push(infCol)\n          }\n          flag = 0\n        }\n      })\n    })\n\n    //Para ordenar las evidencias por tipo en cada colección de información\n    informationCollections.forEach((inforCollec) => {\n      order = []\n      inforCollec.evidences.forEach((evidence, index) => {\n        if (index === 0) {\n          order.push(evidence)\n        }\n        type = evidence.type\n\n        inforCollec.evidences.forEach((evid) => {\n          if (type === evid.type) {\n            order.forEach((info) => {\n              if (info.id === evid.id) {\n                verify = 1\n              }\n            })\n            if (verify === 0) {\n              order.push(evid)\n            }\n            verify = 0\n          }\n        })\n      })\n      inforCollec.evidences = order\n    })\n\n    return { criterion, recopilation, informationCollections }\n  }\n\n  private createEvidences(collections: InformationCollection[]): Paragraph[] {\n    let prevDepartment: string\n    let departmentName: string\n    let collectionName: string\n    let collectionDescription: string\n    let fileLink: string\n    let externalLink: string\n    let evidenceDescription: string\n    const parag: Paragraph[] = []\n\n    collections.forEach((collection) => {\n      departmentName = collection.department.fullName\n      collectionName = collection.name\n      collectionDescription = collection.summary\n      if (prevDepartment === departmentName) {\n        parag.push(\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: collectionName,\n                size: 22,\n                font: 'Calibri'\n              })\n            ]\n          }),\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: collectionDescription,\n                size: 22,\n                font: 'Calibri'\n              })\n            ]\n          }),\n          new Paragraph({})\n        )\n      } else {\n        parag.push(\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: 'Departamento: ',\n                bold: true,\n                size: 22,\n                font: 'Calibri'\n              }),\n              new TextRun({\n                text: departmentName,\n                size: 22,\n                font: 'Calibri'\n              })\n            ]\n          }),\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: collectionName,\n                size: 22,\n                font: 'Calibri'\n              })\n            ]\n          }),\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: collectionDescription,\n                size: 22,\n                font: 'Calibri'\n              })\n            ]\n          }),\n          new Paragraph({})\n        )\n      }\n\n      collection.evidences.forEach((evidence) => {\n        if (evidence.error === null || evidence.error === '') {\n          if (evidence.type === 'image') {\n            fileLink = (evidence as Image).fileLink.split('uploads/')[1]\n            evidenceDescription = evidence.description\n            externalLink = (evidence as Image).externalLink\n\n            if (externalLink === null) {\n              parag.push(\n                new Paragraph({\n                  children: [\n                    new TextRun({\n                      text: evidenceDescription,\n                      size: 22,\n                      font: 'Calibri'\n                    })\n                  ]\n                }),\n                new Paragraph({\n                  children: [\n                    new ImageRun({\n                      data: fs.readFileSync('./uploads/' + fileLink),\n                      transformation: {\n                        width: 300,\n                        height: 168\n                      }\n                    })\n                  ]\n                }),\n                new Paragraph({})\n              )\n            } else {\n              parag.push(\n                new Paragraph({\n                  children: [\n                    new TextRun({\n                      text: evidenceDescription,\n                      size: 22,\n                      font: 'Calibri'\n                    })\n                  ]\n                }),\n                new Paragraph({\n                  children: [\n                    new ImageRun({\n                      data: fs.readFileSync('./uploads/' + fileLink),\n                      transformation: {\n                        width: 300,\n                        height: 168\n                      }\n                    })\n                  ]\n                }),\n                new Paragraph({\n                  children: [\n                    new ExternalHyperlink({\n                      children: [\n                        new TextRun({\n                          text: externalLink,\n                          size: 22,\n                          style: 'Hyperlink',\n                          font: 'Calibri'\n                        })\n                      ],\n                      link: externalLink\n                    })\n                  ]\n                }),\n                new Paragraph({})\n              )\n            }\n          }\n\n          if (evidence.type === 'document') {\n            fileLink = (evidence as evidenceDocument.Document).fileLink\n            evidenceDescription = evidence.description\n\n            parag.push(\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: evidenceDescription,\n                    size: 22,\n                    font: 'Calibri'\n                  })\n                ]\n              }),\n              new Paragraph({\n                children: [\n                  new ExternalHyperlink({\n                    children: [\n                      new TextRun({\n                        text: fileLink,\n                        size: 22,\n                        style: 'Hyperlink',\n                        font: 'Calibri'\n                      })\n                    ],\n                    link: fileLink\n                  })\n                ]\n              }),\n              new Paragraph({})\n            )\n          }\n\n          if (evidence.type === 'link') {\n            evidenceDescription = evidence.description\n            externalLink = (evidence as Link).externalLink\n\n            parag.push(\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: evidenceDescription,\n                    size: 22,\n                    font: 'Calibri'\n                  })\n                ]\n              }),\n              new Paragraph({\n                children: [\n                  new ExternalHyperlink({\n                    children: [\n                      new TextRun({\n                        text: externalLink,\n                        size: 22,\n                        style: 'Hyperlink',\n                        font: 'Calibri'\n                      })\n                    ],\n                    link: externalLink\n                  })\n                ]\n              }),\n              new Paragraph({})\n            )\n          }\n        }\n      })\n      prevDepartment = departmentName\n    })\n    return parag\n  }\n\n  async generateWord(idCrit: number, idRecop: number) {\n    const summary = this.findInformationCollections(idCrit, idRecop)\n    const index = (await summary).criterion.indicator.index\n    const indicatorName = (await summary).criterion.indicator.name\n\n    const subIndex = (await summary).criterion.subIndex\n    const criterionName = (await summary).criterion.name\n\n    let collections = (await summary).informationCollections\n\n    collections = collections.filter((ic) => ic.isApproved)\n\n    const header = new Header({\n      children: [\n        new Paragraph({\n          children: [\n            new ImageRun({\n              data: fs.readFileSync('./images/Ucab.png'),\n              transformation: {\n                width: 300,\n                height: 43\n              },\n              floating: {\n                horizontalPosition: {\n                  relative: HorizontalPositionRelativeFrom.MARGIN,\n                  align: HorizontalPositionAlign.LEFT\n                },\n                verticalPosition: {\n                  relative: VerticalPositionRelativeFrom.TOP_MARGIN,\n                  align: VerticalPositionAlign.BOTTOM\n                }\n              }\n            }),\n            new ImageRun({\n              data: fs.readFileSync('./images/GM.png'),\n              transformation: {\n                width: 115,\n                height: 85\n              },\n              floating: {\n                horizontalPosition: {\n                  relative: HorizontalPositionRelativeFrom.MARGIN,\n                  align: HorizontalPositionAlign.RIGHT\n                },\n                verticalPosition: {\n                  relative: VerticalPositionRelativeFrom.TOP_MARGIN,\n                  align: VerticalPositionAlign.BOTTOM\n                }\n              }\n            })\n          ]\n        })\n      ]\n    })\n\n    const doc = new Document({\n      sections: [\n        {\n          properties: {\n            type: SectionType.CONTINUOUS\n          },\n          headers: {\n            default: header\n          },\n          children: [\n            new Paragraph({}),\n            new Paragraph({}),\n            new Paragraph({\n              alignment: 'center',\n              children: [\n                new TextRun({\n                  text: 'Template for Evidence(s)',\n                  bold: true,\n                  size: 36,\n                  font: 'Calibri'\n                })\n              ]\n            }),\n            new Paragraph({\n              alignment: 'center',\n              children: [\n                new TextRun({\n                  text: 'UI GreenMetric Questionnaire',\n                  bold: true,\n                  size: 36,\n                  font: 'Calibri'\n                })\n              ]\n            }),\n            new Paragraph({}),\n            new Paragraph({}),\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: 'University         :          Andrés Bello Guayana Catholic University',\n                  size: 22,\n                  font: 'Calibri'\n                })\n              ]\n            }),\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: 'Country             :          Venezuela',\n                  size: 22,\n                  font: 'Calibri'\n                })\n              ]\n            }),\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: 'Web Address    :          http://guayanaweb.ucab.edu.ve/',\n                  size: 22,\n                  font: 'Calibri'\n                })\n              ]\n            }),\n            new Paragraph({}),\n            new Paragraph({}),\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: '[' + index + ']' + indicatorName,\n                  bold: true,\n                  size: 22,\n                  font: 'Calibri'\n                })\n              ]\n            }),\n            new Paragraph({}),\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: '[' + index + '.' + subIndex + ']' + criterionName,\n                  bold: true,\n                  size: 22,\n                  font: 'Calibri'\n                })\n              ]\n            }),\n            new Paragraph({}),\n            ...this.createEvidences(collections)\n          ]\n        }\n      ]\n    })\n\n    const buffer = await Packer.toBuffer(doc)\n\n    return { buffer, index, subIndex, criterionName }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WrongPasswordException.html":{"url":"classes/WrongPasswordException.html","title":"class - WrongPasswordException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WrongPasswordException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/errors/wrong-password.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/errors/wrong-password.exception.ts:1\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class WrongPasswordException extends Error {\n  constructor() {\n    super()\n    this.name = this.constructor.name\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/core/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/dto/login-auth.dto.ts\n            \n            class\n            LoginAuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/errors/wrong-password.exception.ts\n            \n            class\n            WrongPasswordException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/auth/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/auth/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/auth/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/categories/categories.constants.ts\n            \n            variable\n            SORTABLE_FIELDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/categories/dto/order-categories-by-param.dto.ts\n            \n            class\n            OrderByParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/categories/entities/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/categorized-criteria/categorized-criteria.constants.ts\n            \n            variable\n            SORTABLE_FIELDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/categorized-criteria/categorized-criteria.controller.ts\n            \n            controller\n            CategorizedCriteriaController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/categorized-criteria/categorized-criteria.service.ts\n            \n            injectable\n            CategorizedCriteriaService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/categorized-criteria/dto/create-categorized-criterion.dto.ts\n            \n            class\n            CreateCategorizedCriteriaDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/categorized-criteria/dto/order-categorized-criteria-by-param.dto.ts\n            \n            class\n            OrderByParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/categorized-criteria/dto/update-categorized-criterion.dto.ts\n            \n            class\n            UpdateCategorizedCriterionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/categorized-criteria/entities/categorized-criterion.entity.ts\n            \n            entity\n            CategorizedCriteria\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/categorized-criteria/entities/categorized-criterion.entity.ts\n            \n            class\n            CategorizedCriteria\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/criterion/criterion.constants.ts\n            \n            variable\n            SORTABLE_FIELDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/criterion/criterion.controller.ts\n            \n            controller\n            CriterionController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/criterion/criterion.service.ts\n            \n            injectable\n            CriterionService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/criterion/dto/create-criteria.dto.ts\n            \n            class\n            CreateCriteriaDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/criterion/dto/order-criteria-by-param.dto.ts\n            \n            class\n            OrderByParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/criterion/dto/update-criteria.dto.ts\n            \n            class\n            UpdateCriteriaDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/criterion/entities/criteria.entity.ts\n            \n            entity\n            Criteria\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/criterion/entities/criteria.entity.ts\n            \n            class\n            Criteria\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/core/departments-per-recopilations/departments-per-recopilations.constants.ts\n            \n            variable\n            SORTABLE_FIELDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/departments-per-recopilations/departments-per-recopilations.controller.ts\n            \n            controller\n            DepartmentsPerRecopilationsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/departments-per-recopilations/departments-per-recopilations.service.ts\n            \n            injectable\n            DepartmentsPerRecopilationsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/departments-per-recopilations/dto/create-department-per-recopilation.dto.ts\n            \n            class\n            CreateDepartmentsPerRecopilationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/departments-per-recopilations/dto/order-departments-per-recopilations-by-param.dto.ts\n            \n            class\n            OrderByParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/departments-per-recopilations/dto/update-department-per-recopilation.dto.ts\n            \n            class\n            UpdateDepartmentPerRecopilationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/departments-per-recopilations/entities/departments-per-recopilation.entity.ts\n            \n            entity\n            DepartmentPerRecopilation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/departments-per-recopilations/entities/departments-per-recopilation.entity.ts\n            \n            class\n            DepartmentPerRecopilation\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/evidences/document.controller.ts\n            \n            controller\n            DocumentsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/evidences/document.service.ts\n            \n            injectable\n            DocumentsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/evidences/dto/create-evidence.dto.ts\n            \n            class\n            CreateEvidenceDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/evidences/dto/order-evidences-by-param.dto.ts\n            \n            class\n            OrderByParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/evidences/dto/update-evidence.dto.ts\n            \n            class\n            UpdateEvidenceDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/evidences/entities/document.entity.ts\n            \n            class\n            Document\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/evidences/entities/evidence.entity.ts\n            \n            entity\n            Evidence\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/evidences/entities/evidence.entity.ts\n            \n            class\n            Evidence\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/evidences/entities/image.entity.ts\n            \n            class\n            Image\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/evidences/entities/link.entity.ts\n            \n            class\n            Link\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/evidences/evidences.constants.ts\n            \n            variable\n            SORTABLE_FIELDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/evidences/evidences.controller.ts\n            \n            controller\n            EvidencesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/evidences/evidences.service.ts\n            \n            injectable\n            EvidencesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/evidences/image.controller.ts\n            \n            controller\n            ImagesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/evidences/image.service.ts\n            \n            injectable\n            ImagesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/evidences/link.controller.ts\n            \n            controller\n            LinksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/evidences/link.service.ts\n            \n            injectable\n            LinksService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/indicators-per-recopilations/dto/create-indicator-per-recopilation.dto.ts\n            \n            class\n            CreateIndicatorPerRecopilationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/indicators-per-recopilations/dto/update-indicator-per-recopilation.dto.ts\n            \n            class\n            UpdateIndicatorPerRecopilationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/indicators-per-recopilations/entities/indicator-per-recopilatio.entity.ts\n            \n            entity\n            IndicatorPerRecopilation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/indicators-per-recopilations/entities/indicator-per-recopilatio.entity.ts\n            \n            class\n            IndicatorPerRecopilation\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/indicators-per-recopilations/indicators-per-recopilations.controller.ts\n            \n            controller\n            IndicatorsPerRecopilationsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/indicators-per-recopilations/indicators-per-recopilations.service.ts\n            \n            injectable\n            IndicatorsPerRecopilationsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/indicators/dto/create-indicator.dto.ts\n            \n            class\n            CreateIndicatorDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/indicators/dto/order-indicators-by-param.dto.ts\n            \n            class\n            OrderByParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/indicators/dto/update-indicator.dto.ts\n            \n            class\n            UpdateIndicatorDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/indicators/entities/indicator.entity.ts\n            \n            entity\n            Indicator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/indicators/indicators.constants.ts\n            \n            variable\n            SORTABLE_FIELDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/indicators/indicators.controller.ts\n            \n            controller\n            IndicatorsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/indicators/indicators.service.ts\n            \n            injectable\n            IndicatorsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/information-collections/dto/create-information-collection.dto.ts\n            \n            class\n            CreateInformationCollectionDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/information-collections/dto/order-information-collections-by-param.dto.ts\n            \n            class\n            OrderByParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/information-collections/dto/update-information-collection.dto.ts\n            \n            class\n            UpdateInformationCollectionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/information-collections/entities/information-collection.entity.ts\n            \n            entity\n            InformationCollection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/information-collections/information-collections.constants.ts\n            \n            variable\n            SORTABLE_FIELDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/information-collections/information-collections.controller.ts\n            \n            controller\n            InformationCollectionsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/information-collections/information-collections.service.ts\n            \n            injectable\n            InformationCollectionsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/mails/login-data-mail.ts\n            \n            function\n            constructLoginDataMail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/mails/mails.service.ts\n            \n            injectable\n            MailsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/notifications/dto/create-notification.dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/notifications/dto/order-notifications-by-param.dto.ts\n            \n            class\n            OrderByParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/notifications/dto/update-notification.dto.ts\n            \n            class\n            UpdateNotificationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/notifications/entities/notification.entity.ts\n            \n            entity\n            Notification\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/notifications/notifications.constants.ts\n            \n            variable\n            NOTIFICATION_TYPES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/notifications/notifications.constants.ts\n            \n            variable\n            SORTABLE_FIELDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/notifications/notifications.controller.ts\n            \n            controller\n            NotificationsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/notifications/notifications.service.ts\n            \n            injectable\n            NotificationsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/recommendations/dto/create-recommendation.dto.ts\n            \n            class\n            CreateRecommendationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/recommendations/dto/order-recommendations-by-param.dto.ts\n            \n            class\n            OrderByParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/recommendations/entities/recommendation.entity.ts\n            \n            entity\n            Recommendation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/recommendations/entities/recommendation.entity.ts\n            \n            class\n            Recommendation\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/recommendations/recommendations.constants.ts\n            \n            variable\n            SORTABLE_FIELDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/recommendations/recommendations.controller.ts\n            \n            controller\n            RecommendationsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/recommendations/recommendations.service.ts\n            \n            injectable\n            RecommendationsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/recopilations/dto/create-recopilation.dto.ts\n            \n            class\n            CreateRecopilationDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/recopilations/dto/order-recopilations-by-param.dto.ts\n            \n            class\n            OrderByParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/recopilations/dto/recommend-categories.dto.ts\n            \n            class\n            CategoryToRecommend\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/recopilations/dto/recommend-categories.dto.ts\n            \n            class\n            DepartmentToBeRecommended\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/recopilations/dto/recommend-categories.dto.ts\n            \n            class\n            RecommendCategoriesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/recopilations/dto/recopilation.dto.ts\n            \n            interface\n            RecopilationDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts\n            \n            class\n            CriteriaToRelate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts\n            \n            class\n            IndicatorToRelate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/recopilations/dto/relate-indicators-to-recopilation.dto.ts\n            \n            class\n            RelateIndicatorsToRecopilationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/recopilations/dto/update-recopilation.dto.ts\n            \n            class\n            UpdateRecopilationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/recopilations/entities/recopilation.entity.ts\n            \n            entity\n            Recopilation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/recopilations/recopilations.constants.ts\n            \n            variable\n            SORTABLE_FIELDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/recopilations/recopilations.controller.ts\n            \n            controller\n            RecopilationsController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/core/recopilations/recopilations.service.ts\n            \n            injectable\n            RecopilationsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/core/summary-information/summary-information.controller.ts\n            \n            controller\n            SummaryInformationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/summary-information/summary-information.service.ts\n            \n            injectable\n            SummaryInformationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/users/departments.controller.ts\n            \n            controller\n            DepartmentsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/users/departments.service.ts\n            \n            injectable\n            DepartmentsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/users/dto/find-one-params.dto.ts\n            \n            class\n            FindOneParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/users/dto/order-users-by-param.dto.ts\n            \n            class\n            OrderByParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/users/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/users/entities/coordinator.entity.ts\n            \n            class\n            Coordinator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/users/entities/department.entity.ts\n            \n            class\n            Department\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/users/users.constants.ts\n            \n            variable\n            SORTABLE_FIELDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/users/users.constants.ts\n            \n            variable\n            USER_TYPES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/core/word/word.controller.ts\n            \n            controller\n            WordController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/word/word.service.ts\n            \n            injectable\n            WordService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/errors/class-validator-validations-exception.filter.ts\n            \n            class\n            ClassValidatorValidationsExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/errors/class-validator-validations-exception.filter.ts\n            \n            function\n            formatErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/class-validator-validations.exception.ts\n            \n            class\n            ClassValidatorValidationsException\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/errors/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/errors/type-orm-exception.filter.ts\n            \n            class\n            TypeORMExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/errors/type-orm-exception.filter.ts\n            \n            variable\n            POSTGRES_UNIQUE_CONSTRAINT_VIOLATION_CODE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/construct-http-response.ts\n            \n            function\n            constructHttpResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/file-upload.ts\n            \n            variable\n            fileFilter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/file-upload.ts\n            \n            variable\n            renameFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/filtering/constants.ts\n            \n            variable\n            DELIMITERS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/filtering/constants.ts\n            \n            variable\n            matchDelimiterRegexp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/filtering/constants.ts\n            \n            variable\n            matchOperatorRegexp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/filtering/constants.ts\n            \n            variable\n            OPERATORS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/filtering/filter.type.ts\n            \n            interface\n            Filter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/shared/filtering/filters-segment.dto.ts\n            \n            class\n            FiltersSegmentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/filtering/parse-filters-segment.ts\n            \n            function\n            matchFirstDelimiter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/filtering/parse-filters-segment.ts\n            \n            function\n            matchFirstOperator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/filtering/parse-filters-segment.ts\n            \n            function\n            parseFiltersSegment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/filtering/parse-filters-to-type-orm.ts\n            \n            function\n            parseFiltersToTypeOrm\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/pagination/construct-paginated-items-dto.ts\n            \n            function\n            constructPaginatedItemsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/pagination/paginated-items.dto.ts\n            \n            class\n            PaginatedItems\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/shared/pagination/pagination-params.dto.ts\n            \n            class\n            PaginationParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/sorting/order-type-param.dto.ts\n            \n            class\n            OrderTypeParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/succesful-response-builder/successful-response-builder.ts\n            \n            injectable\n            SuccessfulResponseBuilderInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/serve-static : ^4.0.2\n        \n            @nestjs/swagger : ^7.3.1\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            date-fns : ^3.6.0\n        \n            docx : ^8.5.0\n        \n            express : ^4.19.2\n        \n            file-saver : ^2.0.5\n        \n            generate-password : ^1.7.1\n        \n            handlebars : ^4.7.8\n        \n            hbs : ^4.2.0\n        \n            lodash : ^4.17.21\n        \n            multer : 1.4.5-lts.1\n        \n            nestjs-config : ^1.4.11\n        \n            nodemailer : ^6.9.14\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            request : ^2.88.2\n        \n            rxjs : ^7.8.1\n        \n            shared : workspace:*\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EvidenceType   (src/.../evidences.constants.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/evidences/evidences.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        EvidenceType\n                    \n                \n                        \n                            \n                                 DOCUMENT\n                            \n                        \n                        \n                            \n                                Value : document\n                            \n                        \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n                        \n                            \n                                 LINK\n                            \n                        \n                        \n                            \n                                Value : link\n                            \n                        \n            \n        \n\n    src/core/auth/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Coordinator\n                            \n                        \n                        \n                            \n                                Value : coordinator\n                            \n                        \n                        \n                            \n                                 Department\n                            \n                        \n                        \n                            \n                                Value : department\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            constructHttpResponse   (src/.../construct-http-response.ts)\n                        \n                        \n                            constructLoginDataMail   (src/.../login-data-mail.ts)\n                        \n                        \n                            constructPaginatedItemsDto   (src/.../construct-paginated-items-dto.ts)\n                        \n                        \n                            formatErrors   (src/.../class-validator-validations-exception.filter.ts)\n                        \n                        \n                            matchFirstDelimiter   (src/.../parse-filters-segment.ts)\n                        \n                        \n                            matchFirstOperator   (src/.../parse-filters-segment.ts)\n                        \n                        \n                            parseFiltersSegment   (src/.../parse-filters-segment.ts)\n                        \n                        \n                            parseFiltersToTypeOrm   (src/.../parse-filters-to-type-orm.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/shared/construct-http-response.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        constructHttpResponse\n                        \n                    \n                \n            \n            \n                \nconstructHttpResponse(statusCode: HttpStatus, data?: T, message?: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                statusCode\n                                            \n                                                        HttpStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         HttpResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/core/mails/login-data-mail.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        constructLoginDataMail\n                        \n                    \n                \n            \n            \n                \nconstructLoginDataMail(email: string, password: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/shared/pagination/construct-paginated-items-dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        constructPaginatedItemsDto\n                        \n                    \n                \n            \n            \n                \nconstructPaginatedItemsDto(items, totalItems: number, currentPage: number, itemsPerPage: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                totalItems\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                itemsPerPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PaginatedItems\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/errors/class-validator-validations-exception.filter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        formatErrors\n                        \n                    \n                \n            \n            \n                \nformatErrors(errors)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/shared/filtering/parse-filters-segment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        matchFirstDelimiter\n                        \n                    \n                \n            \n            \n                \nmatchFirstDelimiter(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                str\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchFirstOperator\n                        \n                    \n                \n            \n            \n                \nmatchFirstOperator(str: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                str\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseFiltersSegment\n                        \n                    \n                \n            \n            \n                \nparseFiltersSegment(segment: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                segment\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Filter[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/shared/filtering/parse-filters-to-type-orm.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parseFiltersToTypeOrm\n                        \n                    \n                \n            \n            \n                \nparseFiltersToTypeOrm(filters)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filters\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ pnpm installRunning the app\nExample :# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodTest\nExample :# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategorizedCriteriaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CriterionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DepartmentsPerRecopilationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EvidencesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IndicatorsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IndicatorsPerRecopilationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InformationCollectionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecommendationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecopilationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SummaryInformationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WordModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_CategorizedCriteriaModule\n\n\n\ncluster_CategorizedCriteriaModule_providers\n\n\n\ncluster_CriterionModule\n\n\n\ncluster_CriterionModule_providers\n\n\n\ncluster_DepartmentsPerRecopilationsModule\n\n\n\ncluster_DepartmentsPerRecopilationsModule_providers\n\n\n\ncluster_EvidencesModule\n\n\n\ncluster_EvidencesModule_providers\n\n\n\ncluster_IndicatorsModule\n\n\n\ncluster_IndicatorsModule_providers\n\n\n\ncluster_IndicatorsPerRecopilationsModule\n\n\n\ncluster_IndicatorsPerRecopilationsModule_providers\n\n\n\ncluster_InformationCollectionsModule\n\n\n\ncluster_InformationCollectionsModule_providers\n\n\n\ncluster_RecommendationsModule\n\n\n\ncluster_RecommendationsModule_providers\n\n\n\ncluster_RecopilationsModule\n\n\n\ncluster_RecopilationsModule_providers\n\n\n\ncluster_SummaryInformationModule\n\n\n\ncluster_SummaryInformationModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_WordModule\n\n\n\ncluster_WordModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCategorizedCriteriaModule\n\nCategorizedCriteriaModule\n\nAppModule -->\n\nCategorizedCriteriaModule->AppModule\n\n\n\n\n\nCriterionModule\n\nCriterionModule\n\nAppModule -->\n\nCriterionModule->AppModule\n\n\n\n\n\nDepartmentsPerRecopilationsModule\n\nDepartmentsPerRecopilationsModule\n\nAppModule -->\n\nDepartmentsPerRecopilationsModule->AppModule\n\n\n\n\n\nEvidencesModule\n\nEvidencesModule\n\nAppModule -->\n\nEvidencesModule->AppModule\n\n\n\n\n\nIndicatorsModule\n\nIndicatorsModule\n\nAppModule -->\n\nIndicatorsModule->AppModule\n\n\n\n\n\nIndicatorsPerRecopilationsModule\n\nIndicatorsPerRecopilationsModule\n\nAppModule -->\n\nIndicatorsPerRecopilationsModule->AppModule\n\n\n\n\n\nInformationCollectionsModule\n\nInformationCollectionsModule\n\nAppModule -->\n\nInformationCollectionsModule->AppModule\n\n\n\n\n\nMailsModule\n\nMailsModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nMailsModule->UsersModule\n\n\n\nAppModule -->\n\nMailsModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nRecommendationsModule\n\nRecommendationsModule\n\nAppModule -->\n\nRecommendationsModule->AppModule\n\n\n\nAppModule -->\n\nRecommendationsModule->AppModule\n\n\n\n\n\nRecopilationsModule\n\nRecopilationsModule\n\nAppModule -->\n\nRecopilationsModule->AppModule\n\n\n\nAppModule -->\n\nRecopilationsModule->AppModule\n\n\n\n\n\nSummaryInformationModule\n\nSummaryInformationModule\n\nAppModule -->\n\nSummaryInformationModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nWordModule\n\nWordModule\n\nAppModule -->\n\nWordModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nCategorizedCriteriaService\n\nCategorizedCriteriaService\n\nCategorizedCriteriaModule -->\n\nCategorizedCriteriaService->CategorizedCriteriaModule\n\n\n\n\n\nCriterionService\n\nCriterionService\n\nCriterionModule -->\n\nCriterionService->CriterionModule\n\n\n\n\n\nDepartmentsPerRecopilationsService\n\nDepartmentsPerRecopilationsService\n\nDepartmentsPerRecopilationsModule -->\n\nDepartmentsPerRecopilationsService->DepartmentsPerRecopilationsModule\n\n\n\n\n\nDocumentsService\n\nDocumentsService\n\nEvidencesModule -->\n\nDocumentsService->EvidencesModule\n\n\n\n\n\nEvidencesService\n\nEvidencesService\n\nEvidencesModule -->\n\nEvidencesService->EvidencesModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nEvidencesModule -->\n\nImagesService->EvidencesModule\n\n\n\n\n\nLinksService\n\nLinksService\n\nEvidencesModule -->\n\nLinksService->EvidencesModule\n\n\n\n\n\nMailsService\n\nMailsService\n\nEvidencesModule -->\n\nMailsService->EvidencesModule\n\n\n\nMailsModule -->\n\nMailsService->MailsModule\n\n\n\nRecommendationsModule -->\n\nMailsService->RecommendationsModule\n\n\n\nUsersModule -->\n\nMailsService->UsersModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nEvidencesModule -->\n\nNotificationsService->EvidencesModule\n\n\n\nInformationCollectionsModule -->\n\nNotificationsService->InformationCollectionsModule\n\n\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\nRecommendationsModule -->\n\nNotificationsService->RecommendationsModule\n\n\n\n\n\nIndicatorsService\n\nIndicatorsService\n\nIndicatorsModule -->\n\nIndicatorsService->IndicatorsModule\n\n\n\n\n\nIndicatorsPerRecopilationsService\n\nIndicatorsPerRecopilationsService\n\nIndicatorsPerRecopilationsModule -->\n\nIndicatorsPerRecopilationsService->IndicatorsPerRecopilationsModule\n\n\n\n\n\nInformationCollectionsService\n\nInformationCollectionsService\n\nInformationCollectionsModule -->\n\nInformationCollectionsService->InformationCollectionsModule\n\n\n\n\n\nRecommendationsService\n\nRecommendationsService\n\nRecommendationsModule -->\n\nRecommendationsService->RecommendationsModule\n\n\n\n\n\nRecopilationsService\n\nRecopilationsService\n\nRecopilationsModule -->\n\nRecopilationsService->RecopilationsModule\n\n\n\n\n\nSummaryInformationService\n\nSummaryInformationService\n\nSummaryInformationModule -->\n\nSummaryInformationService->SummaryInformationModule\n\n\n\n\n\nDepartmentsService\n\nDepartmentsService\n\nUsersModule -->\n\nDepartmentsService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nWordService\n\nWordService\n\nWordModule -->\n\nWordService->WordModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        17 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    21 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    64 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Delimiter   (src/.../constants.ts)\n                        \n                        \n                            HttpResponse   (src/.../http-response.type.ts)\n                        \n                        \n                            NotificationType   (src/.../notifications.constants.ts)\n                        \n                        \n                            Operator   (src/.../constants.ts)\n                        \n                        \n                            SortableField   (src/.../criterion.constants.ts)\n                        \n                        \n                            SortableField   (src/.../categorized-criteria.constants.ts)\n                        \n                        \n                            SortableField   (src/.../categories.constants.ts)\n                        \n                        \n                            SortableField   (src/.../departments-per-recopilations.constants.ts)\n                        \n                        \n                            SortableField   (src/.../evidences.constants.ts)\n                        \n                        \n                            SortableField   (src/.../indicators.constants.ts)\n                        \n                        \n                            SortableField   (src/.../information-collections.constants.ts)\n                        \n                        \n                            SortableField   (src/.../recopilations.constants.ts)\n                        \n                        \n                            SortableField   (src/.../notifications.constants.ts)\n                        \n                        \n                            SortableField   (src/.../recommendations.constants.ts)\n                        \n                        \n                            SortableField   (src/.../users.constants.ts)\n                        \n                        \n                            UserType   (src/.../users.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/filtering/constants.ts\n    \n    \n        \n            \n                \n                    \n                    Delimiter\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Operator\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/shared/http-response.type.ts\n    \n    \n        \n            \n                \n                    \n                    HttpResponse\n                \n            \n            \n                \n                        literal type | literal type\n\n                \n            \n        \n    \n    src/core/notifications/notifications.constants.ts\n    \n    \n        \n            \n                \n                    \n                    NotificationType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SortableField\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/criterion/criterion.constants.ts\n    \n    \n        \n            \n                \n                    \n                    SortableField\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/categorized-criteria/categorized-criteria.constants.ts\n    \n    \n        \n            \n                \n                    \n                    SortableField\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/categories/categories.constants.ts\n    \n    \n        \n            \n                \n                    \n                    SortableField\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/departments-per-recopilations/departments-per-recopilations.constants.ts\n    \n    \n        \n            \n                \n                    \n                    SortableField\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/evidences/evidences.constants.ts\n    \n    \n        \n            \n                \n                    \n                    SortableField\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/indicators/indicators.constants.ts\n    \n    \n        \n            \n                \n                    \n                    SortableField\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/information-collections/information-collections.constants.ts\n    \n    \n        \n            \n                \n                    \n                    SortableField\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/recopilations/recopilations.constants.ts\n    \n    \n        \n            \n                \n                    \n                    SortableField\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/recommendations/recommendations.constants.ts\n    \n    \n        \n            \n                \n                    \n                    SortableField\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/users/users.constants.ts\n    \n    \n        \n            \n                \n                    \n                    SortableField\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DELIMITERS   (src/.../constants.ts)\n                        \n                        \n                            fileFilter   (src/.../file-upload.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            matchDelimiterRegexp   (src/.../constants.ts)\n                        \n                        \n                            matchOperatorRegexp   (src/.../constants.ts)\n                        \n                        \n                            NOTIFICATION_TYPES   (src/.../notifications.constants.ts)\n                        \n                        \n                            OPERATORS   (src/.../constants.ts)\n                        \n                        \n                            POSTGRES_UNIQUE_CONSTRAINT_VIOLATION_CODE   (src/.../type-orm-exception.filter.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            renameFile   (src/.../file-upload.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            SORTABLE_FIELDS   (src/.../criterion.constants.ts)\n                        \n                        \n                            SORTABLE_FIELDS   (src/.../categorized-criteria.constants.ts)\n                        \n                        \n                            SORTABLE_FIELDS   (src/.../categories.constants.ts)\n                        \n                        \n                            SORTABLE_FIELDS   (src/.../departments-per-recopilations.constants.ts)\n                        \n                        \n                            SORTABLE_FIELDS   (src/.../evidences.constants.ts)\n                        \n                        \n                            SORTABLE_FIELDS   (src/.../indicators.constants.ts)\n                        \n                        \n                            SORTABLE_FIELDS   (src/.../information-collections.constants.ts)\n                        \n                        \n                            SORTABLE_FIELDS   (src/.../recopilations.constants.ts)\n                        \n                        \n                            SORTABLE_FIELDS   (src/.../notifications.constants.ts)\n                        \n                        \n                            SORTABLE_FIELDS   (src/.../recommendations.constants.ts)\n                        \n                        \n                            SORTABLE_FIELDS   (src/.../users.constants.ts)\n                        \n                        \n                            USER_TYPES   (src/.../users.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/filtering/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DELIMITERS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  AND: ';',\n  OR: ','\n} as const\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchDelimiterRegexp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /;|,/\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        matchOperatorRegexp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /==|!=|>=||\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OPERATORS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  EQUAL: '==',\n  NOT_EQUAL: '!=',\n  GREATER_OR_EQUAL: '>=',\n  LESS_OR_EQUAL: '',\n  LESS: '\n                    \n                \n\n\n        \n    \n\n    src/shared/file-upload.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        fileFilter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (req, file, callback) => {\n  if (!file.originalname.match(/\\.(jpeg|jpg|gif|png|xls|xlsx|doc|docx|pdf)$/)) {\n    return callback(new Error('Invalid format type'), false)\n  }\n  callback(null, true)\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        renameFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (req, file, callback) => {\n  const fileName = file.originalname\n  const randomName = Array(4)\n    .fill(null)\n    .map(() => Math.round(Math.random() * 16).toString(16))\n    .join('')\n\n  callback(null, `${randomName}-${fileName}`)\n}\n                    \n                \n\n\n        \n    \n\n    src/core/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/core/notifications/notifications.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NOTIFICATION_TYPES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  RECOMMENDATION: 'recommendation',\n  INFORMATION_COLLECTION_CREATION: 'information_collection_creation',\n  INFORMATION_COLLECTION_EDITION: 'information_collection_edition',\n  EVIDENCE_CREATION: 'evidence_creation',\n  EVIDENCE_EDITION: 'evidence_edition',\n  EVIDENCE_ERROR: 'evidence_error'\n} as const\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SORTABLE_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'id',\n  'createdAt',\n  'seen'\n] as const\n                    \n                \n\n\n        \n    \n\n    src/errors/type-orm-exception.filter.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        POSTGRES_UNIQUE_CONSTRAINT_VIOLATION_CODE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '23505'\n                    \n                \n\n\n        \n    \n\n    src/core/auth/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/core/criterion/criterion.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SORTABLE_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'id',\n  'subIndex',\n  'name',\n  'requiresEvidence',\n  'alias',\n  'helpText'\n] as const\n                    \n                \n\n\n        \n    \n\n    src/core/categorized-criteria/categorized-criteria.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SORTABLE_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'id'\n] as const\n                    \n                \n\n\n        \n    \n\n    src/core/categories/categories.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SORTABLE_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'id',\n  'name',\n  'helpText'\n] as const\n                    \n                \n\n\n        \n    \n\n    src/core/departments-per-recopilations/departments-per-recopilations.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SORTABLE_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'id'\n] as const\n                    \n                \n\n\n        \n    \n\n    src/core/evidences/evidences.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SORTABLE_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : ['id'] as const\n                    \n                \n\n\n        \n    \n\n    src/core/indicators/indicators.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SORTABLE_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'index',\n  'name',\n  'alias',\n  'helpText'\n] as const\n                    \n                \n\n\n        \n    \n\n    src/core/information-collections/information-collections.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SORTABLE_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'id',\n  'summary',\n  'createdAt'\n] as const\n                    \n                \n\n\n        \n    \n\n    src/core/recopilations/recopilations.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SORTABLE_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'id',\n  'name',\n  'startDate',\n  'endDate',\n  'description',\n  'departmentEndDate'\n] as const\n                    \n                \n\n\n        \n    \n\n    src/core/recommendations/recommendations.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SORTABLE_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : ['id'] as const\n                    \n                \n\n\n        \n    \n\n    src/core/users/users.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SORTABLE_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'id',\n  'fullName',\n  'email',\n  'type'\n] as const\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_TYPES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  COORDINATOR: 'coordinator',\n  DEPARTMENT: 'department',\n  ADMIN: 'admin'\n} as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
